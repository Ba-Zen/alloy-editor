window["AlloyEditor"] =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/adapter/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/object-assign/index.js":
/*!*********************************************!*\
  !*** ./node_modules/object-assign/index.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),

/***/ "./node_modules/prop-types/checkPropTypes.js":
/*!***************************************************!*\
  !*** ./node_modules/prop-types/checkPropTypes.js ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (true) {
  var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
  var loggedTypeFailures = {};

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (true) {
    for (var typeSpecName in typeSpecs) {
      if (typeSpecs.hasOwnProperty(typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          )

        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

module.exports = checkPropTypes;


/***/ }),

/***/ "./node_modules/prop-types/factoryWithTypeCheckers.js":
/*!************************************************************!*\
  !*** ./node_modules/prop-types/factoryWithTypeCheckers.js ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var assign = __webpack_require__(/*! object-assign */ "./node_modules/object-assign/index.js");

var ReactPropTypesSecret = __webpack_require__(/*! ./lib/ReactPropTypesSecret */ "./node_modules/prop-types/lib/ReactPropTypesSecret.js");
var checkPropTypes = __webpack_require__(/*! ./checkPropTypes */ "./node_modules/prop-types/checkPropTypes.js");

var printWarning = function() {};

if (true) {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message) {
    this.message = message;
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (true) {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if ( true && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName  + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
       true ? printWarning('Invalid argument supplied to oneOf, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues);
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + propValue + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (propValue.hasOwnProperty(key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
       true ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : undefined;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        if (checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret) == null) {
          return null;
        }
      }

      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (!checker) {
          continue;
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from
      // props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' +  JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),

/***/ "./node_modules/prop-types/index.js":
/*!******************************************!*\
  !*** ./node_modules/prop-types/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (true) {
  var REACT_ELEMENT_TYPE = (typeof Symbol === 'function' &&
    Symbol.for &&
    Symbol.for('react.element')) ||
    0xeac7;

  var isValidElement = function(object) {
    return typeof object === 'object' &&
      object !== null &&
      object.$$typeof === REACT_ELEMENT_TYPE;
  };

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(/*! ./factoryWithTypeCheckers */ "./node_modules/prop-types/factoryWithTypeCheckers.js")(isValidElement, throwOnDirectAccess);
} else {}


/***/ }),

/***/ "./node_modules/prop-types/lib/ReactPropTypesSecret.js":
/*!*************************************************************!*\
  !*** ./node_modules/prop-types/lib/ReactPropTypesSecret.js ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),

/***/ "./src/adapter/core.js":
/*!*****************************!*\
  !*** ./src/adapter/core.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

__webpack_require__(/*! ../core */ "./src/core/index.js");

__webpack_require__(/*! ../plugins */ "./src/plugins/index.js");

__webpack_require__(/*! ../components/uibridge */ "./src/components/uibridge/index.js");

var _oop = __webpack_require__(/*! ../oop/oop */ "./src/oop/oop.js");

var _oop2 = _interopRequireDefault(_oop);

var _lang = __webpack_require__(/*! ../oop/lang */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _base = __webpack_require__(/*! ../oop/base */ "./src/oop/base.js");

var _base2 = _interopRequireDefault(_base);

var _selections = __webpack_require__(/*! ../selections/selections */ "./src/selections/selections.js");

var _selections2 = _interopRequireDefault(_selections);

var _main = __webpack_require__(/*! ../components/main.jsx */ "./src/components/main.jsx");

var _main2 = _interopRequireDefault(_main);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var EMBED_VIDEO_WIDTH = 560;
var EMBED_VIDEO_HEIGHT = 315;

/**
 * AlloyEditor main class. Creates instance of the editor and provides the user configuration
 * to the UI.
 *
 * @class Core
 * @constructor
 * @param {Object} config The configuration to be used.
 */
function Core(config) {
	Core.superclass.constructor.call(this, config);
}

(0, _oop2.default)(Core, _base2.default, {
	/**
  * Initializer lifecycle implementation for the AlloyEditor class. Creates a CKEditor
  * instance, passing it the provided configuration attributes.
  *
  * @memberof Core
  * @instance
  * @protected
  * @method initializer
  * @param {Object} config Configuration object literal for the editor.
  */
	initializer: function initializer(config) {
		var node = this.get('srcNode');

		if (this.get('enableContentEditable')) {
			node.setAttribute('contenteditable', 'true');
		}

		var editor = CKEDITOR.inline(node);

		editor.config.allowedContent = this.get('allowedContent');

		editor.config.toolbars = this.get('toolbars');

		editor.config.removePlugins = this.get('removePlugins');

		editor.config.extraPlugins = this.get('extraPlugins');

		editor.config.embedProviders = this.get('embedProviders');

		editor.config.placeholderClass = this.get('placeholderClass');

		editor.config.pasteFromWordRemoveStyles = false;
		editor.config.pasteFromWordRemoveFontStyles = false;

		editor.config.selectionKeystrokes = this.get('selectionKeystrokes');

		editor.config.spritemap = this.get('spritemap');

		_lang2.default.mix(editor.config, config);

		if (CKEDITOR.env.ie && !CKEDITOR.env.edge) {
			// editor.config.extraPlugins = editor.config.extraPlugins.replace(
			// 	'ae_dragresize',
			// 	'ae_dragresize_ie'
			// );
			// editor.config.removePlugins = editor.config.removePlugins.replace(
			// 	'ae_dragresize',
			// 	'ae_dragresize_ie'
			// );
			var plugin = CKEDITOR.env.version === 11 ? 'ae_dragresize_ie11' : 'ae_dragresize_ie';

			editor.config.extraPlugins = editor.config.extraPlugins.replace('ae_dragresize', plugin);
			editor.config.removePlugins = editor.config.removePlugins.replace('ae_dragresize', plugin);
		}

		editor.once('contentDom', function () {
			this._addReadOnlyLinkClickListener(editor);

			var editable = editor.editable();

			editable.addClass('ae-editable');
		}.bind(this));

		this._editor = editor;

		AlloyEditor.loadLanguageResources(this._renderUI.bind(this));
	},

	/**
  * Destructor lifecycle implementation for the AlloyEdtor class. Destroys the CKEditor
  * instance and destroys all created toolbars.
  *
  * @memberof Core
  * @instance
  * @protected
  * @method destructor
  */
	destructor: function destructor() {
		this._destroyed = true;

		if (this._editorUIElement) {
			_reactDom2.default.unmountComponentAtNode(this._editorUIElement);
			this._editorUIElement.parentNode.removeChild(this._editorUIElement);
		}

		var nativeEditor = this.get('nativeEditor');

		if (nativeEditor) {
			var editable = nativeEditor.editable();

			if (editable) {
				editable.removeClass('ae-editable');

				if (this.get('enableContentEditable')) {
					this.get('srcNode').setAttribute('contenteditable', 'false');
				}
			}

			this._clearSelections();

			nativeEditor.destroy();
		}
	},

	/**
  * Clear selections from window object
  *
  * @memberof Core
  * @instance
  * @protected
  * @method _clearSelections
  */
	_clearSelections: function _clearSelections() {
		var nativeEditor = this.get('nativeEditor');
		var isMSSelection = typeof window.getSelection != 'function';

		if (isMSSelection) {
			nativeEditor.document.$.selection.empty();
		} else {
			nativeEditor.document.getWindow().$.getSelection().removeAllRanges();
		}
	},

	/**
  * Method to set default link behavior
  *
  * @memberof Core
  * @instance
  * @protected
  * @method _addReadOnlyLinkClickListener
  * @param {Object} editor
  */
	_addReadOnlyLinkClickListener: function _addReadOnlyLinkClickListener(editor) {
		editor.editable().on('click', this._defaultReadOnlyClickFn, this, {
			editor: editor
		});
	},

	/**
  * Called on `click` event when the editor is in read only mode. Navigates to link's URL or opens
  * the link in a new window.
  *
  * @memberof Core
  * @instance
  * @event readOnlyClick
  * @protected
  * @method _defaultReadOnlyClickFn
  * @param {Object} event The fired `click` event payload
  */
	_defaultReadOnlyClickFn: function _defaultReadOnlyClickFn(event) {
		var mouseEvent = event.data.$;
		var hasCtrlKey = mouseEvent.ctrlKey || mouseEvent.metaKey;
		var shouldOpen = this._editor.config.readOnly || hasCtrlKey;

		mouseEvent.preventDefault();

		if (!shouldOpen) {
			return;
		}

		if (event.listenerData.editor.editable().editor.fire('readOnlyClick', event.data) !== false) {
			var ckElement = new CKEDITOR.dom.elementPath(event.data.getTarget(), this);
			var link = ckElement.lastElement;

			if (link) {
				var href = link.$.attributes.href ? link.$.attributes.href.value : null;
				var target = hasCtrlKey ? '_blank' : link.$.attributes.target ? link.$.attributes.target.value : null;
				this._redirectLink(href, target);
			}
		}
	},

	/**
  * Retrieves the native CKEditor instance. Having this, the developer may use the API of CKEditor OOTB.
  *
  * @memberof Core
  * @instance
  * @protected
  * @method _getNativeEditor
  * @return {Object} The current instance of CKEditor.
  */
	_getNativeEditor: function _getNativeEditor() {
		return this._editor;
	},

	/**
  * Redirects the browser to a given link
  *
  * @memberof Core
  * @instance
  * @protected
  * @method _redirectLink
  * @param {string} href The href to take the browser to
  * @param {string=} target Specifies where to display the link
  */
	_redirectLink: function _redirectLink(href, target) {
		if (target && href) {
			window.open(href, target);
		} else if (href) {
			window.location.href = href;
		}
	},

	/**
  * Renders the specified from the user toolbars.
  *
  * @memberof Core
  * @instance
  * @protected
  * @method _renderUI
  */
	_renderUI: function _renderUI() {
		if (!this._destroyed) {
			var editorUIElement = document.createElement('div');
			editorUIElement.className = 'ae-ui';

			var uiNode = this.get('uiNode') || document.body;

			uiNode.appendChild(editorUIElement);

			this._mainUI = _reactDom2.default.render(_react2.default.createElement(_main2.default, {
				editor: this,
				eventsDelay: this.get('eventsDelay'),
				toolbars: this.get('toolbars')
			}), editorUIElement);

			this._editorUIElement = editorUIElement;

			this.get('nativeEditor').fire('uiReady');
		}
	},

	/**
  * The function returns an HTML element from the passed value. If the passed value is a string, it should be
  * the Id of the element which have to be retrieved from the DOM.
  * If an HTML Element is passed, the element itself will be returned.
  *
  * @memberof Core
  * @instance
  * @method _toElement
  * @protected
  * @param {!(String|HTMLElement)} value String, which have to correspond to an HTML element from the DOM,
  * or the HTML element itself. If Id is passed, the HTML element will be retrieved from the DOM.
  * @return {HTMLElement} An HTML element.
  */
	_toElement: function _toElement(value) {
		if (_lang2.default.isString(value)) {
			value = document.getElementById(value);
		}

		return value;
	},

	/**
  * Validates the allowed content attribute. Look
  * [here](http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-allowedContent) for more information about the
  * supported values.
  *
  * @memberof Core
  * @instance
  * @protected
  * @method _validateAllowedContent
  * @param {Any} value The value to be checked
  * @return {Boolean} True if the current value is valid configuration, false otherwise
  */
	_validateAllowedContent: function _validateAllowedContent(value) {
		return _lang2.default.isString(value) || _lang2.default.isObject(value) || _lang2.default.isBoolean(value);
	},

	/**
  * Validates the value of toolbars attribute
  *
  * @memberof Core
  * @instance
  * @protected
  * @method _validateToolbars
  * @param {Any} value The value to be checked
  * @return {Boolean} True if the current value is valid toolbars configuration, false otherwise
  */
	_validateToolbars: function _validateToolbars(value) {
		return _lang2.default.isObject(value) || _lang2.default.isNull(value);
	}
}, {
	ATTRS: {
		/**
   * Configures the allowed content for the current instance of AlloyEditor.
   * Look on the [official CKEditor API](http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-allowedContent)
   * for more information about the valid values.
   *
   * @memberof Core
   * @instance
   * @property allowedContent
   * @default true
   * @writeOnce
   * @type {Boolean, String, Object}
   */
		allowedContent: {
			validator: '_validateAllowedContent',
			value: true,
			writeOnce: true
		},

		/**
   * Callback to be invoked when clicking on the
   * <code>src/components/buttons/button-link-edit-browse.jsx</code>
   * component.
   *
   * @memberof Core
   * @instance
   * @propety documentBrowseLinkCallback
   * @default undefined
   * @type {Function|undefined}
   */
		documentBrowseLinkCallback: {
			validator: _lang2.default.isFunction,
			value: undefined
		},

		/**
   * Configuration for the
   * <code>src/components/buttons/button-link-edit-browse.jsx</code>
   * component.
   *
   * @memberof Core
   * @instance
   * @propety documentBrowseLinkUrl
   * @default undefined
   * @type {String|undefined}
   */
		documentBrowseLinkUrl: {
			validator: _lang2.default.isString,
			value: undefined
		},

		/**
   * List of embed providers for videos
   *
   * @memberof Core
   * @instance
   * @property embedProviders
   * @default []
   * @type Array}
   */
		embedProviders: {
			validator: _lang2.default.isArray,
			value: [{
				id: 'facebook',
				tpl: '<iframe allowFullScreen="true" allowTransparency="true"\n                         frameborder="0" height="' + EMBED_VIDEO_HEIGHT + '"\n                         src="https://www.facebook.com/plugins/video.php?href={embedId}\'\n                         &show_text=0&width=' + EMBED_VIDEO_WIDTH + '&height=' + EMBED_VIDEO_HEIGHT + '" scrolling="no"\n                         style="border:none;overflow:hidden" width="' + EMBED_VIDEO_WIDTH + '}"></iframe>',
				urlSchemes: ['(https?:\\/\\/(?:www\\.)?facebook.com\\/\\S*\\/videos\\/\\S*)']
			}, {
				id: 'twitch',
				tpl: '<iframe allowfullscreen="true" frameborder="0"\n                         height="' + EMBED_VIDEO_HEIGHT + '"\n                         src="https://player.twitch.tv/?autoplay=false&video={embedId}"\n                         scrolling="no" width="' + EMBED_VIDEO_WIDTH + '"></iframe>',
				urlSchemes: ['https?:\\/\\/(?:www\\.)?twitch.tv\\/videos\\/(\\S*)$']
			}, {
				id: 'vimeo',
				tpl: '<iframe allowfullscreen frameborder="0" height="' + EMBED_VIDEO_HEIGHT + '"\n                         mozallowfullscreen src="https://player.vimeo.com/video/{embedId}"\n                         webkitallowfullscreen width="' + EMBED_VIDEO_WIDTH + '"></iframe>',
				urlSchemes: ['https?:\\/\\/(?:www\\.)?vimeo\\.com\\/album\\/.*\\/video\\/(\\S*)', 'https?:\\/\\/(?:www\\.)?vimeo\\.com\\/channels\\/.*\\/(\\S*)', 'https?:\\/\\/(?:www\\.)?vimeo\\.com\\/groups\\/.*\\/videos\\/(\\S*)', 'https?:\\/\\/(?:www\\.)?vimeo\\.com\\/(\\S*)$']
			}, {
				id: 'youtube',
				tpl: '<iframe allow="autoplay; encrypted-media" allowfullscreen\n                         height="' + EMBED_VIDEO_HEIGHT + '" frameborder="0"\n                         src="https://www.youtube.com/embed/{embedId}?rel=0"\n                         width="' + EMBED_VIDEO_WIDTH + '"></iframe>',
				urlSchemes: ['https?:\\/\\/(?:www\\.)?youtube.com\\/watch\\?v=(\\S*)$']
			}]
		},

		/**
   * Specifies whether AlloyEditor set the contenteditable attribute
   * to "true" on its srcNode.
   *
   * @memberof Core
   * @instance
   * @property enableContentEditable
   * @type Boolean
   * @default true
   * @writeOnce
   */
		enableContentEditable: {
			validator: _lang2.default.isBoolean,
			value: true,
			writeOnce: true
		},

		/**
   * The delay (timeout), in ms, after which events such like key or mouse events will be processed.
   *
   * @memberof Core
   * @instance
   * @property eventsDelay
   * @type {Number}
   */
		eventsDelay: {
			validator: _lang2.default.isNumber,
			value: 100
		},

		/**
   * Specifies the extra plugins which have to be loaded to the current CKEditor instance in order to
   * make AlloyEditor to work properly.
   *
   * @memberof Core
   * @instance
   * @property extraPlugins
   * @default 'uicore,selectionregion,dragresize,addimages,placeholder,tabletools,tableresize,autolink'
   * @writeOnce
   * @type {String}
   */
		extraPlugins: {
			validator: _lang2.default.isString,
			value: 'ae_uicore,ae_selectionregion,ae_selectionkeystrokes,ae_imagealignment,ae_addimages,ae_placeholder,' + 'ae_tabletools,ae_tableresize,ae_autolink,ae_embed,ae_autolist,ae_dragresize,ae_dragresize_ie11,' + 'ae_uibridge,ae_richcombobridge,ae_panelmenubuttonbridge,ae_menubridge,ae_menubuttonbridge,ae_buttonbridge,font,colorbutton',
			writeOnce: true
		},

		/**
   * Specifies the "mode" for alloy editor
   * @memberof Core
   * @instance
   * @property mode
   * @default 'simple'
   * @writeOnce
   * @type {String}
   */
		mode: {
			validator: _lang2.default.isString,
			value: 'simple'
		},

		/**
   * Retrieves the native CKEditor instance. Having this, the developer may use the full API of CKEditor.
   *
   * @memberof Core
   * @instance
   * @property nativeEditor
   * @readOnly
   * @type {Object}
   */
		nativeEditor: {
			getter: '_getNativeEditor',
			readOnly: true
		},

		/**
   * Specifies the class, which should be added by Placeholder plugin
   * {{#crossLink "CKEDITOR.plugins.ae_placeholder}}{{/crossLink}}
   * when editor is not focused.
   *
   * @memberof Core
   * @instance
   * @property placeholderClass
   * @default 'ae-placeholder'
   * @writeOnce
   * @type {String}
   */
		placeholderClass: {
			validator: _lang2.default.isString,
			value: 'ae-placeholder',
			writeOnce: true
		},

		/**
   * Specifies the plugins, which come by default with CKEditor, but which are not needed by AlloyEditor.
   * These plugins add the default UI for CKeditor, which is no more needed. Please note that AlloyEdtor
   * comes with its own highly optimized copy of CKEditor (just customized via their official download page).
   * This version does not come with the unneeded plugins, so the value of this property won't be needed.
   * However, if you decide to go with the OOTB version of CKEditor, you will have to remove some of the
   * plugins if you decide to use AlloyEditor. Keep in mind that removing these plugins doesn't remove them
   * entirely from CKEditor. It just removes them from its current instance, in which you will use different
   * UI - those of AlloyEditor. You will be fully able to use both OOTB CKEditor and AlloyEditor on the same
   * page!
   *
   * @memberof Core
   * @instance
   * @property removePlugins
   * @default 'contextmenu,toolbar,elementspath,resize,liststyle,link'
   * @writeOnce
   * @type {String}
   */
		removePlugins: {
			validator: _lang2.default.isString,
			value: 'contextmenu,toolbar,elementspath,resize,liststyle,link',
			writeOnce: true
		},

		/**
   * Array of manual selection triggers. They can be configured to manually show a specific selection toolbar
   * by forcing the selection type. A selectionKeystroke item consists of a keys property with a [CKEditor keystroke
   * definition](http://docs.ckeditor.com/#!/api/CKEDITOR.config-cfg-keystrokes) and a selection property with
   * the selection name to trigger.
   *
   * @memberof Core
   * @instance
   * @property selectionKeystrokes
   * @type {Array}
   */
		selectionKeystrokes: {
			validator: _lang2.default.isArray,
			value: [{
				keys: CKEDITOR.CTRL + 76 /* L*/
				, selection: 'link'
			}, {
				keys: CKEDITOR.CTRL + CKEDITOR.SHIFT + 76 /* L*/
				, selection: 'embed'
			}]
		},

		/**
   * The path to the spritemap SVG used for icons
   *
   * @memberof Core
   * @instance
   * @property spritemap
   * @type String
   * @writeOnce
   */
		spritemap: {
			validator: _lang2.default.isString,
			value: 'alloy-editor/assets/icons/icons.svg',
			writeOnce: true
		},

		/**
   * The Node ID or HTMl node, which AlloyEditor should use as an editable area.
   *
   * @memberof Core
   * @instance
   * @property srcNode
   * @type String | Node
   * @writeOnce
   */
		srcNode: {
			setter: '_toElement',
			writeOnce: true
		},

		/**
   * The toolbars configuration for this editor instance
   *
   * @memberof Core
   * @instance
   * @property {Object} toolbars
   */
		toolbars: {
			validator: '_validateToolbars',
			value: {
				add: {
					buttons: ['image', 'embed', 'camera', 'hline', 'table'],
					tabIndex: 2
				},
				styles: {
					selections: _selections2.default,
					tabIndex: 1
				}
			}
		},

		/**
   * The Node ID or HTMl node, where AlloyEditor's UI should be rendered.
   *
   * @memberof Core
   * @instance
   * @property uiNode
   * @type String | Node
   * @writeOnce
   */
		uiNode: {
			setter: '_toElement',
			writeOnce: true
		}
	}
});

CKEDITOR.event.implementOn(Core);

exports.default = Core;

/***/ }),

/***/ "./src/adapter/main.js":
/*!*****************************!*\
  !*** ./src/adapter/main.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.registerBridgeButton = exports.regexBasePath = exports.loadLanguageResources = exports.implementEventTarget = exports.getUrl = exports.getButtons = exports.getBasePath = exports.editable = exports.Toolbars = exports.Selections = exports.SelectionTest = exports.SelectionSetPosition = exports.SelectionGetArrowBoxClasses = exports.OOP = exports.Lang = exports.Core = exports.Buttons = exports.Attribute = undefined;

var _core = __webpack_require__(/*! ./core.js */ "./src/adapter/core.js");

var _core2 = _interopRequireDefault(_core);

var _lang = __webpack_require__(/*! ../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _buttons = __webpack_require__(/*! ../components/buttons */ "./src/components/buttons/index.js");

var _buttons2 = _interopRequireDefault(_buttons);

var _toolbars = __webpack_require__(/*! ../components/toolbars */ "./src/components/toolbars/index.js");

var _toolbars2 = _interopRequireDefault(_toolbars);

var _selectionArrowbox = __webpack_require__(/*! ../selections/selection-arrowbox */ "./src/selections/selection-arrowbox.js");

var _selectionArrowbox2 = _interopRequireDefault(_selectionArrowbox);

var _selections = __webpack_require__(/*! ../selections/selections */ "./src/selections/selections.js");

var _selections2 = _interopRequireDefault(_selections);

var _selectionPosition = __webpack_require__(/*! ../selections/selection-position */ "./src/selections/selection-position.js");

var _selectionPosition2 = _interopRequireDefault(_selectionPosition);

var _selectionTest = __webpack_require__(/*! ../selections/selection-test */ "./src/selections/selection-test.js");

var _selectionTest2 = _interopRequireDefault(_selectionTest);

var _attribute = __webpack_require__(/*! ../oop/attribute */ "./src/oop/attribute.js");

var _attribute2 = _interopRequireDefault(_attribute);

var _oop = __webpack_require__(/*! ../oop/oop */ "./src/oop/oop.js");

var _oop2 = _interopRequireDefault(_oop);

__webpack_require__(/*! ../plugins */ "./src/plugins/index.js");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// An object containing all currently registered plugins in AlloyEditor.
var BRIDGE_BUTTONS = {};

/**
 * Creates an instance of AlloyEditor.
 *
 * @memberof AlloyEditor
 * @method editable
 * @static
 * @param {String|Node} node The Node ID or HTMl node, which AlloyEditor should use as an editable area.
 * @param {Object} config Configuration attributes for the current instance of AlloyEditor.
 * @return {Object} An instance of {{#crossLink "Core"}}{{/crossLink}}
 */
var editable = function editable(node, config) {
	config = config || {};
	config.srcNode = node;

	AlloyEditor.implementEventTarget();

	return new _core2.default(config);
};

/**
 * The full URL for the AlloyEditor installation directory.
 * It is possible to manually provide the base path by setting a
 * global variable named `ALLOYEDITOR_BASEPATH`. This global variable
 * must be set **before** the editor script loading.
 *
 * @memberof AlloyEditor
 * @method getBasePath
 * @static
 * @return {String} The found base path
 */
var getBasePath = function getBasePath() {
	// Find out the editor directory path, based on its <script> tag.
	var path = window.ALLOYEDITOR_BASEPATH || '';

	if (!path) {
		var scripts = document.getElementsByTagName('script');

		for (var i = 0; i < scripts.length; i++) {
			var match = scripts[i].src.match(AlloyEditor.regexBasePath);

			if (match) {
				path = match[1];
				break;
			}
		}
	}

	// In IE (only) the script.src string is the raw value entered in the
	// HTML source. Other browsers return the full resolved URL instead.
	if (path.indexOf(':/') === -1 && path.slice(0, 2) !== '//') {
		// Absolute path.
		if (path.indexOf('/') === 0) {
			path = location.href.match(/^.*?:\/\/[^/]*/)[0] + path;
		}
		// Relative path.
		else {
				path = location.href.match(/^[^?]*\/(?:)/)[0] + path;
			}
	}

	if (!path) {
		throw new Error('The AlloyEditor installation path could not be automatically detected. Please set the global variable "ALLOYEDITOR_BASEPATH" before creating editor instances.');
	}

	return path;
};

/**
 * Detects and load the corresponding language file if AlloyEditor language strings are not already present.
 * The function fires a {{#crossLink "AlloyEditor/languageResourcesLoaded:event"}}{{/crossLink}} event
 *
 * @memberof AlloyEditor
 * @method loadLanguageResources
 * @static
 * @param {Function} callback Optional callback to be called when AlloyEditor loads the language resource.
 */
var loadLanguageResources = function loadLanguageResources(callback) {
	AlloyEditor.implementEventTarget();

	if (_lang2.default.isFunction(callback)) {
		if (AlloyEditor.Strings) {
			setTimeout(callback, 0);
		} else {
			AlloyEditor.once('languageResourcesLoaded', function () {
				setTimeout(callback, 0);
			});
		}
	}

	if (!AlloyEditor._langResourceRequested) {
		AlloyEditor._langResourceRequested = true;

		var languages = ['af', 'ar', 'bg', 'bn', 'bs', 'ca', 'cs', 'cy', 'da', 'de', 'el', 'en-au', 'en-ca', 'en-gb', 'en', 'eo', 'es', 'et', 'eu', 'fa', 'fi', 'fo', 'fr-ca', 'fr', 'gl', 'gu', 'he', 'hi', 'hr', 'hu', 'id', 'is', 'it', 'ja', 'ka', 'km', 'ko', 'ku', 'lt', 'lv', 'mk', 'mn', 'ms', 'nb', 'nl', 'no', 'pl', 'pt-br', 'pt', 'ro', 'ru', 'si', 'sk', 'sl', 'sq', 'sr-latn', 'sr', 'sv', 'th', 'tr', 'tt', 'ug', 'uk', 'vi', 'zh-cn', 'zh'];

		var userLanguage = navigator.language || navigator.userLanguage || 'en';

		var parts = userLanguage.toLowerCase().match(/([a-z]+)(?:-([a-z]+))?/);
		var lang = parts[1];
		var locale = parts[2];

		if (languages.indexOf(lang + '-' + locale) >= 0) {
			lang = lang + '-' + locale;
		} else if (languages.indexOf(lang) === -1) {
			lang = 'en';
		}

		CKEDITOR.scriptLoader.load(AlloyEditor.getUrl('lang/alloy-editor/' + lang + '.js'), function (loaded) {
			if (loaded) {
				AlloyEditor.fire('languageResourcesLoaded');
			}
		},
		/* eslint-disable babel/no-invalid-this */
		this // Always `AlloyEditor`.
		/* eslint-enable babel/no-invalid-this */
		);
	}
};

/**
 * Gets the full URL for AlloyEditor resources. By default, URLs
 * returned by this function contain a querystring parameter ("t")
 * set to the {@link CKEDITOR#timestamp} value.
 *
 * @memberof AlloyEditor
 * @method getUrl
 * @static
 * @param {String} resource The resource whose full URL we want to get.
 * It may be a full, absolute, or relative URL.
 * @return {String} The full URL.
 */
var getUrl = function getUrl(resource) {
	var basePath = AlloyEditor.getBasePath();

	// If this is not a full or absolute path.
	if (resource.indexOf(':/') === -1 && resource.indexOf('/') !== 0) {
		resource = basePath + resource;
	}

	// Add the timestamp, except for directories.
	if (CKEDITOR.timestamp && resource.charAt(resource.length - 1) !== '/' && !/[&?]t=/.test(resource)) {
		resource += (resource.indexOf('?') >= 0 ? '&' : '?') + 't=' + CKEDITOR.timestamp;
	}

	return resource;
};

/**
 * Implements event firing and subscribing via CKEDITOR.event.
 *
 * @memberof AlloyEditor
 * @method implementEventTarget
 * @static
 */
var implementEventTarget = function implementEventTarget() {
	if (!AlloyEditor.fire && !AlloyEditor.on) {
		CKEDITOR.event.implementOn(AlloyEditor);
	}
};

/**
 * Regular expression which should match the script which have been used to load AlloyEditor.
 *
 * @memberof AlloyEditor
 * @property regexBasePath
 * @type {RegExp}
 * @static
 */
var regexBasePath = /(^|.*[\\/])(?:alloy-editor[^/]+|alloy-editor)\.js(?:\?.*|;.*)?$/i;

/**
 * Fired when AlloyEditor detects the browser language and loads the corresponding language file. Once this event
 * is fired, AlloyEditor.Strings will be populated with data.
 *
 * @event languageResourcesLoaded
 */

/**
 * Returns the required plugin names needed for a given plugin
 * if it is already registered or an empty array.
 *
 * @memberof AlloyEditor
 * @method getButtons
 * @param {Array} buttons An array of buttons or plugin names.
 * @return {Function} A function that can be invoked to resolve the requested button names.
 * @static
 */
var getButtons = function getButtons(buttons) {
	return function () {
		return buttons.reduce(function (acc, val) {
			val = BRIDGE_BUTTONS[val] || [val];
			return acc.concat(val);
		}, []);
	};
};

/**
 * Register a button and try to get its required plugins.
 *
 * @memberof AlloyEditor
 * @method registerBridgeButton
 * @param {String} buttonName The name of the button.
 * @param {String} pluginName The name of the plugin that registers the button.
 * @static
 */
var registerBridgeButton = function registerBridgeButton(buttonName, pluginName) {
	if (!BRIDGE_BUTTONS[pluginName]) {
		BRIDGE_BUTTONS[pluginName] = [];
	}

	BRIDGE_BUTTONS[pluginName].push(buttonName);
};

/**
 * @method OOP
 * @memberof AlloyEditor
 */
var OOP = {
	extend: _oop2.default
};

exports.Attribute = _attribute2.default;
exports.Buttons = _buttons2.default;
exports.Core = _core2.default;
exports.Lang = _lang2.default;
exports.OOP = OOP;
exports.SelectionGetArrowBoxClasses = _selectionArrowbox2.default;
exports.SelectionSetPosition = _selectionPosition2.default;
exports.SelectionTest = _selectionTest2.default;
exports.Selections = _selections2.default;
exports.Toolbars = _toolbars2.default;
exports.editable = editable;
exports.getBasePath = getBasePath;
exports.getButtons = getButtons;
exports.getUrl = getUrl;
exports.implementEventTarget = implementEventTarget;
exports.loadLanguageResources = loadLanguageResources;
exports.regexBasePath = regexBasePath;
exports.registerBridgeButton = registerBridgeButton;

/***/ }),

/***/ "./src/components/base/button-action-style.js":
/*!****************************************************!*\
  !*** ./src/components/base/button-action-style.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ButtonActionStyle is a mixin that provides applying style implementation for a
 * button based on the `applyStyle` and `removeStyle` API of CKEDITOR.
 *
 * To execute properly, the component has to expose the following methods which can be obtained
 * out of the box using the {{#crossLink "ButtonStyle"}}{{/crossLink}} mixin:
 * - `Function` {{#crossLink "ButtonStyle/isActive"}}{{/crossLink}} to check the active state
 * - `Function` {{#crossLink "ButtonStyle/getStyle"}}{{/crossLink}} to return the style that should be applied
 *
 * @class ButtonActionStyle
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class2, _WrappedComponent);

		function _class2() {
			var _ref;

			var _temp, _this, _ret;

			_classCallCheck(this, _class2);

			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class2.__proto__ || Object.getPrototypeOf(_class2)).call.apply(_ref, [this].concat(args))), _this), _this.applyStyle = function () {
				if (_lang2.default.isFunction(_this.isActive) && _lang2.default.isFunction(_this.getStyle)) {
					var editor = _this.props.editor.get('nativeEditor');

					editor.getSelection().lock();

					if (_this.isActive()) {
						editor.removeStyle(_this.getStyle());
					} else {
						editor.applyStyle(_this.getStyle());
					}

					editor.getSelection().unlock();

					editor.fire('actionPerformed', _this);
				}
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}
		/**
   * Removes or applies the component style to the current selection.
   *
   * @instance
   * @memberof ButtonActionStyle
   * @method applyStyle
   */


		return _class2;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/button-command-active.js":
/*!******************************************************!*\
  !*** ./src/components/base/button-command-active.js ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ButtonCommandActive is a mixin that provides an `isActive` method to determine if
 * a context-aware command is currently in an active state.
 *
 * @class ButtonCommandActive
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'isActive',

			/**
    * Checks if the command is active in the current selection.
    *
    * @instance
    * @memberof ButtonCommandActive
    * @method isActive
    * @return {Boolean} True if the command is active, false otherwise.
    */
			value: function isActive() {
				var editor = this.props.editor.get('nativeEditor');

				var command = editor.getCommand(this.props.command);

				return command ? command.state === CKEDITOR.TRISTATE_ON : false;
			}
		}]);

		return _class;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/button-command.js":
/*!***********************************************!*\
  !*** ./src/components/base/button-command.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ButtonCommand is a mixin that executes a command via CKEDITOR's API.
 *
 * @class ButtonCommand
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class2, _WrappedComponent);

		function _class2() {
			var _ref;

			var _temp, _this, _ret;

			_classCallCheck(this, _class2);

			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class2.__proto__ || Object.getPrototypeOf(_class2)).call.apply(_ref, [this].concat(args))), _this), _this.execCommand = function (data) {
				var editor = _this.props.editor.get('nativeEditor');

				editor.execCommand(_this.props.command, data);

				if (_this.props.modifiesSelection) {
					editor.selectionChange(true);
				}

				editor.fire('actionPerformed', _this);
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}
		/**
   * Executes a CKEditor command and fires `actionPerformed` event.
   *
   * @instance
   * @memberof ButtonCommand
   * @param {Object=} data Optional data to be passed to CKEDITOR's `execCommand` method.
   * @method execCommand
   */


		return _class2;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/button-keystroke.js":
/*!*************************************************!*\
  !*** ./src/components/base/button-keystroke.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ButtonKeystroke is a mixin that provides a `keystroke` prop that allows configuring
 * a function of the instance to be invoked upon the keystroke activation.
 *
 * @class ButtonKeystroke
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'componentWillMount',

			/**
    * Lifecycle. Invoked once, both on the client and server, immediately before the initial rendering occurs.
    *
    * @instance
    * @memberof ButtonKeystroke
    * @method componentWillMount
    */
			value: function componentWillMount() {
				if (_lang2.default.isFunction(_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillMount', this))) {
					_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillMount', this).call(this);
				}

				var nativeEditor = this.props.editor.get('nativeEditor');
				var keystroke = this.props.keystroke;

				var commandName = keystroke.name || (Math.random() * 1e9 >>> 0).toString();

				var command = nativeEditor.getCommand(commandName);

				if (!command) {
					command = new CKEDITOR.command(nativeEditor, {
						exec: function (editor) {
							var keystrokeFn = keystroke.fn;

							if (_lang2.default.isString(keystrokeFn)) {
								this[keystrokeFn].call(this, editor);
							} else if (_lang2.default.isFunction(keystrokeFn)) {
								keystrokeFn.call(this, editor);
							}
						}.bind(this)
					});

					nativeEditor.addCommand(commandName, command);
				}

				this._defaultKeystrokeCommand = nativeEditor.keystrokeHandler.keystrokes[keystroke.keys];

				nativeEditor.setKeystroke(keystroke.keys, commandName);
			}

			/**
    * Lifecycle. Invoked immediately before a component is unmounted from the DOM.
    *
    * @instance
    * @memberof ButtonKeystroke
    * @method componentWillUnmount
    */

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				if (_lang2.default.isFunction(_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillUnmount', this))) {
					_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillUnmount', this).call(this);
				}

				this.props.editor.get('nativeEditor').setKeystroke(this.props.keystroke.keys, this._defaultKeystrokeCommand);
			}
		}]);

		return _class;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/button-props.js":
/*!*********************************************!*\
  !*** ./src/components/base/button-props.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ButtonCfgProps is a mixin that provides a style prop and some methods to apply the resulting
 * style and checking if it is present in a given path or selection.
 *
 * @class ButtonCfgProps
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'mergeButtonCfgProps',

			/**
    * Merges the properties, passed to the current component with user's configuration
    * via `buttonCfg` property.
    *
    * @instance
    * @memberof ButtonCfgProps
    * @method mergeButtonCfgProps
    * @param {Object} props The properties to be merged with the provided configuration for this
    * button. If not passed, the user configuration will be merged with `this.props`
    * @return {Object} The merged properties
    */
			value: function mergeButtonCfgProps(props) {
				props = props || this.props;

				var nativeEditor = this.props.editor.get('nativeEditor');
				var buttonCfg = nativeEditor.config.buttonCfg || {};
				var result = CKEDITOR.tools.merge(props, buttonCfg['linkEdit']);

				return result;
			}
		}]);

		return _class;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/button-state-classes.js":
/*!*****************************************************!*\
  !*** ./src/components/base/button-state-classes.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lang = __webpack_require__(/*! ../../oop/lang */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ButtonStateClasses is a mixin that decorates the domElement of a component
 * with different CSS classes based on the current state of the element.
 *
 * To check for state, the component can expose the following methods:
 * - `Function` **isActive** to check the active state
 * - `Function` **isDisabled** to check the disabled state
 *
 * @class ButtonStateClasses
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'getStateClasses',

			/**
    * Returns the list of state classes associated to the current element's state, according
    * to the results of the isActive and isDisabled methods.
    *
    * @instance
    * @memberof ButtonStateClasses
    * @method getStateClasses
    * @return {String} A string with the state CSS classes.
    */
			value: function getStateClasses() {
				var stateClasses = '';

				// Check for active state
				if (_lang2.default.isFunction(this.isActive) && this.isActive()) {
					stateClasses += 'ae-button-pressed';
				}

				// Check for disabled state
				if (_lang2.default.isFunction(this.isDisabled) && this.isDisabled()) {
					stateClasses += ' ae-button-disabled';
				}

				return stateClasses;
			}
		}]);

		return _class;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/button-style.js":
/*!*********************************************!*\
  !*** ./src/components/base/button-style.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ButtonStyle is a mixin that provides a style prop and some methods to apply the resulting
 * style and checking if it is present in a given path or selection.
 *
 * @class ButtonStyle
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'componentWillMount',

			/**
    * Lifecycle. Invoked once, both on the client and server, immediately before the initial rendering occurs.
    *
    * @instance
    * @memberof ButtonStyle
    * @method componentWillMount
    */
			value: function componentWillMount() {
				if (_lang2.default.isFunction(_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillMount', this))) {
					_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillMount', this).call(this);
				}

				var style = this.props.style;

				if (_lang2.default.isString(style)) {
					var parts = style.split('.');
					var currentMember = this.props.editor.get('nativeEditor').config;
					var property = parts.shift();

					while (property && _lang2.default.isObject(currentMember) && _lang2.default.isObject(currentMember[property])) {
						currentMember = currentMember[property];
						property = parts.shift();
					}

					if (_lang2.default.isObject(currentMember)) {
						style = currentMember;
					}
				}

				this._style = new CKEDITOR.style(style);
			}

			/**
    * Lifecycle. Invoked immediately before a component is unmounted from the DOM.
    *
    * @instance
    * @memberof ButtonStyle
    * @method componentWillUnmount
    */

		}, {
			key: 'componentWillUnmount',
			value: function componentWillUnmount() {
				if (_lang2.default.isFunction(_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillUnmount', this))) {
					_get(_class.prototype.__proto__ || Object.getPrototypeOf(_class.prototype), 'componentWillUnmount', this).call(this);
				}

				this._style = null;
			}

			/**
    * Returns instance of CKEDITOR.style which represents the current button style.
    *
    * @instance
    * @memberof ButtonStyle
    * @method getStyle
    * @return {CKEDITOR.style} The current style representation.
    */

		}, {
			key: 'getStyle',
			value: function getStyle() {
				return this._style;
			}

			/**
    * Checks if style is active in the current selection.
    *
    * @instance
    * @memberof ButtonStyle
    * @method isActive
    * @return {Boolean} True if style is active, false otherwise.
    */

		}, {
			key: 'isActive',
			value: function isActive() {
				var result = void 0;

				var editor = this.props.editor.get('nativeEditor');

				var elementPath = editor.elementPath();

				result = this.getStyle().checkActive(elementPath, editor);

				return result;
			}
		}]);

		return _class;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/toolbar-buttons.js":
/*!************************************************!*\
  !*** ./src/components/base/toolbar-buttons.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * ToolbarButtons is a mixin which provides a list of buttons which have to be
 * displayed on the current toolbar depending on user preferences and given state.
 *
 * @class ToolbarButtons
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'getToolbarButtonGroups',

			/**
    * Analayses the current selection and returns the buttons or button groups to be rendered.
    *
    * @instance
    * @method getToolbarButtonGroups
    * @param {Array} buttons The buttons could be shown, prior to the state filtering.
    * @param {Object} additionalProps Additional props that should be passed down to the buttons.
    * @return {Array} An Array which contains the buttons or button groups that should be rendered.
    */
			value: function getToolbarButtonGroups(buttons, additionalProps) {
				var _this2 = this;

				if (_lang2.default.isFunction(buttons)) {
					buttons = buttons.call(this) || [];
				}

				return buttons.reduce(function (list, button) {
					if (Array.isArray(button)) {
						list.push(_this2.getToolbarButtons(button, additionalProps));
						return list;
					} else {
						return _this2.getToolbarButtons(buttons, additionalProps);
					}
				}, []);
			}

			/**
    * Analyzes the current selection and the buttons exclusive mode value to figure out which
    * buttons should be present in a given state.
    *
    * @instance
    * @memberof ToolbarButtons
    * @method getToolbarButtons
    * @param {Array} buttons The buttons could be shown, prior to the state filtering.
    * @param {Object} additionalProps Additional props that should be passed down to the buttons.
    * @return {Array} An Array which contains the buttons that should be rendered.
    */

		}, {
			key: 'getToolbarButtons',
			value: function getToolbarButtons(buttons, additionalProps) {
				var buttonProps = {};

				var nativeEditor = this.props.editor.get('nativeEditor');
				var buttonCfg = nativeEditor.config.buttonCfg || {};

				if (_lang2.default.isFunction(buttons)) {
					buttons = buttons.call(this) || [];
				}

				var toolbarButtons = this.filterExclusive(buttons.filter(function (button) {
					return button && (AlloyEditor.Buttons[button] || AlloyEditor.Buttons[button.name]);
				}).map(function (button) {
					if (_lang2.default.isString(button)) {
						buttonProps[button] = buttonCfg[button];
						button = AlloyEditor.Buttons[button];
					} else if (_lang2.default.isString(button.name)) {
						buttonProps[AlloyEditor.Buttons[button.name].key] = CKEDITOR.tools.merge(buttonCfg[button], button.cfg);
						button = AlloyEditor.Buttons[button.name];
					}

					return button;
				})).map(function (button, index) {
					var props = this.mergeExclusiveProps({
						editor: this.props.editor,
						key: button.key !== 'separator' ? button.key : button.key + '-' + index,
						tabKey: button.key,
						tabIndex: this.props.trigger && this.props.trigger.props.tabKey === button.key ? 0 : -1,
						trigger: this.props.trigger
					}, button.key);

					props = this.mergeDropdownProps(props, button.key);

					if (additionalProps) {
						props = CKEDITOR.tools.merge(props, additionalProps);
					}

					props = CKEDITOR.tools.merge(props, buttonProps[button.key]);

					return _react2.default.createElement(button, props);
				}, this);

				return toolbarButtons;
			}
		}]);

		return _class;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/widget-arrow-box.js":
/*!*************************************************!*\
  !*** ./src/components/base/widget-arrow-box.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides functionality for displaying Widget Arrow box on top or on bottom of the widget
 * depending on the point of user interaction with the editor.
 *
 * @class WidgetArrowBox
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'getArrowBoxClasses',

			/**
    * Returns the list of arrow box classes associated to the current element's state. It relies
    * on the getInteractionPoint method to calculate the selection direction.
    *
    * @instance
    * @memberof WidgetArrowBox
    * @method getArrowBoxClasses
    * @return {String} A string with the arrow box CSS classes.
    */
			value: function getArrowBoxClasses() {
				var arrowBoxClasses = 'ae-arrow-box';

				if (_lang2.default.isFunction(this.getInteractionPoint) && this.getInteractionPoint()) {
					if (this.getInteractionPoint().direction === CKEDITOR.SELECTION_TOP_TO_BOTTOM) {
						arrowBoxClasses += ' ae-arrow-box-top';
					} else {
						arrowBoxClasses += ' ae-arrow-box-bottom';
					}
				}

				return arrowBoxClasses;
			}
		}]);

		return _class;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/widget-dropdown.js":
/*!************************************************!*\
  !*** ./src/components/base/widget-dropdown.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides functionality for managing different dropdowns inside a widget.
 *
 * @class WidgetDropdown
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class2, _WrappedComponent);

		function _class2(props) {
			_classCallCheck(this, _class2);

			var _this = _possibleConstructorReturn(this, (_class2.__proto__ || Object.getPrototypeOf(_class2)).call(this, props));

			_this.mergeDropdownProps = function (obj, itemKey) {
				return CKEDITOR.tools.merge(obj, {
					expanded: _this.state.itemDropdown === itemKey ? true : false,
					tabIndex: _this.state.dropdownTrigger === itemKey ? 0 : -1,
					toggleDropdown: _this.toggleDropdown.bind(_this, itemKey)
				});
			};

			_this.toggleDropdown = function (itemDropdown, toggleDirection) {
				_this.setState({
					dropdownTrigger: itemDropdown,
					itemDropdown: itemDropdown !== _this.state.itemDropdown ? itemDropdown : null
				}, function () {
					if (!_this.state.itemDropdown) {
						if (_this.moveFocus) {
							_this.moveFocus(toggleDirection);
						} else {
							_reactDom2.default.findDOMNode(_this).focus();
						}
					}
				});
			};

			_this.state = _extends({}, _this.state, {
				dropdownTrigger: null,
				itemDropdown: null
			});
			return _this;
		}

		/**
   * Lifecycle. Invoked when a component is receiving new props.
   * This method is not called for the initial render.
   *
   * @instance
   * @memberof WidgetDropdown
   * @method componentWillReceiveProps
   */


		_createClass(_class2, [{
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (_lang2.default.isFunction(_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentWillReceiveProps', this))) {
					_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentWillReceiveProps', this).call(this, nextProps);
				}

				this.setState({
					dropdownTrigger: null,
					itemDropdown: null
				});
			}

			/**
    * Merges the provided object with two more properties:
    * - expanded - boolean flag which indicates if an widget should be rendered exclusively.
    * - toggleDropdown - function, which can be used by an widget in order to obtain exclusive state.
    *
    * @instance
    * @memberof WidgetDropdown
    * @method mergeDropdownProps
    * @param {Object} obj The properties container which should be merged with the properties, related
    *    to dropdown state.
    * @param {Object} itemKey They key of an React Widget which contains the dropdown.
    * @return {Object} The merged object.
    */


			/**
    * Sets the active dropdown of the widget or discards the toggled item from the state.
    *
    * @instance
    * @memberof WidgetDropdown
    * @method toggleDropdown
    * @param {Object} itemDropdown The widget which requests to toggle its dropdown.
    * @param {Number} toggleDirection User movement direction when toggled via keyboard.
    */

		}]);

		return _class2;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/widget-exclusive.js":
/*!*************************************************!*\
  !*** ./src/components/base/widget-exclusive.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Provides functionality for managing exclusive state of an widget.
 * The exclusive state means that a button may request to be the only rendered
 * widget in its parent container. WidgetExclusive will manage this state by
 * filtering and suppressing the other sibling widgets from displaying.
 *
 * @class WidgetExclusive
 */
exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class2, _WrappedComponent);

		function _class2() {
			var _ref;

			var _temp, _this, _ret;

			_classCallCheck(this, _class2);

			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class2.__proto__ || Object.getPrototypeOf(_class2)).call.apply(_ref, [this].concat(args))), _this), _this.requestExclusive = function (itemExclusive) {
				_this.setState({
					itemExclusive: itemExclusive
				});
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}

		_createClass(_class2, [{
			key: 'cancelExclusive',

			/**
    * Cancels the exclusive state of an widget.
    *
    * @instance
    * @memberof WidgetExclusive
    * @method cancelExclusive
    * @param {Object} itemExclusive The widget which exclusive state should be canceled.
    */
			value: function cancelExclusive(itemExclusive) {
				if (this.state.itemExclusive === itemExclusive) {
					this.setState({
						itemExclusive: null
					});
				}
			}

			/**
    * Lifecycle. Invoked when a component is receiving new props.
    * This method is not called for the initial render.
    * Calling this.setState() within this function will not trigger an additional render.
    *
    * @instance
    * @memberof WidgetExclusive
    * @method componentWillReceiveProps
    * @param {Object} nextProps Object containing the current set of properties.
    */

		}, {
			key: 'componentWillReceiveProps',
			value: function componentWillReceiveProps(nextProps) {
				if (_lang2.default.isFunction(_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentWillReceiveProps', this))) {
					_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentWillReceiveProps', this).call(this, nextProps);
				}

				// Receiving properties means that the component is being re-rendered.
				// Re-rendering is triggered by editorInteraction, so we have to
				// reset the exclusive state and render the UI according to the new selection.
				this.setState({
					itemExclusive: null
				});
			}

			/**
    * Filters the items and returns only those with exclusive state.
    *
    * @instance
    * @memberof WidgetExclusive
    * @method filterExclusive
    * @param {Array} items The widgets to be filtered.
    * @return {Array|Object} The item with executive state.
    */

		}, {
			key: 'filterExclusive',
			value: function filterExclusive(items) {
				return items.filter(function (item) {
					if (this.state.itemExclusive) {
						if (this.state.itemExclusive === item.key) {
							return item;
						}
					} else {
						return item;
					}
				}.bind(this));
			}

			/**
    * Merges the provided object with three more properties:
    * - cancelExclusive - function, which can be used by a widget in order to cancel executive state.
    * - renderExclusive - boolean flag which indicates if an widget should be rendered exclusively.
    * - requestExclusive - function, which can be used by a widget in order to obtain exclusive state.
    *
    * @instance
    * @memberof WidgetExclusive
    * @method mergeExclusiveProps
    * @param {Object} obj The properties container which should be merged with the properties, related
    *    to exclusive state.
    * @param {Object} itemKey They key of an React Widget which should be rendered exclusively.
    * @return {Object} The merged object.
    */

		}, {
			key: 'mergeExclusiveProps',
			value: function mergeExclusiveProps(obj, itemKey) {
				return CKEDITOR.tools.merge(obj, {
					cancelExclusive: this.cancelExclusive.bind(this, itemKey),
					renderExclusive: this.state.itemExclusive === itemKey,
					requestExclusive: this.requestExclusive.bind(this, itemKey)
				});
			}

			/**
    * Requests and sets exclusive state of an widget.
    *
    * @instance
    * @memberof WidgetExclusive
    * @method requestExclusive
    * @param {Object} itemExclusive The widget which requests exclusive state.
    */

		}]);

		return _class2;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/widget-focus-manager.js":
/*!*****************************************************!*\
  !*** ./src/components/base/widget-focus-manager.js ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var DIRECTION_NONE = 0;
var DIRECTION_NEXT = 1;
var DIRECTION_PREV = -1;

var ACTION_NONE = 0;
var ACTION_MOVE_FOCUS = 1;
var ACTION_DISMISS_FOCUS = 2;

/**
 * WidgetFocusManager is a mixin that provides keyboard navigation inside a widget. To do this,
 * it exposes the following props and methods:
 *
 * @class WidgetFocusManager
 */

exports.default = function (WrappedComponent) {
	return function (_WrappedComponent) {
		_inherits(_class2, _WrappedComponent);

		function _class2() {
			var _ref;

			var _temp, _this, _ret;

			_classCallCheck(this, _class2);

			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = _class2.__proto__ || Object.getPrototypeOf(_class2)).call.apply(_ref, [this].concat(args))), _this), _this.focus = function (event) {
				if (!event || _this._isValidTarget(event.target)) {
					if (_this._descendants && _this._descendants.length) {
						var activeDescendantEl = _this._descendants[_this._activeDescendant];
						// When user clicks with the mouse, the activeElement is already set and there
						// is no need to focus it. Focusing of the active descendant (usually some button) is required
						// in case of keyboard navigation, because the focused element might be not the first button,
						// but the div element, which contains the button.
						if (document.activeElement !== activeDescendantEl && !_this.props.focusFirstChild) {
							if (_this._descendants.indexOf(document.activeElement) === -1) {
								activeDescendantEl.focus();
							}
						}

						if (event) {
							event.stopPropagation();
							event.preventDefault();
						}
					}
				}
			}, _this.handleKey = function (event) {
				if (_this._isValidTarget(event.target) && _this._descendants) {
					var action = _this._getFocusAction(event);

					if (action.type) {
						event.stopPropagation();
						event.preventDefault();

						if (action.type === ACTION_MOVE_FOCUS) {
							_this._moveFocus(action.direction);
						}

						if (action.type === ACTION_DISMISS_FOCUS) {
							_this.props.onDismiss(action.direction);
						}
					}
				}
			}, _temp), _possibleConstructorReturn(_this, _ret);
		}

		_createClass(_class2, [{
			key: 'componentDidMount',

			/**
    * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method componentDidMount
    */
			value: function componentDidMount() {
				if (_lang2.default.isFunction(_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentDidMount', this))) {
					_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentDidMount', this).call(this);
				}

				this._refresh();
			}

			/**
    * Lifecycle. Invoked immediately after the component's updates are flushed to the DOM.
    * Refreshes the descendants list.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method componentDidUpdate
    */

		}, {
			key: 'componentDidUpdate',
			value: function componentDidUpdate() {
				if (_lang2.default.isFunction(_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentDidUpdate', this))) {
					_get(_class2.prototype.__proto__ || Object.getPrototypeOf(_class2.prototype), 'componentDidUpdate', this).call(this);
				}

				this._refresh();
			}

			/**
    * Focuses the current active descendant.
    *
    * Several Widgets can be nested in a component hierarchy by attaching this focus method to
    * the widget DOM node, transferring the DOM focus control to the inner FocusManager.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method focus
    */


			/**
    * Handles the key events on a DOM node to execute the appropriate navigation when needed.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @param {Object} event The Keyboard event that was detected on the widget DOM node.
    * @method handleKey
    */

		}, {
			key: 'moveFocus',


			/**
    * Moves the focus among descendants in the especified direction.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method moveFocus
    * @param {number} direction The direction (1 or -1) of the focus movement among descendants.
    */
			value: function moveFocus(direction) {
				direction = _lang2.default.isNumber(direction) ? direction : 0;

				this._moveFocus(direction);
			}

			/**
    * Returns the action, if any, that a keyboard event in the current focus manager state
    * should produce.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method _getFocusAction
    * @param {object} event The Keyboard event.
    * @protected
    * @return {Object} An action object with type and direction properties.
    */

		}, {
			key: '_getFocusAction',
			value: function _getFocusAction(event) {
				var action = {
					type: ACTION_NONE
				};

				if (this.props.keys) {
					var direction = this._getFocusMoveDirection(event);

					if (direction) {
						action.direction = direction;
						action.type = ACTION_MOVE_FOCUS;
					}

					var dismissAction = this._getFocusDismissAction(event, direction);

					if (dismissAction.dismiss) {
						action.direction = dismissAction.direction;
						action.type = ACTION_DISMISS_FOCUS;
					}
				}

				return action;
			}

			/**
    * Returns the dismiss action, if any, the focus manager should execute to yield the focus. This
    * will happen in any of these scenarios if a dismiss callback has been specified:
    * - A dismiss key has been pressed
    * - In a non-circular focus manager, when:
    *     - The active descendant is the first one and a prev key has been pressed.
    *     - The active descendant is the last one and a next key has been pressed.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method _getFocusDismissAction
    * @param {Number} focusMoveDirection The focus movement direction (if any).
    * @param {Object} event The Keyboard event.
    * @protected
    * @return {Object} A dismiss action with dismiss and direction properties.
    */

		}, {
			key: '_getFocusDismissAction',
			value: function _getFocusDismissAction(event, focusMoveDirection) {
				var dismissAction = {
					direction: focusMoveDirection,
					dismiss: false
				};

				if (this.props.onDismiss) {
					if (this._isValidKey(event.keyCode, this.props.keys.dismiss)) {
						dismissAction.dismiss = true;
					}
					if (this._isValidKey(event.keyCode, this.props.keys.dismissNext)) {
						dismissAction.dismiss = true;
						dismissAction.direction = DIRECTION_NEXT;
					}
					if (this._isValidKey(event.keyCode, this.props.keys.dismissPrev)) {
						dismissAction.dismiss = true;
						dismissAction.direction = DIRECTION_PREV;
					}

					if (!dismissAction.dismiss && !this.props.circular && focusMoveDirection) {
						dismissAction.dismiss = focusMoveDirection === DIRECTION_PREV && this._activeDescendant === 0 || focusMoveDirection === DIRECTION_NEXT && this._activeDescendant === this._descendants.length - 1;
					}
				}

				return dismissAction;
			}

			/**
    * Returns the direction, if any, in which the focus should be moved. In presence of the
    * shift key modifier, the direction of the movement is inverted.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method _getFocusMoveDirection
    * @param {Object} event The Keyboard event.
    * @protected
    * @return {Number} The computed direction of the expected focus movement.
    */

		}, {
			key: '_getFocusMoveDirection',
			value: function _getFocusMoveDirection(event) {
				var direction = DIRECTION_NONE;

				if (this._isValidKey(event.keyCode, this.props.keys.next)) {
					direction = DIRECTION_NEXT;
				}
				if (this._isValidKey(event.keyCode, this.props.keys.prev)) {
					direction = DIRECTION_PREV;
				}

				if (event.shifKey) {
					direction *= -1;
				}

				return direction;
			}

			/**
    * Indicates if a given keyCode is valid for the given set of keys.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method _isValidKey
    * @param {Array|Number} keys A key set. Can be a number an array of numbers representing the allowed keyCodes.
    * @param {Number} keyCode An event keyCode.
    * @protected
    * @return {Boolean} A boolean value indicating if the key is valid.
    */

		}, {
			key: '_isValidKey',
			value: function _isValidKey(keyCode, keys) {
				return _lang2.default.isArray(keys) ? keys.indexOf(keyCode) !== -1 : keyCode === keys;
			}

			/**
    * Indicates if a given element is valid for focus management. User input elements such as
    * input, select or textarea are excluded.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method _isValidKey
    * @param {DOMNode} element A DOM element.
    * @protected
    * @return {Boolean} A boolean value indicating if the element is valid.
    */

		}, {
			key: '_isValidTarget',
			value: function _isValidTarget(element) {
				var tagName = element.tagName.toLowerCase();

				return tagName !== 'input' && tagName !== 'select' && tagName !== 'textarea';
			}

			/**
    * Moves the focus among descendants in the especified direction.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method _moveFocus
    * @param {number} direction The direction (1 or -1) of the focus movement among descendants.
    * @protected
    */

		}, {
			key: '_moveFocus',
			value: function _moveFocus(direction) {
				var numDescendants = this._descendants.length;

				var descendant = this._descendants[this._activeDescendant];

				descendant.setAttribute('tabIndex', -1);

				this._activeDescendant += direction;

				if (this.props.circular) {
					// Calculate proper modulo result since remainder operator doesn't behave in the
					// same way for negative numbers
					this._activeDescendant = (this._activeDescendant % numDescendants + numDescendants) % numDescendants;
				} else {
					this._activeDescendant = Math.max(Math.min(this._activeDescendant, numDescendants - 1), 0);
				}

				descendant = this._descendants[this._activeDescendant];

				descendant.setAttribute('tabIndex', 0);
				descendant.focus();
			}

			/**
    * Refreshes the descendants list by executing the CSS selector again and resets the descendants tabIndex.
    *
    * @instance
    * @memberof WidgetFocusManager
    * @method _refresh
    * @protected
    */

		}, {
			key: '_refresh',
			value: function _refresh() {
				var domNode = _reactDom2.default.findDOMNode(this);

				if (domNode) {
					var descendants = domNode.querySelectorAll(this.props.descendants);

					var priorityDescendants = [];

					this._descendants = [];

					Array.prototype.slice.call(descendants).forEach(function (item) {
						var dataTabIndex = item.getAttribute('data-tabindex');

						if (dataTabIndex) {
							priorityDescendants.push(item);
						} else {
							this._descendants.push(item);
						}
					}.bind(this));

					priorityDescendants = priorityDescendants.sort(function (a, b) {
						return _lang2.default.toInt(a.getAttribute('data-tabindex')) > _lang2.default.toInt(b.getAttribute('data-tabindex'));
					});

					this._descendants = priorityDescendants.concat(this._descendants);

					this._activeDescendant = 0;

					this._descendants.some(function (item, index) {
						if (item.getAttribute('tabindex') === '0') {
							this._activeDescendant = index;
							this.focus();

							return true;
						}
					}.bind(this));
				}
			}
		}]);

		return _class2;
	}(WrappedComponent);
};

/***/ }),

/***/ "./src/components/base/widget-position.js":
/*!************************************************!*\
  !*** ./src/components/base/widget-position.js ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * Calculates the position where an Widget should be displayed based on the point
 * where user interacted with the editor.
 *
 * @class WidgetPosition
 */
exports.default = function (WrappedComponent) {
	var _class, _temp;

	return _temp = _class = function (_WrappedComponent) {
		_inherits(_class, _WrappedComponent);

		function _class() {
			_classCallCheck(this, _class);

			return _possibleConstructorReturn(this, (_class.__proto__ || Object.getPrototypeOf(_class)).apply(this, arguments));
		}

		_createClass(_class, [{
			key: 'cancelAnimation',


			/**
    * Cancels an scheduled animation frame.
    *
    * @instance
    * @memberof WidgetPosition
    * @method cancelAnimation
    */
			value: function cancelAnimation() {
				if (window.cancelAnimationFrame) {
					window.cancelAnimationFrame(this._animationFrameId);
				}
			}

			/**
    * Returns an object which contains the position of the element in page coordinates,
    * restricted to fit to given viewport.
    *
    * @instance
    * @memberof WidgetPosition
    * @method getConstrainedPosition
    * @param {Object} attrs The following properties, provided as numbers:
    * - height
    * - left
    * - top
    * - width
    * @param {Object} viewPaneSize Optional. If not provided, the current viewport will be used. Should contain at least these properties:
    * - width
    * @return {Object} An object with `x` and `y` properties, which represent the constrained position of the
    * element.
    */

			/**
    * Lifecycle. Returns the default values of the properties used in the widget.
    *
    * @instance
    * @memberof WidgetPosition
    * @method getDefaultProps
    */

		}, {
			key: 'getConstrainedPosition',
			value: function getConstrainedPosition(attrs, viewPaneSize) {
				viewPaneSize = viewPaneSize || new CKEDITOR.dom.window(window).getViewPaneSize();

				var x = attrs.left;
				var y = attrs.top;

				if (attrs.left + attrs.width > viewPaneSize.width) {
					x -= attrs.left + attrs.width - viewPaneSize.width;
				}

				if (y < 0) {
					y = 0;
				}

				return {
					x: x,
					y: y
				};
			}

			/**
    * Returns the position, in page coordinates, according to which a widget should appear.
    * Depending on the direction of the selection, the wdiget may appear above of or on bottom of the selection.
    *
    * It depends on the props editorEvent to analyze the following user-interaction parameters:
    * - {Object} selectionData The data about the selection in the editor as returned from
    * {{#crossLink "CKEDITOR.plugins.ae_selectionregion/getSelectionData:method"}}{{/crossLink}}
    * - {Number} pos Contains the coordinates of the position, considered as most appropriate.
    * This may be the point where the user released the mouse, or just the beginning or the end of
    * the selection.
    *
    * @instance
    * @memberof WidgetInteractionPoint
    * @method getInteractionPoint
    * @return {Object} An Object which contains the following properties:
    * direction, x, y, where x and y are in page coordinates and direction can be one of these:
    * CKEDITOR.SELECTION_BOTTOM_TO_TOP or CKEDITOR.SELECTION_TOP_TO_BOTTOM
    */

		}, {
			key: 'getInteractionPoint',
			value: function getInteractionPoint() {
				var eventPayload = this.props.editorEvent ? this.props.editorEvent.data : null;

				if (!eventPayload) {
					return;
				}

				var selectionData = eventPayload.selectionData;

				var nativeEvent = eventPayload.nativeEvent;

				var pos = {
					x: eventPayload.nativeEvent.pageX,
					y: selectionData.region.top
				};

				var direction = selectionData.region.direction;

				var endRect = selectionData.region.endRect;

				var startRect = selectionData.region.startRect;

				if (endRect && startRect && startRect.top === endRect.top) {
					direction = CKEDITOR.SELECTION_BOTTOM_TO_TOP;
				}

				var x = void 0;
				var y = void 0;

				// If we have the point where user released the mouse, show Toolbar at this point
				// otherwise show it on the middle of the selection.

				if (pos.x && pos.y) {
					x = this._getXPoint(selectionData, pos.x);

					if (direction === CKEDITOR.SELECTION_BOTTOM_TO_TOP) {
						y = Math.min(pos.y, selectionData.region.top);
					} else {
						y = Math.max(pos.y, this._getYPoint(selectionData, nativeEvent));
					}
				} else {
					x = selectionData.region.left + selectionData.region.width / 2;

					if (direction === CKEDITOR.SELECTION_TOP_TO_BOTTOM) {
						y = this._getYPoint(selectionData, nativeEvent);
					} else {
						y = selectionData.region.top;
					}
				}

				return {
					direction: direction,
					x: x,
					y: y
				};
			}

			/**
    * Returns the position of the Widget.
    *
    * @instance
    * @memberof WidgetInteractionPoint
    * @method _getXPoint
    * @param {Object} eventX The X coordinate received from the native event (mouseup).
    * @param {Object} selectionData The data about the selection in the editor as returned from {{#crossLink "CKEDITOR.plugins.ae_selectionregion/getSelectionData:method"}}{{/crossLink}}
    * @protected
    * @return {Number} The calculated X point in page coordinates.
    */

		}, {
			key: '_getXPoint',
			value: function _getXPoint(selectionData, eventX) {
				var region = selectionData.region;

				var left = region.startRect ? region.startRect.left : region.left;
				var right = region.endRect ? region.endRect.right : region.right;

				var x = void 0;

				if (left < eventX && right > eventX) {
					x = eventX;
				} else {
					var leftDist = Math.abs(left - eventX);
					var rightDist = Math.abs(right - eventX);

					if (leftDist < rightDist) {
						// user raised the mouse on left on the selection
						x = left;
					} else {
						x = right;
					}
				}

				return x;
			}

			/**
    * Returns the position of the Widget.
    *
    * @instance
    * @memberof WidgetInteractionPoint
    * @method _getYPoint
    * @param {Object} nativeEvent The data about event is fired
    * @param {Object} selectionData The data about the selection in the editor as returned from {{#crossLink "CKEDITOR.plugins.ae_selectionregion/getSelectionData:method"}}{{/crossLink}}
    * @protected
    * @return {Number} The calculated Y point in page coordinates.
    */

		}, {
			key: '_getYPoint',
			value: function _getYPoint(selectionData, nativeEvent) {
				var y = 0;

				if (selectionData && nativeEvent) {
					var elementTarget = new CKEDITOR.dom.element(nativeEvent.target);

					if (elementTarget.$ && elementTarget.getStyle('overflow') === 'auto') {
						y = nativeEvent.target.offsetTop + nativeEvent.target.offsetHeight;
					} else {
						y = selectionData.region.bottom;
					}
				}

				return y;
			}

			/**
    * Returns the position of the Widget taking in consideration the
    * {{#crossLink "WidgetPosition/gutter:attribute"}}{{/crossLink}} attribute.
    *
    * @instance
    * @memberof WidgetPosition
    * @protected
    * @method  getWidgetXYPoint
    * @param {Number} left The left offset in page coordinates where Toolbar should be shown.
    * @param {Number} top The top offset in page coordinates where Toolbar should be shown.
    * @param {Number} direction The direction of the selection. May be one of the following:
    * CKEDITOR.SELECTION_BOTTOM_TO_TOP or CKEDITOR.SELECTION_TOP_TO_BOTTOM
    * @return {Array} An Array with left and top offsets in page coordinates.
    */

		}, {
			key: 'getWidgetXYPoint',
			value: function getWidgetXYPoint(left, top, direction) {
				var domNode = _reactDom2.default.findDOMNode(this);

				var gutter = this.props.gutter;

				if (direction === CKEDITOR.SELECTION_TOP_TO_BOTTOM || direction === CKEDITOR.SELECTION_BOTTOM_TO_TOP) {
					left = left - gutter.left - domNode.offsetWidth / 2;

					top = direction === CKEDITOR.SELECTION_TOP_TO_BOTTOM ? top + gutter.top : top - domNode.offsetHeight - gutter.top;
				} else if (direction === CKEDITOR.SELECTION_LEFT_TO_RIGHT || direction === CKEDITOR.SELECTION_RIGHT_TO_LEFT) {
					left = direction === CKEDITOR.SELECTION_LEFT_TO_RIGHT ? left + gutter.left + domNode.offsetHeight / 2 : left - 3 * domNode.offsetHeight / 2 - gutter.left;

					top = top - gutter.top - domNode.offsetHeight / 2;
				}

				if (left < 0) {
					left = 0;
				}

				if (top < 0) {
					top = 0;
				}

				return [left, top];
			}

			/**
    * Returns true if the widget is visible, false otherwise
    *
    * @instance
    * @memberof WidgetPosition
    * @method isVisible
    * @return {Boolean} True if the widget is visible, false otherwise
    */

		}, {
			key: 'isVisible',
			value: function isVisible() {
				var domNode = _reactDom2.default.findDOMNode(this);

				if (domNode) {
					var domElement = new CKEDITOR.dom.element(domNode);

					return domElement.hasClass('alloy-editor-visible');
				}

				return false;
			}

			/**
    * Moves a widget from a starting point to a destination point.
    *
    * @instance
    * @memberof WidgetPosition
    * @method moveToPoint
    * @param  {Object} startPoint The starting point for the movement.
    * @param  {Object} endPoint The destination point for the movement.
    */

		}, {
			key: 'moveToPoint',
			value: function moveToPoint(startPoint, endPoint) {
				var domElement = new CKEDITOR.dom.element(_reactDom2.default.findDOMNode(this));

				domElement.setStyles({
					left: startPoint[0] + 'px',
					top: startPoint[1] + 'px',
					opacity: 0
				});

				domElement.removeClass('alloy-editor-invisible');

				this._animate(function () {
					domElement.addClass('ae-toolbar-transition');
					domElement.addClass('alloy-editor-visible');
					domElement.setStyles({
						left: endPoint[0] + 'px',
						top: endPoint[1] + 'px',
						opacity: 1
					});
				});
			}

			/**
    * Shows the widget with the default animation transition.
    *
    * @instance
    * @memberof WidgetPosition
    * @method show
    */

		}, {
			key: 'show',
			value: function show() {
				var domNode = _reactDom2.default.findDOMNode(this);
				var uiNode = this.props.editor.get('uiNode');

				var scrollTop = uiNode ? uiNode.scrollTop : 0;

				if (!this.isVisible() && domNode) {
					var interactionPoint = this.getInteractionPoint();

					if (interactionPoint) {
						var domElement = new CKEDITOR.dom.element(domNode);

						var finalX = void 0;
						var finalY = void 0;
						var initialX = void 0;
						var initialY = void 0;

						finalX = initialX = parseFloat(domElement.getStyle('left'));
						finalY = initialY = parseFloat(domElement.getStyle('top'));

						if (this.props.constrainToViewport) {
							var res = this.getConstrainedPosition({
								height: parseFloat(domNode.offsetHeight),
								left: finalX,
								top: finalY,
								width: parseFloat(domNode.offsetWidth)
							});

							finalX = res.x;
							finalY = res.y;
						}

						if (interactionPoint.direction === CKEDITOR.SELECTION_TOP_TO_BOTTOM) {
							initialY = this.props.selectionData.region.bottom + scrollTop;
						} else {
							initialY = this.props.selectionData.region.top + scrollTop;
						}

						this.moveToPoint([initialX, initialY], [finalX, finalY]);
					}
				}
			}

			/**
    * Updates the widget position based on the current interaction point.
    *
    * @instance
    * @memberof WidgetPosition
    * @method updatePosition
    */

		}, {
			key: 'updatePosition',
			value: function updatePosition() {
				var interactionPoint = this.getInteractionPoint();

				var domNode = _reactDom2.default.findDOMNode(this);

				if (interactionPoint && domNode) {
					var uiNode = this.props.editor.get('uiNode') || document.body;
					var uiNodeStyle = getComputedStyle(uiNode);
					var uiNodeMarginLeft = parseInt(uiNodeStyle.getPropertyValue('margin-left'), 10);
					var uiNodeMarginRight = parseInt(uiNodeStyle.getPropertyValue('margin-right'), 10);
					var totalWidth = uiNodeMarginLeft + uiNode.clientWidth + uiNodeMarginRight;

					var scrollTop = uiNode.tagName !== 'BODY' ? uiNode.scrollTop : 0;

					var xy = this.getWidgetXYPoint(interactionPoint.x, interactionPoint.y, interactionPoint.direction);
					xy[1] += scrollTop;

					if (xy[0] < 0) {
						xy[0] = 0;
					}
					if (xy[0] > totalWidth - domNode.offsetWidth) {
						xy[0] = totalWidth - domNode.offsetWidth;
					}

					new CKEDITOR.dom.element(domNode).setStyles({
						left: xy[0] + 'px',
						top: xy[1] + 'px'
					});
				}
			}

			/**
    * Requests an animation frame, if possible, to simulate an animation.
    *
    * @instance
    * @memberof WidgetPosition
    * @method _animate
    * @param {Function} callback The function to be executed on the scheduled frame.
    * @protected
    */

		}, {
			key: '_animate',
			value: function _animate(callback) {
				if (window.requestAnimationFrame) {
					this._animationFrameId = window.requestAnimationFrame(callback);
				} else {
					callback();
				}
			}
		}]);

		return _class;
	}(WrappedComponent), _class.defaultProps = _extends({}, WrappedComponent.defaultProps, {
		gutter: {
			left: 0,
			top: 10
		},
		constrainToViewport: true
	}), _temp;
};

/***/ }),

/***/ "./src/components/buttons/button-accessibility-image-alt.jsx":
/*!*******************************************************************!*\
  !*** ./src/components/buttons/button-accessibility-image-alt.jsx ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonAccessibilityImageAlt class provides functionality for changing text color in a document.
 *
 * @class ButtonAccessibilityImageAlt
 * @uses ButtonProps
 * @uses ButtonStateClasses
 *
 */
var ButtonAccessibilityImageAlt = function (_React$Component) {
	_inherits(ButtonAccessibilityImageAlt, _React$Component);

	function ButtonAccessibilityImageAlt(prop, context) {
		_classCallCheck(this, ButtonAccessibilityImageAlt);

		var _this = _possibleConstructorReturn(this, (ButtonAccessibilityImageAlt.__proto__ || Object.getPrototypeOf(ButtonAccessibilityImageAlt)).call(this, prop, context));

		_initialiseProps.call(_this);

		var element = _this.props.editor.get('nativeEditor').getSelection().getSelectedElement();

		var imageAlt = element && element.getAttribute('alt') || '';

		_this.state = {
			element: element,
			imageAlt: imageAlt
		};
		return _this;
	}

	/**
  * Lifecycle. Renders the UI of the button.
  *
  * @method render
  * @return {Object} The content which should be rendered.
  */


	_createClass(ButtonAccessibilityImageAlt, [{
		key: 'render',
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			if (this.props.renderExclusive) {
				return _react2.default.createElement(
					'div',
					{ className: 'ae-container-edit-link' },
					_react2.default.createElement(
						'div',
						{ className: 'ae-container-input xxl' },
						_react2.default.createElement('input', {
							'aria-label': 'alt',
							className: 'ae-input',
							onChange: this._handleAltChange,
							onKeyDown: this._handleKeyDown,
							placeholder: 'alt',
							ref: 'refAltInput',
							title: 'alt',
							type: 'text',
							value: this.state.imageAlt
						})
					),
					_react2.default.createElement(
						'button',
						{
							'aria-label': AlloyEditor.Strings.confirm,
							className: 'ae-button',
							onClick: this._updateImageAlt,
							title: AlloyEditor.Strings.confirm },
						_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'check' })
					)
				);
			} else {
				return _react2.default.createElement(
					'button',
					{
						className: cssClass,
						onClick: this._requestExclusive,
						tabIndex: this.props.tabIndex },
					_react2.default.createElement(
						'small',
						{ className: 'ae-icon small' },
						'Alt'
					)
				);
			}
		}

		/**
   * Focuses the user cursor on the widget's input.
   *
   * @protected
   * @method _focusAltInput
   */

	}, {
		key: '_focusAltInput',
		value: function _focusAltInput() {
			var instance = this;

			var focusAltEl = function focusAltEl() {
				_reactDom2.default.findDOMNode(instance.refs.refAltInput).focus();
			};

			if (window.requestAnimationFrame) {
				window.requestAnimationFrame(focusAltEl);
			} else {
				setTimeout(focusAltEl, 0);
			}
		}

		/**
   * Event attached to alt input that fires when its value is changed
   *
   * @protected
   * @method  _handleAltChange
   * @param {MouseEvent} event
   */


		/**
   * Event attached to al tinput that fires when key is down
   * This method check that enter key is pushed to update the component´s state
   *
   * @protected
   * @method  _handleKeyDown
   * @param {MouseEvent} event
   */


		/**
   * Requests the link button to be rendered in exclusive mode to allow the creation of a link.
   *
   * @protected
   * @method _requestExclusive
   */


		/**
   * Method called by clicking ok button or pushing key enter to update imageAlt state and to update alt property from the image that is selected
   * This method calls cancelExclusive to show the previous toolbar before enter to edit alt property
   *
   * @protected
   * @method  _updateImageAlt
   */

	}]);

	return ButtonAccessibilityImageAlt;
}(_react2.default.Component);

ButtonAccessibilityImageAlt.key = 'AccessibilityImageAlt';
ButtonAccessibilityImageAlt.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @instance
  * @memberof ButtonAccessibilityImageAlt
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired
};

var _initialiseProps = function _initialiseProps() {
	var _this2 = this;

	this._handleAltChange = function (event) {
		_this2.setState({
			imageAlt: event.target.value
		});

		_this2._focusAltInput();
	};

	this._handleKeyDown = function (event) {
		if (event.keyCode === 13) {
			event.preventDefault();

			_this2._updateImageAlt();
		}
	};

	this._requestExclusive = function () {
		_this2.props.requestExclusive(ButtonAccessibilityImageAlt.key);
	};

	this._updateImageAlt = function () {
		var editor = _this2.props.editor.get('nativeEditor');

		var imageAlt = _this2.refs.refAltInput.value;

		_this2.setState({
			imageAlt: imageAlt
		});

		_this2.state.element.setAttribute('alt', imageAlt);

		editor.fire('actionPerformed', _this2);

		// We need to cancelExclusive with the bound parameters in case the button is used
		// inside another in exclusive mode (such is the case of the alt button)
		_this2.props.cancelExclusive();
	};
};

exports.default = (0, _buttonProps2.default)((0, _buttonStateClasses2.default)(ButtonAccessibilityImageAlt));

/***/ }),

/***/ "./src/components/buttons/button-background-color.jsx":
/*!************************************************************!*\
  !*** ./src/components/buttons/button-background-color.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStylesList = __webpack_require__(/*! ./button-styles-list.jsx */ "./src/components/buttons/button-styles-list.jsx");

var _buttonStylesList2 = _interopRequireDefault(_buttonStylesList);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var ButtonBackgroundColor = function (_React$Component) {
	_inherits(ButtonBackgroundColor, _React$Component);

	function ButtonBackgroundColor() {
		_classCallCheck(this, ButtonBackgroundColor);

		return _possibleConstructorReturn(this, (ButtonBackgroundColor.__proto__ || Object.getPrototypeOf(ButtonBackgroundColor)).apply(this, arguments));
	}

	_createClass(ButtonBackgroundColor, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var _this2 = this;

			var activeColor = AlloyEditor.Strings.normal;

			var activeColorClass = '';

			var colors = this._getColors();

			var itemStyle = {
				element: 'span',
				attributes: {
					class: ''
				}
			};

			colors.forEach(function (item) {
				itemStyle.attributes.class = item.styleClass;

				if (_this2._checkActive(itemStyle)) {
					activeColor = item.name;

					activeColorClass = item.style.attributes.class;
				}
			});

			var _props = this.props,
			    editor = _props.editor,
			    expanded = _props.expanded,
			    tabIndex = _props.tabIndex,
			    toggleDropdown = _props.toggleDropdown;


			var buttonStylesProps = {
				activeStyle: activeColor,
				editor: editor,
				onDismiss: toggleDropdown,
				showRemoveStylesItem: false,
				styles: colors
			};

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': expanded,
						className: 'ae-toolbar-element',
						onClick: toggleDropdown,
						role: 'combobox',
						tabIndex: tabIndex },
					_react2.default.createElement(
						'span',
						{ className: activeColorClass },
						_react2.default.createElement(_buttonIcon2.default, { editor: editor, symbol: 'textbox' })
					)
				),
				expanded && _react2.default.createElement(_buttonStylesList2.default, buttonStylesProps)
			);
		}
	}, {
		key: '_applyStyle',
		value: function _applyStyle(className) {
			var _this3 = this;

			var editor = this.props.editor.get('nativeEditor');

			var styleConfig = {
				element: 'span',
				attributes: {
					class: className
				}
			};

			editor.getSelection().lock();

			this._getColors().forEach(function (item) {
				styleConfig.attributes.class = item.styleClass;

				if (_this3._checkActive(styleConfig)) {
					editor.removeStyle(new CKEDITOR.style(styleConfig));
				}
			});

			styleConfig.attributes.class = className;

			var style = new CKEDITOR.style(styleConfig);

			editor.applyStyle(style);

			editor.getSelection().unlock();

			editor.fire('actionPerformed', this);
		}

		/**
   * Checks if the given color definition is applied to the current selection in the editor.
   *
   * @instance
   * @memberof ButtonBackgroundColor
   * @method _checkActive
   * @param {Object} styleConfig color definition as per http://docs.ckeditor.com/#!/api/CKEDITOR.style.
   * @protected
   * @return {Boolean} Returns true if the color is applied to the selection, false otherwise.
   */

	}, {
		key: '_checkActive',
		value: function _checkActive(styleConfig) {
			var nativeEditor = this.props.editor.get('nativeEditor');

			// Styles with wildcard element (*) won't be considered active by CKEditor. Defaulting
			// to a 'span' element works for most of those cases with no defined element.
			styleConfig = CKEDITOR.tools.merge({ element: 'span' }, styleConfig);

			var style = new CKEDITOR.style(styleConfig);

			return style.checkActive(nativeEditor.elementPath(), nativeEditor);
		}

		/**
   * Returns an array of colors. Each color consists of two properties:
   * - name - the style name, for example "default"
   * - style - an object with one property, called `element` which value
   * represents the style which have to be applied to the element.
   *
   * @instance
   * @memberof ButtonBackgroundColor
   * @method _getColor
   * @protected
   * @return {Array<object>} An array of objects containing the colors.
   */

	}, {
		key: '_getColors',
		value: function _getColors() {
			return this.props.styles || [{
				name: AlloyEditor.Strings.normal,
				style: {
					element: 'span',
					attributes: {
						class: 'text-body'
					}
				},
				styleClass: '',
				styleFn: this._applyStyle.bind(this, '')
			}, {
				name: AlloyEditor.Strings.primary,
				style: {
					element: 'span',
					attributes: {
						class: 'text-primary'
					}
				},
				styleClass: 'bg-primary',
				styleFn: this._applyStyle.bind(this, 'bg-primary')
			}, {
				name: AlloyEditor.Strings.disabled,
				style: {
					element: 'span',
					attributes: {
						class: 'text-secondary'
					}
				},
				styleClass: 'bg-secondary',
				styleFn: this._applyStyle.bind(this, 'bg-secondary')
			}, {
				name: AlloyEditor.Strings.success,
				style: {
					element: 'span',
					attributes: {
						class: 'text-success'
					}
				},
				styleClass: 'bg-success',
				styleFn: this._applyStyle.bind(this, 'bg-success')
			}, {
				name: AlloyEditor.Strings.danger,
				style: {
					element: 'span',
					attributes: {
						class: 'text-danger'
					}
				},
				styleClass: 'bg-danger',
				styleFn: this._applyStyle.bind(this, 'bg-danger')
			}, {
				name: AlloyEditor.Strings.warning,
				style: {
					element: 'span',
					attributes: {
						class: 'text-warning'
					}
				},
				styleClass: 'bg-warning',
				styleFn: this._applyStyle.bind(this, 'bg-warning')
			}, {
				name: AlloyEditor.Strings.info,
				style: {
					element: 'span',
					attributes: {
						class: 'text-info'
					}
				},
				styleClass: 'bg-info',
				styleFn: this._applyStyle.bind(this, 'bg-info')
			}];
		}
	}]);

	return ButtonBackgroundColor;
}(_react2.default.Component);

ButtonBackgroundColor.key = 'backgroundColor';
ButtonBackgroundColor.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @instance
  * @memberof ButtonBackgroundColor
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired,

	/**
  * Indicates whether the styles list is expanded or not.
  *
  * @instance
  * @memberof ButtonBackgroundColor
  * @property {Boolean} expanded
  */
	expanded: _propTypes2.default.bool,

	/**
  * The label that should be used for accessibility purposes.
  *
  * @instance
  * @memberof ButtonBackgroundColor
  * @property {String} label
  */
	label: _propTypes2.default.string,

	/**
  * Indicates whether the remove styles item should appear in the styles list.
  *
  * @instance
  * @memberof ButtonBackgroundColor
  * @property {Boolean} showRemoveStylesItem
  */
	showRemoveStylesItem: _propTypes2.default.bool,

	/**
  * List of the styles the button is able to handle.
  *
  * @instance
  * @memberof ButtonBackgroundColor
  * @property {Array} styles
  */
	styles: _propTypes2.default.arrayOf(_propTypes2.default.object),

	/**
  * The tabIndex of the button in its toolbar current state. A value other than -1
  * means that the button has focus and is the active element.
  *
  * @instance
  * @memberof ButtonBackgroundColor
  * @property {Number} tabIndex
  */
	tabIndex: _propTypes2.default.number,

	/**
  * Callback provided by the button host to notify when the styles list has been expanded.
  *
  * @instance
  * @memberof ButtonBackgroundColor
  * @property {Function} toggleDropdown
  */
	toggleDropdown: _propTypes2.default.func
};
exports.default = (0, _buttonProps2.default)((0, _buttonStateClasses2.default)(ButtonBackgroundColor));

/***/ }),

/***/ "./src/components/buttons/button-bold.jsx":
/*!************************************************!*\
  !*** ./src/components/buttons/button-bold.jsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonKeystroke = __webpack_require__(/*! ../base/button-keystroke.js */ "./src/components/base/button-keystroke.js");

var _buttonKeystroke2 = _interopRequireDefault(_buttonKeystroke);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonBold class provides functionality for styling an selection with strong (bold) style.
 *
 * @class ButtonBold
 * @uses ButtonCommand
 * @uses ButtonKeystroke
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonBold = function (_React$Component) {
	_inherits(ButtonBold, _React$Component);

	function ButtonBold() {
		_classCallCheck(this, ButtonBold);

		return _possibleConstructorReturn(this, (ButtonBold.__proto__ || Object.getPrototypeOf(ButtonBold)).apply(this, arguments));
	}

	_createClass(ButtonBold, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonBold
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonBold
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button  ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.bold,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-bold',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.bold },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'bold' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default bold
   * @memberof ButtonBold
   * @property {String} key
   * @static
   */

	}]);

	return ButtonBold;
}(_react2.default.Component);

ButtonBold.defaultProps = {
	command: 'bold',
	keystroke: {
		fn: 'execCommand',
		keys: CKEDITOR.CTRL + 66 /* B*/
	},
	style: 'coreStyles_bold'
};
ButtonBold.key = 'bold';
exports.default = (0, _buttonCommand2.default)((0, _buttonKeystroke2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonBold))));

/***/ }),

/***/ "./src/components/buttons/button-camera-image.jsx":
/*!********************************************************!*\
  !*** ./src/components/buttons/button-camera-image.jsx ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonCameraImage class takes photo from camera and inserts it to the content.
 *
 * @class ButtonCameraImage
 */
var ButtonCameraImage = function (_React$Component) {
	_inherits(ButtonCameraImage, _React$Component);

	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonCameraImage
  */
	function ButtonCameraImage(props) {
		_classCallCheck(this, ButtonCameraImage);

		var _this = _possibleConstructorReturn(this, (ButtonCameraImage.__proto__ || Object.getPrototypeOf(ButtonCameraImage)).call(this, props));

		_this.takePhoto = function () {
			var videoEl = _this._videoContainerRef.current;
			var canvasEl = _this._canvasContainerRef.current;

			var context = canvasEl.getContext('2d');

			var height = _this._videoHeight;
			var width = _this.props.videoWidth;

			if (width && height) {
				canvasEl.width = width;
				canvasEl.height = height;

				context.drawImage(videoEl, 0, 0, width, height);

				var imgURL = canvasEl.toDataURL('image/png');

				var el = CKEDITOR.dom.element.createFromHtml('<img src="' + imgURL + '">');

				var editor = _this.props.editor.get('nativeEditor');

				editor.insertElement(el);

				_this.props.cancelExclusive();

				editor.fire('actionPerformed', _this);

				editor.fire('imageCameraAdd', el);
			}
		};

		_this._handleStreamError = function (error) {
			window.alert('An error occurred! ' + error);
		};

		_this._handleStreamSuccess = function (stream) {
			var videoEl = _this._videoContainerRef.current;
			var canvasEl = _this._canvasContainerRef.current;

			videoEl.addEventListener('canplay', function () {
				var height = videoEl.videoHeight / (videoEl.videoWidth / _this.props.videoWidth);

				if (isNaN(height)) {
					height = _this.props.videoWidth / (4 / 3);
				}

				videoEl.setAttribute('width', _this.props.videoWidth);
				videoEl.setAttribute('height', height);
				canvasEl.setAttribute('width', _this.props.videoWidth);
				canvasEl.setAttribute('height', height);

				_this._videoHeight = height;
			}, false);

			_this._stream = stream;

			if (navigator.mozGetUserMedia) {
				videoEl.mozSrcObject = stream;
			} else {
				videoEl.srcObject = stream;
			}

			videoEl.play();

			_this._buttonTakePhotoRef.current.disabled = false;
		};

		_this._buttonTakePhotoRef = _react2.default.createRef();
		_this._canvasContainerRef = _react2.default.createRef();
		_this._videoContainerRef = _react2.default.createRef();
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
  *
  * Focuses the take photo button.
  *
  * @instance
  * @memberof ButtonCameraImage
  * @method componentDidMount
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default cameraImage
  * @memberof ButtonCameraImage
  * @property {String} key
  * @static
  */


	_createClass(ButtonCameraImage, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this._buttonTakePhotoRef.current.focus();
		}

		/**
   * Lifecycle. Invoked immediately before a component is unmounted from the DOM.
   *
   * @instance
   * @memberof ButtonCameraImage
   * @method componentWillUnmount
   */

	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (this._stream) {
				if (this._stream.stop) {
					this._stream.stop();
				} else if (this._stream.getVideoTracks) {
					this._stream.getVideoTracks().forEach(function (track) {
						track.stop();
					});
				}
				this._stream = null;
			}
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonCameraImage
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',


		/**
   * Fired when an image is being taken from the camera and added as an element to the editor.
   *
   * @event ButtonCameraImage#imageCameraAdd
   * @memberof ButtonCameraImage
   * @param {CKEDITOR.dom.element} el The created img element in editor.
   */
		value: function render() {
			var getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;

			getUserMedia.call(navigator, {
				video: true,
				audio: false
			}, this._handleStreamSuccess, this._handleStreamError);

			return _react2.default.createElement(
				'div',
				{ className: 'ae-camera' },
				_react2.default.createElement(
					'video',
					{ ref: this._videoContainerRef },
					'Video stream not available.'
				),
				_react2.default.createElement(
					'button',
					{
						className: 'ae-camera-shoot',
						onClick: this.takePhoto,
						ref: this._buttonTakePhotoRef },
					'Take photo'
				),
				_react2.default.createElement('canvas', {
					className: 'ae-camera-canvas',
					ref: this._canvasContainerRef
				})
			);
		}

		/**
   * Takes photo from the video stream and inserts in into editor's content.
   *
   * @fires ButtonCameraImage#imageCameraAdd
   * @instance
   * @memberof ButtonCameraImage
   * @method takePhoto
   */


		/**
   * Displays error message in case of video stream capturing failure.
   *
   * @instance
   * @memberof ButtonCameraImage
   * @method _handleStreamError
   * @param {Event} error The fired event in case of error.
   * @protected
   */


		/**
   * Starts streaming video in the video element and sets width/height to the video
   * and canvas elements.
   *
   * @instance
   * @memberof ButtonCameraImage
   * @method _handleStreamSuccess
   * @param {Object} stream The video stream
   * @protected
   */

	}]);

	return ButtonCameraImage;
}(_react2.default.Component);

ButtonCameraImage.defaultProps = {
	videoWidth: 320
};
ButtonCameraImage.key = 'cameraImage';
exports.default = ButtonCameraImage;

/***/ }),

/***/ "./src/components/buttons/button-camera.jsx":
/*!**************************************************!*\
  !*** ./src/components/buttons/button-camera.jsx ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCameraImage = __webpack_require__(/*! ./button-camera-image.jsx */ "./src/components/buttons/button-camera-image.jsx");

var _buttonCameraImage2 = _interopRequireDefault(_buttonCameraImage);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonCamera class renders in two different ways:
 *
 * - Normal: Just a button that allows to switch to the edition mode.
 * - Exclusive: Renders ButtonCameraImage in order to take photo from the camera.
 *
 * @class ButtonCamera
 */
var ButtonCamera = function (_React$Component) {
	_inherits(ButtonCamera, _React$Component);

	function ButtonCamera() {
		_classCallCheck(this, ButtonCamera);

		return _possibleConstructorReturn(this, (ButtonCamera.__proto__ || Object.getPrototypeOf(ButtonCamera)).apply(this, arguments));
	}

	_createClass(ButtonCamera, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonCamera
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			if (this.props.renderExclusive) {
				return _react2.default.createElement(_buttonCameraImage2.default, this.props);
			} else {
				var disabled = !(navigator.getUserMedia || navigator.webkitGetUserMedia && location.protocol === 'https' || navigator.mozGetUserMedia || navigator.msGetUserMedia);

				var label = disabled ? AlloyEditor.Strings.cameraDisabled : AlloyEditor.Strings.camera;

				return _react2.default.createElement(
					'button',
					{
						'aria-label': label,
						className: 'ae-button',
						'data-type': 'button-image-camera',
						disabled: disabled,
						onClick: this.props.requestExclusive.bind(ButtonCamera.key),
						tabIndex: this.props.tabIndex,
						title: label },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'camera' })
				);
			}
		}
		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default camera
   * @memberof ButtonCamera
   * @property {String} key
   * @static
   */

	}]);

	return ButtonCamera;
}(_react2.default.Component);

ButtonCamera.key = 'camera';
exports.default = ButtonCamera;

/***/ }),

/***/ "./src/components/buttons/button-code.jsx":
/*!************************************************!*\
  !*** ./src/components/buttons/button-code.jsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonActionStyle = __webpack_require__(/*! ../base/button-action-style.js */ "./src/components/base/button-action-style.js");

var _buttonActionStyle2 = _interopRequireDefault(_buttonActionStyle);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonCode class provides wraps a selection in `pre` element.
 *
 * @class ButtonCode
 * @uses ButtonActionStyle
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonCode = function (_React$Component) {
	_inherits(ButtonCode, _React$Component);

	function ButtonCode() {
		_classCallCheck(this, ButtonCode);

		return _possibleConstructorReturn(this, (ButtonCode.__proto__ || Object.getPrototypeOf(ButtonCode)).apply(this, arguments));
	}

	_createClass(ButtonCode, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonCode
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonCode
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.code,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-code',
					onClick: this.applyStyle,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.code },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'code' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default code
   * @memberof ButtonCode
   * @property {String} key
   * @static
   */

	}]);

	return ButtonCode;
}(_react2.default.Component);

ButtonCode.defaultProps = {
	style: {
		element: 'pre'
	}
};
ButtonCode.key = 'code';
exports.default = (0, _buttonActionStyle2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonCode)));

/***/ }),

/***/ "./src/components/buttons/button-color.jsx":
/*!*************************************************!*\
  !*** ./src/components/buttons/button-color.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStylesList = __webpack_require__(/*! ./button-styles-list.jsx */ "./src/components/buttons/button-styles-list.jsx");

var _buttonStylesList2 = _interopRequireDefault(_buttonStylesList);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonColor class provides functionality for changing text color in a document.
 *
 *
 * @class ButtonColor
 * @uses ButtonProps
 * @uses ButtonStateClasses
 */
var ButtonColor = function (_React$Component) {
	_inherits(ButtonColor, _React$Component);

	function ButtonColor() {
		_classCallCheck(this, ButtonColor);

		return _possibleConstructorReturn(this, (ButtonColor.__proto__ || Object.getPrototypeOf(ButtonColor)).apply(this, arguments));
	}

	_createClass(ButtonColor, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var _this2 = this;

			var activeColor = AlloyEditor.Strings.normal;

			var activeColorClass = 'text-body';

			var colors = this._getColors();

			colors.some(function (item) {
				if (_this2._checkActive(item.style)) {
					activeColor = item.name;

					activeColorClass = item.style.attributes.class;
				}
			});

			var _props = this.props,
			    editor = _props.editor,
			    expanded = _props.expanded,
			    tabIndex = _props.tabIndex,
			    toggleDropdown = _props.toggleDropdown;


			var buttonStylesProps = {
				activeStyle: activeColor,
				editor: editor,
				onDismiss: toggleDropdown,
				showRemoveStylesItem: false,
				styles: colors
			};

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': expanded,
						className: 'ae-toolbar-element',
						onClick: toggleDropdown,
						role: 'combobox',
						tabIndex: tabIndex },
					_react2.default.createElement(
						'span',
						{ className: activeColorClass },
						_react2.default.createElement(_buttonIcon2.default, { editor: editor, symbol: 'text-editor' })
					)
				),
				expanded && _react2.default.createElement(_buttonStylesList2.default, buttonStylesProps)
			);
		}
	}, {
		key: '_applyStyle',
		value: function _applyStyle(className) {
			var _this3 = this;

			var editor = this.props.editor.get('nativeEditor');

			var styleConfig = {
				element: 'span',
				attributes: {
					class: className
				}
			};

			var style = new CKEDITOR.style(styleConfig);

			editor.getSelection().lock();

			this._getColors().forEach(function (item) {
				if (_this3._checkActive(item.style)) {
					editor.removeStyle(new CKEDITOR.style(item.style));
				}
			});

			editor.applyStyle(style);

			editor.getSelection().unlock();

			editor.fire('actionPerformed', this);
		}

		/**
   * Checks if the given color definition is applied to the current selection in the editor.
   *
   * @instance
   * @memberof ButtonColor
   * @method _checkActive
   * @param {Object} styleConfig Color definition as per http://docs.ckeditor.com/#!/api/CKEDITOR.style.
   * @protected
   * @return {Boolean} Returns true if the color is applied to the selection, false otherwise.
   */

	}, {
		key: '_checkActive',
		value: function _checkActive(styleConfig) {
			var nativeEditor = this.props.editor.get('nativeEditor');

			// Styles with wildcard element (*) won't be considered active by CKEditor. Defaulting
			// to a 'span' element works for most of those cases with no defined element.
			styleConfig = CKEDITOR.tools.merge({ element: 'span' }, styleConfig);

			var style = new CKEDITOR.style(styleConfig);

			return style.checkActive(nativeEditor.elementPath(), nativeEditor);
		}

		/**
   * Returns an array of colors. Each color consists of two properties:
   * - name - The style name, for example "default".
   * - style - An object with one property, called `element` which value
   *          represents the style which have to be applied to the element.
   * - styleFn - The function that is invoked to apply the style to the element.
   *
   * @instance
   * @memberof ButtonColor
   * @method _getColor
   * @protected
   * @return {Array<object>} An array of objects containing the colors.
   */

	}, {
		key: '_getColors',
		value: function _getColors() {
			return this.props.styles || [{
				name: AlloyEditor.Strings.normal,
				style: {
					element: 'span',
					attributes: {
						class: 'text-body'
					}
				},
				styleFn: this._applyStyle.bind(this, '')
			}, {
				name: AlloyEditor.Strings.primary,
				style: {
					element: 'span',
					attributes: {
						class: 'text-primary'
					}
				},
				styleFn: this._applyStyle.bind(this, 'text-primary')
			}, {
				name: AlloyEditor.Strings.disabled,
				style: {
					element: 'span',
					attributes: {
						class: 'text-secondary'
					}
				},
				styleFn: this._applyStyle.bind(this, 'text-secondary')
			}, {
				name: AlloyEditor.Strings.success,
				style: {
					element: 'span',
					attributes: {
						class: 'text-success'
					}
				},
				styleFn: this._applyStyle.bind(this, 'text-success')
			}, {
				name: AlloyEditor.Strings.danger,
				style: {
					element: 'span',
					attributes: {
						class: 'text-danger'
					}
				},
				styleFn: this._applyStyle.bind(this, 'text-danger')
			}, {
				name: AlloyEditor.Strings.warning,
				style: {
					element: 'span',
					attributes: {
						class: 'text-warning'
					}
				},
				styleFn: this._applyStyle.bind(this, 'text-warning')
			}, {
				name: AlloyEditor.Strings.info,
				style: {
					element: 'span',
					attributes: {
						class: 'text-info'
					}
				},
				styleFn: this._applyStyle.bind(this, 'text-info')
			}];
		}
	}]);

	return ButtonColor;
}(_react2.default.Component);

ButtonColor.key = 'color';
ButtonColor.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @instance
  * @memberof ButtonColor
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired,

	/**
  * Indicates whether the styles list is expanded or not.
  *
  * @instance
  * @memberof ButtonColor
  * @property {Boolean} expanded
  */
	expanded: _propTypes2.default.bool,

	/**
  * The label that should be used for accessibility purposes.
  *
  * @instance
  * @memberof ButtonColor
  * @property {String} label
  */
	label: _propTypes2.default.string,

	/**
  * Indicates whether the remove styles item should appear in the styles list.
  *
  * @instance
  * @memberof ButtonColor
  * @property {Boolean} showRemoveStylesItem
  */
	showRemoveStylesItem: _propTypes2.default.bool,

	/**
  * List of the styles the button is able to handle.
  *
  * @instance
  * @memberof ButtonColor
  * @property {Array} styles
  */
	styles: _propTypes2.default.arrayOf(_propTypes2.default.object),

	/**
  * The tabIndex of the button in its toolbar current state. A value other than -1
  * means that the button has focus and is the active element.
  *
  * @instance
  * @memberof ButtonColor
  * @property {Number} tabIndex
  */
	tabIndex: _propTypes2.default.number,

	/**
  * Callback provided by the button host to notify when the styles list has been expanded.
  *
  * @instance
  * @memberof ButtonColor
  * @property {Function} toggleDropdown
  */
	toggleDropdown: _propTypes2.default.func
};
exports.default = (0, _buttonProps2.default)((0, _buttonStateClasses2.default)(ButtonColor));

/***/ }),

/***/ "./src/components/buttons/button-command-list-item.jsx":
/*!*************************************************************!*\
  !*** ./src/components/buttons/button-command-list-item.jsx ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonCommandListItem class is a UI class that renders a ButtonCommand that can be used inside
 * a list as an item, with a string representation of its behaviour.
 *
 * @class ButtonCommandListItem
 * @uses ButtonCommand
 */
var ButtonCommandListItem = function (_React$Component) {
	_inherits(ButtonCommandListItem, _React$Component);

	function ButtonCommandListItem() {
		_classCallCheck(this, ButtonCommandListItem);

		return _possibleConstructorReturn(this, (ButtonCommandListItem.__proto__ || Object.getPrototypeOf(ButtonCommandListItem)).apply(this, arguments));
	}

	_createClass(ButtonCommandListItem, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonCommandListItem
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			return _react2.default.createElement(
				'button',
				{
					'aria-label': this.props.description,
					className: this._getClassName(),
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex },
				this.props.description
			);
		}

		/**
   * Returns the class name of Widget.
   *
   * @instance
   * @memberof ButtonCommandListItem
   * @method _getClassName
   * @protected
   * @return {String} The class name of the Widget.
   */

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default buttonCommandListItem
   * @memberof ButtonCommandListItem
   * @property {String} key
   * @static
   */

	}, {
		key: '_getClassName',
		value: function _getClassName() {
			var className = 'ae-container ae-toolbar-element';

			return className;
		}
	}]);

	return ButtonCommandListItem;
}(_react2.default.Component);

ButtonCommandListItem.key = 'buttonCommandListItem';
exports.default = (0, _buttonCommand2.default)(ButtonCommandListItem);

/***/ }),

/***/ "./src/components/buttons/button-commands-list.jsx":
/*!*********************************************************!*\
  !*** ./src/components/buttons/button-commands-list.jsx ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommandListItem = __webpack_require__(/*! ./button-command-list-item.jsx */ "./src/components/buttons/button-command-list-item.jsx");

var _buttonCommandListItem2 = _interopRequireDefault(_buttonCommandListItem);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonCommandsList class provides functionality for showing a list of commands that can be
 * executed to the current selection..
 *
 * @class ButtonCommandsList
 * @uses WidgetFocusManager
 */
var ButtonCommandsList = function (_React$Component) {
	_inherits(ButtonCommandsList, _React$Component);

	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonCommandsList
  * @method getDefaultProps
  * @return {Object} The default properties.
  */
	function ButtonCommandsList(props) {
		_classCallCheck(this, ButtonCommandsList);

		var _this = _possibleConstructorReturn(this, (ButtonCommandsList.__proto__ || Object.getPrototypeOf(ButtonCommandsList)).call(this, props));

		_this._ref = _react2.default.createRef();
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
  *
  * Focuses on the list node to allow keyboard interaction.
  *
  * @instance
  * @memberof ButtonCommandsList
  * @method componentDidMount
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default buttonCommandsList
  * @memberof ButtonCommandsList
  * @property {String} key
  * @static
  */


	_createClass(ButtonCommandsList, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this._ref.current.focus();
		}

		/**
   * Lifecycle. Renders the UI of the list.
   *
   * @instance
   * @memberof ButtonCommandsList
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				{
					className: 'ae-dropdown ae-arrow-box ae-arrow-box-top-left',
					onFocus: this.focus,
					onKeyDown: this.handleKey,
					ref: this._ref,
					tabIndex: '0' },
				_react2.default.createElement(
					'ul',
					{
						className: 'ae-listbox',
						id: this.props.listId,
						role: 'listbox' },
					this._renderActions(this.props.commands)
				)
			);
		}

		/**
   * Renders instances of ButtonCommandListItem with the description of the row action that will be executed.
   *
   * @instance
   * @memberof ButtonCommandsList
   * @method _renderActions
   * @protected
   * @return {Array} Rendered instances of ButtonCommandListItem class
   */

	}, {
		key: '_renderActions',
		value: function _renderActions(commands) {
			var editor = this.props.editor;
			var items = void 0;

			if (commands && commands.length) {
				items = commands.map(function (item) {
					return _react2.default.createElement(
						'li',
						{ key: item.command, role: 'option' },
						_react2.default.createElement(_buttonCommandListItem2.default, {
							command: item.command,
							description: typeof item.label === 'string' ? item.label : item.label(),
							icon: item.icon,
							editor: editor
						})
					);
				});
			}

			return items;
		}
	}]);

	return ButtonCommandsList;
}(_react2.default.Component);

ButtonCommandsList.defaultProps = {
	circular: false,
	descendants: '.ae-toolbar-element',
	keys: {
		dismiss: [27],
		dismissNext: [39],
		dismissPrev: [37],
		next: [40],
		prev: [38]
	}
};
ButtonCommandsList.key = 'buttonCommandsList';
exports.default = (0, _widgetFocusManager2.default)(ButtonCommandsList);

/***/ }),

/***/ "./src/components/buttons/button-dropdown.jsx":
/*!****************************************************!*\
  !*** ./src/components/buttons/button-dropdown.jsx ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonDropdown class provides markup and keyboard navigation behaviour to a dropdown
 * opened from a button.
 *
 * @class ButtonDropdown
 */
var ButtonDropdown = function (_React$Component) {
	_inherits(ButtonDropdown, _React$Component);

	function ButtonDropdown() {
		_classCallCheck(this, ButtonDropdown);

		return _possibleConstructorReturn(this, (ButtonDropdown.__proto__ || Object.getPrototypeOf(ButtonDropdown)).apply(this, arguments));
	}

	_createClass(ButtonDropdown, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonDropdown
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonDropdown
   * @method getDefaultProps
   */
		value: function render() {
			return _react2.default.createElement(
				'div',
				{
					className: 'ae-dropdown ae-arrow-box ae-arrow-box-top-left',
					onFocus: this.focus,
					onKeyDown: this.handleKey,
					tabIndex: '0' },
				_react2.default.createElement(
					'ul',
					{ className: 'ae-listbox', role: 'listbox' },
					this.props.children
				)
			);
		}

		/**
   * The name which will be used as an alias of the dropdown in the configuration.
   *
   * @default dropdown
   * @memberof ButtonDropdown
   * @property {String} key
   * @static
   */

	}]);

	return ButtonDropdown;
}(_react2.default.Component);

ButtonDropdown.defaultProps = {
	circular: false,
	descendants: '.ae-toolbar-element',
	keys: {
		dismiss: [27],
		dismissNext: [39],
		dismissPrev: [37],
		next: [40],
		prev: [38]
	}
};
ButtonDropdown.key = 'dropdown';
exports.default = (0, _widgetFocusManager2.default)(ButtonDropdown);

/***/ }),

/***/ "./src/components/buttons/button-embed-edit.jsx":
/*!******************************************************!*\
  !*** ./src/components/buttons/button-embed-edit.jsx ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KEY_ENTER = 13;
var KEY_ESC = 27;

/**
 * The ButtonEmbedEdit class provides functionality for creating and editing an embed link in a document.
 * Provides UI for creating and editing an embed link.
 *
 * @class ButtonEmbedEdit
 */

var ButtonEmbedEdit = function (_React$Component) {
	_inherits(ButtonEmbedEdit, _React$Component);

	function ButtonEmbedEdit(props) {
		_classCallCheck(this, ButtonEmbedEdit);

		var _this = _possibleConstructorReturn(this, (ButtonEmbedEdit.__proto__ || Object.getPrototypeOf(ButtonEmbedEdit)).call(this, props));

		_this._clearLink = function () {
			_this.setState({
				linkHref: ''
			});
		};

		_this._embedLink = function () {
			var nativeEditor = _this.props.editor.get('nativeEditor');

			nativeEditor.execCommand('embedUrl', {
				url: _this.state.linkHref
			});

			// We need to cancelExclusive with the bound parameters in case the button is used
			// inside another in exclusive mode (such is the case of the link button)
			_this.props.cancelExclusive();
		};

		_this._focusLinkInput = function () {
			_this.linkInput.current.focus();
		};

		_this._handleKeyDown = function (event) {
			if (event.keyCode === KEY_ENTER || event.keyCode === KEY_ESC) {
				event.preventDefault();
			}

			if (event.keyCode === KEY_ENTER) {
				_this._embedLink();
			} else if (event.keyCode === KEY_ESC) {
				var editor = _this.props.editor.get('nativeEditor');

				// We need to cancelExclusive with the bound parameters in case the button is used
				// inside another in exclusive mode (such is the case of the link button)
				_this.props.cancelExclusive();

				editor.fire('actionPerformed', _this);
			}
		};

		_this._handleLinkHrefChange = function (event) {
			_this.setState({
				linkHref: event.target.value
			});
		};

		_this._removeEmbed = function () {
			var editor = _this.props.editor.get('nativeEditor');

			var embedWrapper = _this.state.element.getAscendant(function (element) {
				return element.hasClass('cke_widget_wrapper');
			});

			embedWrapper.remove();

			editor.fire('actionPerformed', _this);
		};

		_this.linkInput = _react2.default.createRef();
		_this.state = _this.getInitialState();
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
  *
  * Focuses on the link input to immediately allow editing. This should only happen if the component
  * is rendered in exclusive mode to prevent aggressive focus stealing.
  *
  * @instance
  * @memberof ButtonEmbedEdit
  * @method componentDidMount
  */

	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default embedEdit
  * @memberof ButtonEmbedEdit
  * @property {String} key
  * @static
  */


	_createClass(ButtonEmbedEdit, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (this.props.renderExclusive || this.props.manualSelection) {
				// We need to wait for the next rendering cycle before focusing to avoid undesired
				// scrolls on the page
				if (window.requestAnimationFrame) {
					window.requestAnimationFrame(this._focusLinkInput);
				} else {
					setTimeout(this._focusLinkInput, 0);
				}
			}
		}

		/**
   * Lifecycle. Invoked when a component is receiving new props.
   * This method is not called for the initial render.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method componentWillReceiveProps
   */

	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps() {
			this.setState(this.getInitialState());
		}

		/**
   * Lifecycle. Invoked once before the component is mounted.
   * The return value will be used as the initial value of this.state.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method getInitialState
   */

	}, {
		key: 'getInitialState',
		value: function getInitialState() {
			var editor = this.props.editor.get('nativeEditor');
			var embed = void 0;

			var selection = editor.getSelection();

			if (selection) {
				var selectedElement = selection.getSelectedElement();

				if (selectedElement) {
					embed = selectedElement.findOne('[data-widget="ae_embed"]');
				}
			}

			var href = embed ? embed.getAttribute('data-ae-embed-url') : '';

			return {
				element: embed,
				initialLink: {
					href: href
				},
				linkHref: href
			};
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var clearLinkStyle = {
				opacity: this.state.linkHref ? 1 : 0
			};

			var editor = this.props.editor;

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-edit-link' },
				_react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.deleteEmbed,
						className: 'ae-button',
						'data-type': 'button-embed-remove',
						disabled: !this.state.element,
						onClick: this._removeEmbed,
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.deleteEmbed },
					_react2.default.createElement(_buttonIcon2.default, {
						editor: editor,
						symbol: 'trash',
						className: 'ae-icon-svg-trash'
					})
				),
				_react2.default.createElement(
					'div',
					{ className: 'ae-container-input xxl' },
					_react2.default.createElement('input', {
						className: 'ae-input',
						onChange: this._handleLinkHrefChange,
						onKeyDown: this._handleKeyDown,
						placeholder: AlloyEditor.Strings.editLink,
						ref: this.linkInput,
						type: 'text',
						value: this.state.linkHref
					}),
					_react2.default.createElement(
						'button',
						{
							'aria-label': AlloyEditor.Strings.clearInput,
							className: 'ae-button ae-button-clear',
							onClick: this._clearLink,
							style: clearLinkStyle,
							title: AlloyEditor.Strings.clear },
						_react2.default.createElement(_buttonIcon2.default, { editor: editor, symbol: 'times-clear' })
					)
				),
				_react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.confirm,
						className: 'ae-button',
						disabled: !this._isValidState(),
						onClick: this._embedLink,
						title: AlloyEditor.Strings.confirm },
					_react2.default.createElement(_buttonIcon2.default, {
						editor: editor,
						symbol: 'check',
						className: 'ae-icon-svg-check'
					})
				)
			);
		}

		/**
   * Clears the link input. This only changes the component internal state, but does not
   * affect the link element of the editor. Only the _removeLink and _updateLink methods
   * are translated to the editor element.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method _clearLink
   * @protected
   */


		/**
   * Triggers the embedUrl command to transform the link into an embed media object
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method _embedLink
   * @protected
   */


		/**
   * Focuses the user cursor on the widget's input.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method _focusLinkInput
   * @protected
   */


		/**
   * Monitors key interaction inside the input element to respond to the keys:
   * - Enter: Creates/updates the link.
   * - Escape: Discards the changes.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method _handleKeyDown
   * @param {SyntheticEvent} event The keyboard event.
   * @protected
   */


		/**
   * Updates the component state when the link input changes on user interaction.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method _handleLinkHrefChange
   * @param {SyntheticEvent} event The change event.
   * @protected
   */

	}, {
		key: '_isValidState',


		/**
   * Verifies that the current link state is valid so the user can save the link. A valid state
   * means that we have a non-empty href that's different from the original one.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method _isValidState
   * @protected
   * @return {Boolean} True if the state is valid, false otherwise
   */
		value: function _isValidState() {
			var validState = this.state.linkHref && this.state.linkHref !== this.state.initialLink.href;

			return validState;
		}

		/**
   * Removes the embed in the editor element.
   *
   * @instance
   * @memberof ButtonEmbedEdit
   * @method _removeEmbed
   * @protected
   */

	}]);

	return ButtonEmbedEdit;
}(_react2.default.Component);

ButtonEmbedEdit.key = 'embedEdit';
exports.default = ButtonEmbedEdit;

/***/ }),

/***/ "./src/components/buttons/button-embed-video-edit.jsx":
/*!************************************************************!*\
  !*** ./src/components/buttons/button-embed-video-edit.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KEY_ENTER = 13;
var KEY_ESC = 27;

/**
 * The ButtonEmbedVideoEdit class provides functionality for changing text color in a document.
 *
 * @uses ButtonIcon
 *
 * @class ButtonEmbedVideoEdit
 */

var ButtonEmbedVideoEdit = function (_React$Component) {
	_inherits(ButtonEmbedVideoEdit, _React$Component);

	function ButtonEmbedVideoEdit(props, context) {
		_classCallCheck(this, ButtonEmbedVideoEdit);

		var _this = _possibleConstructorReturn(this, (ButtonEmbedVideoEdit.__proto__ || Object.getPrototypeOf(ButtonEmbedVideoEdit)).call(this, props, context));

		_this._embedVideoURL = function () {
			var nativeEditor = _this.props.editor.get('nativeEditor');

			nativeEditor.execCommand('embedUrl', {
				type: 'video',
				url: _this.state.videoURL
			});

			// We need to cancelExclusive with the bound parameters in case the button is used
			// inside another in exclusive mode (such is the case of the link button)
			_this.props.cancelExclusive();
		};

		_this._focusVideoUrlInput = function () {
			_reactDom2.default.findDOMNode(_this.refs.linkInput).focus();
		};

		_this._handleKeyDown = function (event) {
			if (event.keyCode === KEY_ENTER || event.keyCode === KEY_ESC) {
				event.preventDefault();
			}

			if (event.keyCode === KEY_ENTER) {
				_this._embedVideoURL();
			} else if (event.keyCode === KEY_ESC) {
				_this.props.cancelExclusive();
			}
		};

		_this._handleVideoURLChange = function (event) {
			_this.setState({
				videoURL: event.target.value
			});
		};

		_this.state = _this.getInitialState();
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
  *
  * Focuses on the link input to immediately allow editing. This should only happen if the component
  * is rendered in exclusive mode to prevent aggressive focus stealing.
  *
  * @instance
  * @memberof ButtonEmbedVideoEdit
  * @method componentDidMount
  */


	_createClass(ButtonEmbedVideoEdit, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (this.props.renderExclusive || this.props.manualSelection) {
				// We need to wait for the next rendering cycle before focusing to avoid undesired
				// scrolls on the page
				if (window.requestAnimationFrame) {
					window.requestAnimationFrame(this._focusVideoUrlInput);
				} else {
					setTimeout(this._focusVideoUrlInput, 0);
				}
			}
		}

		/**
   * Lifecycle. Invoked when a component is receiving new props.
   * This method is not called for the initial render.
   *
   * @instance
   * @memberof ButtonEmbedVideoEdit
   * @method componentWillReceiveProps
   */

	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps() {
			this.replaceState(this.getInitialState());
		}

		/**
   * Lifecycle. Invoked once before the component is mounted.
   * The return value will be used as the initial value of this.state.
   *
   * @instance
   * @memberof ButtonEmbedVideoEdit
   * @method getInitialState
   */

	}, {
		key: 'getInitialState',
		value: function getInitialState() {
			var editor = this.props.editor.get('nativeEditor');
			var element = void 0;

			var selection = editor.getSelection();

			if (selection) {
				var selectedElement = selection.getSelectedElement();

				if (selectedElement) {
					element = selectedElement.findOne('[data-widget="videoembed"]');
				}
			}

			var videoURL = element ? element.getAttribute('data-embed-video-url') : '';

			return {
				element: element,
				initialEmbed: {
					videoURL: videoURL
				},
				videoURL: videoURL
			};
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonEmbedVideoEdit
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var inputPlaceholder = AlloyEditor.Strings.pasteVideoLink;

			var clearVideoURLStyle = {
				opacity: this.state.videoURL ? 1 : 0
			};

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-embed-video-edit' },
				_react2.default.createElement(
					'div',
					{ className: 'ae-container-input xxl' },
					_react2.default.createElement('input', {
						className: 'ae-input',
						onChange: this._handleVideoURLChange,
						onKeyDown: this._handleKeyDown,
						placeholder: inputPlaceholder,
						ref: 'linkInput',
						type: 'text',
						value: this.state.videoURL
					}),
					_react2.default.createElement('button', {
						'aria-label': AlloyEditor.Strings.clearInput,
						className: 'ae-button ae-icon-remove',
						onClick: this._clearLink,
						style: clearVideoURLStyle,
						title: AlloyEditor.Strings.clear
					})
				),
				_react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.confirm,
						className: 'ae-button',
						disabled: !this._isValidState(),
						onClick: this._embedVideoURL,
						title: AlloyEditor.Strings.confirm },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'check' })
				)
			);
		}

		/**
   * Clears the link input. This only changes the component internal state, but does not
   * affect the link element of the editor. Only the _removeLink and _updateLink methods
   * are translated to the editor element.
   *
   * @instance
   * @memberof ButtonEmbedVideoEdit
   * @method _clearLink
   * @protected
   */

	}, {
		key: '_clearLink',
		value: function _clearLink() {
			this.setState({
				videoURL: ''
			});
		}

		/**
   * Triggers the embedVideoUrl command to transform the link into an embed media object
   *
   * @instance
   * @memberof EmbedVideoEdit
   * @method _embedVideoURL
   * @protected
   */


		/**
   * Focuses the user cursor on the widget's input.
   *
   * @instance
   * @memberof ButtonEmbedVideoEdit
   * @method _focusVideoUrlInput
   * @protected
   */


		/**
   * Monitors key interaction inside the input element to respond to the keys:
   * - Enter: Creates/updates the link.
   * - Escape: Discards the changes.
   *
   * @instance
   * @memberof ButtonEmbedVideoEdit
   * @method _handleKeyDown
   * @param {SyntheticEvent} event The keyboard event.
   * @protected
   */


		/**
   * Updates the component state when the link input changes on user interaction.
   *
   * @instance
   * @memberof ButtonEmbedVideoEdit
   * @method _handleVideoURLChange
   * @param {SyntheticEvent} event The change event.
   * @protected
   */

	}, {
		key: '_isValidState',


		/**
   * Verifies that the current link state is valid so the user can save the link. A valid state
   * means that we have a non-empty videoURL that's different from the original one.
   *
   * @instance
   * @memberof EmbedVideoEdit
   * @method _isValidState
   * @protected
   * @return {Boolean} True if the state is valid, false otherwise
   */
		value: function _isValidState() {
			var validState = this.state.videoURL && this.state.videoURL !== this.state.initialEmbed.videoURL;

			return validState;
		}
	}]);

	return ButtonEmbedVideoEdit;
}(_react2.default.Component);

ButtonEmbedVideoEdit.key = 'embedVideoEdit';
ButtonEmbedVideoEdit.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @instance
  * @memberof ButtonEmbedVideoEdit
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired
};
exports.default = ButtonEmbedVideoEdit;

/***/ }),

/***/ "./src/components/buttons/button-embed-video.jsx":
/*!*******************************************************!*\
  !*** ./src/components/buttons/button-embed-video.jsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonEmbedVideoEdit = __webpack_require__(/*! ./button-embed-video-edit.jsx */ "./src/components/buttons/button-embed-video-edit.jsx");

var _buttonEmbedVideoEdit2 = _interopRequireDefault(_buttonEmbedVideoEdit);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonEmbedVideo class provides functionality for changing text color in a document.
 *
 * @class ButtonEmbedVideo
 * @uses ButtonProps
 */
var ButtonEmbedVideo = function (_React$Component) {
	_inherits(ButtonEmbedVideo, _React$Component);

	function ButtonEmbedVideo() {
		_classCallCheck(this, ButtonEmbedVideo);

		return _possibleConstructorReturn(this, (ButtonEmbedVideo.__proto__ || Object.getPrototypeOf(ButtonEmbedVideo)).apply(this, arguments));
	}

	_createClass(ButtonEmbedVideo, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			if (this.props.renderExclusive) {
				return _react2.default.createElement(_buttonEmbedVideoEdit2.default, this.props);
			} else {
				return _react2.default.createElement(
					'button',
					{
						className: 'ae-button',
						'data-type': 'button-embed-video',
						onClick: this.props.requestExclusive,
						tabIndex: this.props.tabIndex },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'video' })
				);
			}
		}
	}]);

	return ButtonEmbedVideo;
}(_react2.default.Component);

ButtonEmbedVideo.key = 'embedVideo';
ButtonEmbedVideo.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @instance
  * @memberof ButtonEmbedVideo
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired,

	/**
  * The label that should be used for accessibility purposes.
  *
  * @instance
  * @memberof ButtonEmbedVideo
  * @property {String} label
  */
	label: _propTypes2.default.string,

	/**
  * The tabIndex of the button in its toolbar current state. A value other than -1
  * means that the button has focus and is the active element.
  *
  * @instance
  * @memberof ButtonEmbedVideo
  * @property {Number} tabIndex
  */
	tabIndex: _propTypes2.default.number
};
exports.default = (0, _buttonProps2.default)(ButtonEmbedVideo);

/***/ }),

/***/ "./src/components/buttons/button-embed.jsx":
/*!*************************************************!*\
  !*** ./src/components/buttons/button-embed.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonEmbedEdit = __webpack_require__(/*! ./button-embed-edit.jsx */ "./src/components/buttons/button-embed-edit.jsx");

var _buttonEmbedEdit2 = _interopRequireDefault(_buttonEmbedEdit);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonKeystroke = __webpack_require__(/*! ../base/button-keystroke.js */ "./src/components/base/button-keystroke.js");

var _buttonKeystroke2 = _interopRequireDefault(_buttonKeystroke);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonEmbed class provides functionality for creating and editing an embed link in a document.
 * ButtonEmbed renders in two different modes:
 *
 * - Normal: Just a button that allows to switch to the edition mode
 * - Exclusive: The ButtonEmbedEdit UI with all the link edition controls.
 *
 * @class ButtonEmbed
 * @uses ButtonKeystroke
 */
var ButtonEmbed = function (_React$Component) {
	_inherits(ButtonEmbed, _React$Component);

	function ButtonEmbed() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonEmbed);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonEmbed.__proto__ || Object.getPrototypeOf(ButtonEmbed)).call.apply(_ref, [this].concat(args))), _this), _this._requestExclusive = function () {
			_this.props.requestExclusive(ButtonEmbed.key);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}
	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonEmbed
  * @method getDefaultProps
  * @return {Object} The default properties.
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default embed
  * @memberof ButtonEmbed
  * @property {String} key
  * @static
  */


	_createClass(ButtonEmbed, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonEmbed
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			if (this.props.renderExclusive) {
				return _react2.default.createElement(_buttonEmbedEdit2.default, this.props);
			} else {
				return _react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.link,
						className: 'ae-button',
						'data-type': 'button-embed',
						onClick: this._requestExclusive,
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.link },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'plus' })
				);
			}
		}

		/**
   * Requests the link button to be rendered in exclusive mode to allow the embedding of a link.
   *
   * @instance
   * @memberof ButtonEmbed
   * @method _requestExclusive
   * @protected
   */

	}]);

	return ButtonEmbed;
}(_react2.default.Component);

ButtonEmbed.defaultProps = {
	keystroke: {
		fn: '_requestExclusive',
		keys: CKEDITOR.CTRL + CKEDITOR.SHIFT + 76 /* L*/
	}
};
ButtonEmbed.key = 'embed';
exports.default = (0, _buttonKeystroke2.default)(ButtonEmbed);

/***/ }),

/***/ "./src/components/buttons/button-h1.jsx":
/*!**********************************************!*\
  !*** ./src/components/buttons/button-h1.jsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonActionStyle = __webpack_require__(/*! ../base/button-action-style.js */ "./src/components/base/button-action-style.js");

var _buttonActionStyle2 = _interopRequireDefault(_buttonActionStyle);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonH1 class provides wraps a selection in `h1` element.
 *
 * @class ButtonH1
 * @uses ButtonActionStyle
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonH1 = function (_React$Component) {
	_inherits(ButtonH1, _React$Component);

	function ButtonH1() {
		_classCallCheck(this, ButtonH1);

		return _possibleConstructorReturn(this, (ButtonH1.__proto__ || Object.getPrototypeOf(ButtonH1)).apply(this, arguments));
	}

	_createClass(ButtonH1, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonH1
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonH1
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.h1,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-h1',
					onClick: this.applyStyle,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.h1 },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'h1' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default h1
   * @memberof ButtonH1
   * @property {String} key
   * @static
   */

	}]);

	return ButtonH1;
}(_react2.default.Component);

ButtonH1.defaultProps = {
	style: {
		element: 'h1'
	}
};
ButtonH1.key = 'h1';
exports.default = (0, _buttonActionStyle2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonH1)));

/***/ }),

/***/ "./src/components/buttons/button-h2.jsx":
/*!**********************************************!*\
  !*** ./src/components/buttons/button-h2.jsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonActionStyle = __webpack_require__(/*! ../base/button-action-style.js */ "./src/components/base/button-action-style.js");

var _buttonActionStyle2 = _interopRequireDefault(_buttonActionStyle);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonH2 class provides wraps a selection in `h2` element.
 *
 * @class ButtonH2
 * @uses ButtonActionStyle
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonH2 = function (_React$Component) {
	_inherits(ButtonH2, _React$Component);

	function ButtonH2() {
		_classCallCheck(this, ButtonH2);

		return _possibleConstructorReturn(this, (ButtonH2.__proto__ || Object.getPrototypeOf(ButtonH2)).apply(this, arguments));
	}

	_createClass(ButtonH2, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonH2
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonH2
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.h2,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-h2',
					onClick: this.applyStyle,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.h2 },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'h2' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default h2
   * @memberof ButtonH2
   * @property {String} key
   * @static
   */

	}]);

	return ButtonH2;
}(_react2.default.Component);

ButtonH2.defaultProps = {
	style: {
		element: 'h2'
	}
};
ButtonH2.key = 'h2';
exports.default = (0, _buttonActionStyle2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonH2)));

/***/ }),

/***/ "./src/components/buttons/button-hline.jsx":
/*!*************************************************!*\
  !*** ./src/components/buttons/button-hline.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonHline class provides inserts horizontal line.
 *
 * @class ButtonHline
 * @uses ButtonCommand
 * @uses ButtonStyle
 */
var ButtonHline = function (_React$Component) {
	_inherits(ButtonHline, _React$Component);

	function ButtonHline() {
		_classCallCheck(this, ButtonHline);

		return _possibleConstructorReturn(this, (ButtonHline.__proto__ || Object.getPrototypeOf(ButtonHline)).apply(this, arguments));
	}

	_createClass(ButtonHline, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonHline
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonHline
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.horizontalrule,
					className: 'ae-button',
					'data-type': 'button-hline',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.horizontalrule },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'hr' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default hline
   * @memberof ButtonHline
   * @property {String} key
   * @static
   */

	}]);

	return ButtonHline;
}(_react2.default.Component);

ButtonHline.defaultProps = {
	command: 'horizontalrule',
	style: {
		element: 'hr'
	}
};
ButtonHline.key = 'hline';
exports.default = (0, _buttonCommand2.default)((0, _buttonStyle2.default)(ButtonHline));

/***/ }),

/***/ "./src/components/buttons/button-icon.jsx":
/*!************************************************!*\
  !*** ./src/components/buttons/button-icon.jsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = ButtonIcon;

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ButtonIcon(_ref) {
	var editor = _ref.editor,
	    symbol = _ref.symbol,
	    _ref$className = _ref.className,
	    className = _ref$className === undefined ? '' : _ref$className;

	var nativeEditor = editor.get('nativeEditor');
	var spritemap = nativeEditor.config.spritemap || '';
	var path = spritemap + '#' + symbol;
	var classNamePrefix = className ? ' ' + className : '';
	var combinedClassName = 'ae-svg-icon' + classNamePrefix;

	return _react2.default.createElement(
		'svg',
		{ className: combinedClassName, width: '18', height: '18' },
		_react2.default.createElement('use', { href: path })
	);
}

/***/ }),

/***/ "./src/components/buttons/button-image-align-center.jsx":
/*!**************************************************************!*\
  !*** ./src/components/buttons/button-image-align-center.jsx ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonImageAlignCenter class provides functionality for aligning an image in the center.
 *
 * @class ButtonImageAlignCenter
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonImageAlignCenter = function (_React$Component) {
	_inherits(ButtonImageAlignCenter, _React$Component);

	function ButtonImageAlignCenter() {
		_classCallCheck(this, ButtonImageAlignCenter);

		return _possibleConstructorReturn(this, (ButtonImageAlignCenter.__proto__ || Object.getPrototypeOf(ButtonImageAlignCenter)).apply(this, arguments));
	}

	_createClass(ButtonImageAlignCenter, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonImageAlignCenter
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonImageAlignCenter
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.alignCenter,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-image-align-center',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.alignCenter },
				_react2.default.createElement(_buttonIcon2.default, {
					editor: this.props.editor,
					symbol: 'align-image-center'
				})
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default imageCenter
   * @memberof ButtonImageAlignCenter
   * @property {String} key
   * @static
   */

	}]);

	return ButtonImageAlignCenter;
}(_react2.default.Component);

ButtonImageAlignCenter.defaultProps = {
	command: 'justifycenter'
};
ButtonImageAlignCenter.key = 'imageCenter';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonImageAlignCenter)));

/***/ }),

/***/ "./src/components/buttons/button-image-align-left.jsx":
/*!************************************************************!*\
  !*** ./src/components/buttons/button-image-align-left.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonImageAlignLeft class provides functionality for aligning an image on left.
 *
 * @class ButtonImageAlignLeft
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonImageAlignLeft = function (_React$Component) {
	_inherits(ButtonImageAlignLeft, _React$Component);

	function ButtonImageAlignLeft() {
		_classCallCheck(this, ButtonImageAlignLeft);

		return _possibleConstructorReturn(this, (ButtonImageAlignLeft.__proto__ || Object.getPrototypeOf(ButtonImageAlignLeft)).apply(this, arguments));
	}

	_createClass(ButtonImageAlignLeft, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonImageAlignLeft
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonImageAlignLeft
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.alignLeft,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-image-align-left',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.alignLeft },
				_react2.default.createElement(_buttonIcon2.default, {
					editor: this.props.editor,
					symbol: 'align-image-left'
				})
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default imageLeft
   * @memberof ButtonImageAlignLeft
   * @property {String} key
   * @static
   */

	}]);

	return ButtonImageAlignLeft;
}(_react2.default.Component);

ButtonImageAlignLeft.defaultProps = {
	command: 'justifyleft'
};
ButtonImageAlignLeft.key = 'imageLeft';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonImageAlignLeft)));

/***/ }),

/***/ "./src/components/buttons/button-image-align-right.jsx":
/*!*************************************************************!*\
  !*** ./src/components/buttons/button-image-align-right.jsx ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonImageAlignRight class provides functionality for aligning an image on right.
 *
 * @class ButtonImageAlignRight
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonImageAlignRight = function (_React$Component) {
	_inherits(ButtonImageAlignRight, _React$Component);

	function ButtonImageAlignRight() {
		_classCallCheck(this, ButtonImageAlignRight);

		return _possibleConstructorReturn(this, (ButtonImageAlignRight.__proto__ || Object.getPrototypeOf(ButtonImageAlignRight)).apply(this, arguments));
	}

	_createClass(ButtonImageAlignRight, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonImageAlignRight
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonImageAlignRight
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.alignRight,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-image-align-right',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.alignRight },
				_react2.default.createElement(_buttonIcon2.default, {
					editor: this.props.editor,
					symbol: 'align-image-right'
				})
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default imageRight
   * @memberof ButtonImageAlignRight
   * @property {String} key
   * @static
   */

	}]);

	return ButtonImageAlignRight;
}(_react2.default.Component);

ButtonImageAlignRight.defaultProps = {
	command: 'justifyright'
};
ButtonImageAlignRight.key = 'imageRight';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonImageAlignRight)));

/***/ }),

/***/ "./src/components/buttons/button-image.jsx":
/*!*************************************************!*\
  !*** ./src/components/buttons/button-image.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonImage class inserts an image to the content.
 *
 * @class ButtonImage
 */
var ButtonImage = function (_React$Component) {
	_inherits(ButtonImage, _React$Component);

	function ButtonImage(props) {
		_classCallCheck(this, ButtonImage);

		var _this = _possibleConstructorReturn(this, (ButtonImage.__proto__ || Object.getPrototypeOf(ButtonImage)).call(this, props));

		_this.handleClick = function () {
			_this.fileInput.current.click();
		};

		_this.fileInput = _react2.default.createRef();
		return _this;
	}

	/**
  * Lifecycle. Renders the UI of the button.
  *
  * @instance
  * @memberof ButtonImage
  * @method render
  * @return {Object} The content which should be rendered.
  */

	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default image
  * @memberof ButtonImage
  * @property {String} key
  * @static
  */


	_createClass(ButtonImage, [{
		key: 'render',
		value: function render() {
			var inputSyle = { display: 'none' };

			return _react2.default.createElement(
				'div',
				null,
				_react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.image,
						className: 'ae-button',
						'data-type': 'button-image',
						onClick: this.handleClick,
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.image },
					_react2.default.createElement(_buttonIcon2.default, {
						editor: this.props.editor,
						symbol: 'document-image'
					})
				),
				_react2.default.createElement('input', {
					accept: 'image/*',
					onChange: this._onInputChange,
					ref: this.fileInput,
					style: inputSyle,
					type: 'file'
				})
			);
		}

		/**
   * Simulates click on the input element. This will open browser's native file open dialog.
   *
   * @instance
   * @memberof ButtonImage
   * @method handleClick
   * @param {SyntheticEvent} event The received click event on the button.
   */

	}, {
		key: '_onInputChange',


		/**
   * On input change, reads the chosen file and fires an event `beforeImageAdd` with the image which will be added
   * to the content. The image file will be passed in the `imageFiles` property.
   * If any of the listeners returns `false` or cancels the event, the image won't be added to the content.
   * Otherwise, an event `imageAdd` will be fired with the inserted element into the editable area.
   * The passed params will be:
   * - `el` - the created img element
   * - `file` - the original image file from the input element
   *
   * @fires ButtonImage#beforeImageAdd
   * @fires ButtonImage#imageAdd
   * @instance
   * @memberof ButtonImage
   * @method _onInputChange
   * @protected
   */
		value: function _onInputChange() {
			var _this2 = this;

			var inputEl = this.fileInput.current;

			// On IE11 the function might be called with an empty array of
			// files. In such a case, no actions will be taken.
			if (!inputEl.files.length) {
				return;
			}

			var reader = new FileReader();
			var file = inputEl.files[0];

			reader.onload = function (event) {
				var editor = _this2.props.editor.get('nativeEditor');

				var result = editor.fire('beforeImageAdd', {
					imageFiles: file
				});

				if (result) {
					var el = CKEDITOR.dom.element.createFromHtml('<img src="' + event.target.result + '">');

					editor.insertElement(el);

					editor.fire('actionPerformed', _this2);

					var imageData = {
						el: el,
						file: file
					};

					editor.fire('imageAdd', imageData);
				}
			};

			reader.readAsDataURL(file);

			inputEl.value = '';
		}
	}]);

	return ButtonImage;
}(_react2.default.Component);

ButtonImage.key = 'image';
exports.default = ButtonImage;

/***/ }),

/***/ "./src/components/buttons/button-indent-block.jsx":
/*!********************************************************!*\
  !*** ./src/components/buttons/button-indent-block.jsx ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonIndentBlock class provides functionality for indenting the selected blocks.
 *
 * @class ButtonIndentBlock
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonIndentBlock = function (_React$Component) {
	_inherits(ButtonIndentBlock, _React$Component);

	function ButtonIndentBlock() {
		_classCallCheck(this, ButtonIndentBlock);

		return _possibleConstructorReturn(this, (ButtonIndentBlock.__proto__ || Object.getPrototypeOf(ButtonIndentBlock)).apply(this, arguments));
	}

	_createClass(ButtonIndentBlock, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonIndentBlock
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonIndentBlock
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.indent,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-indent-block',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.indent },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'indent-less' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default indentBlock
   * @memberof ButtonIndentBlock
   * @property {String} key
   * @static
   */

	}]);

	return ButtonIndentBlock;
}(_react2.default.Component);

ButtonIndentBlock.defaultProps = {
	command: 'indent'
};
ButtonIndentBlock.key = 'indentBlock';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonIndentBlock)));

/***/ }),

/***/ "./src/components/buttons/button-italic.jsx":
/*!**************************************************!*\
  !*** ./src/components/buttons/button-italic.jsx ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonKeystroke = __webpack_require__(/*! ../base/button-keystroke.js */ "./src/components/base/button-keystroke.js");

var _buttonKeystroke2 = _interopRequireDefault(_buttonKeystroke);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonItalic class provides functionality for styling an selection with italic (em) style.
 *
 * @class ButtonItalic
 * @uses ButtonCommand
 * @uses ButtonKeystroke
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonItalic = function (_React$Component) {
	_inherits(ButtonItalic, _React$Component);

	function ButtonItalic() {
		_classCallCheck(this, ButtonItalic);

		return _possibleConstructorReturn(this, (ButtonItalic.__proto__ || Object.getPrototypeOf(ButtonItalic)).apply(this, arguments));
	}

	_createClass(ButtonItalic, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonItalic
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonItalic
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.italic,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-italic',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.italic },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'italic' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default italic
   * @memberof ButtonItalic
   * @property {String} key
   * @static
   */

	}]);

	return ButtonItalic;
}(_react2.default.Component);

ButtonItalic.defaultProps = {
	command: 'italic',
	keystroke: {
		fn: 'execCommand',
		keys: CKEDITOR.CTRL + 73 /* I*/
	},
	style: 'coreStyles_italic'
};
ButtonItalic.key = 'italic';
exports.default = (0, _buttonCommand2.default)((0, _buttonKeystroke2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonItalic))));

/***/ }),

/***/ "./src/components/buttons/button-item-selector-audio.jsx":
/*!***************************************************************!*\
  !*** ./src/components/buttons/button-item-selector-audio.jsx ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class ButtonItemSelectorAudio
 * @uses ButtonCommand
 */
var ButtonItemSelectorAudio = function (_React$Component) {
	_inherits(ButtonItemSelectorAudio, _React$Component);

	function ButtonItemSelectorAudio() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonItemSelectorAudio);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonItemSelectorAudio.__proto__ || Object.getPrototypeOf(ButtonItemSelectorAudio)).call.apply(_ref, [this].concat(args))), _this), _this._handleClick = function () {
			_this.execCommand(null);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(ButtonItemSelectorAudio, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'button',
				{
					className: 'ae-button',
					'data-type': 'button-audio',
					onClick: this._handleClick,
					tabIndex: this.props.tabIndex },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'audio' })
			);
		}
	}]);

	return ButtonItemSelectorAudio;
}(_react2.default.Component);

ButtonItemSelectorAudio.defaultProps = {
	command: 'audioselector'
};
ButtonItemSelectorAudio.key = 'audio';
ButtonItemSelectorAudio.propTypes = {
	editor: _propTypes2.default.object.isRequired
};
exports.default = (0, _buttonCommand2.default)(ButtonItemSelectorAudio);

/***/ }),

/***/ "./src/components/buttons/button-item-selector-image.jsx":
/*!***************************************************************!*\
  !*** ./src/components/buttons/button-item-selector-image.jsx ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class ButtonItemSelectorImage
 * @uses ButtonCommand
 */
var ButtonItemSelectorImage = function (_React$Component) {
	_inherits(ButtonItemSelectorImage, _React$Component);

	function ButtonItemSelectorImage() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonItemSelectorImage);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonItemSelectorImage.__proto__ || Object.getPrototypeOf(ButtonItemSelectorImage)).call.apply(_ref, [this].concat(args))), _this), _this._handleClick = function () {
			_this.execCommand(null);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(ButtonItemSelectorImage, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'button',
				{
					className: 'ae-button',
					'data-type': 'button-image',
					onClick: this._handleClick,
					tabIndex: this.props.tabIndex },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'picture' })
			);
		}
	}]);

	return ButtonItemSelectorImage;
}(_react2.default.Component);

ButtonItemSelectorImage.defaultProps = {
	command: 'imageselector'
};
ButtonItemSelectorImage.key = 'image';
ButtonItemSelectorImage.propTypes = {
	editor: _propTypes2.default.object.isRequired
};
exports.default = (0, _buttonCommand2.default)(ButtonItemSelectorImage);

/***/ }),

/***/ "./src/components/buttons/button-item-selector-video.jsx":
/*!***************************************************************!*\
  !*** ./src/components/buttons/button-item-selector-video.jsx ***!
  \***************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * @class ButtonItemSelectorVideo
 * @uses ButtonCommand
 */
var ButtonItemSelectorVideo = function (_React$Component) {
	_inherits(ButtonItemSelectorVideo, _React$Component);

	function ButtonItemSelectorVideo() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonItemSelectorVideo);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonItemSelectorVideo.__proto__ || Object.getPrototypeOf(ButtonItemSelectorVideo)).call.apply(_ref, [this].concat(args))), _this), _this._handleClick = function () {
			_this.execCommand(null);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}

	_createClass(ButtonItemSelectorVideo, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'button',
				{
					className: 'ae-button',
					'data-type': 'button-video',
					onClick: this._handleClick,
					tabIndex: this.props.tabIndex },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'video' })
			);
		}
	}]);

	return ButtonItemSelectorVideo;
}(_react2.default.Component);

ButtonItemSelectorVideo.defaultProps = {
	command: 'videoselector'
};
ButtonItemSelectorVideo.key = 'video';
ButtonItemSelectorVideo.propTypes = {
	editor: _propTypes2.default.object.isRequired
};
exports.default = (0, _buttonCommand2.default)(ButtonItemSelectorVideo);

/***/ }),

/***/ "./src/components/buttons/button-link-autocomplete-list.jsx":
/*!******************************************************************!*\
  !*** ./src/components/buttons/button-link-autocomplete-list.jsx ***!
  \******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonDropdown = __webpack_require__(/*! ./button-dropdown.jsx */ "./src/components/buttons/button-dropdown.jsx");

var _buttonDropdown2 = _interopRequireDefault(_buttonDropdown);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonLinkAutocompleteList class provides functionality for showing a list of
 * items that can be selected for the link.
 *
 * @class ButtonLinkAutocompleteList
 * @uses WidgetFocusManager
 */
var ButtonLinkAutocompleteList = function (_React$Component) {
	_inherits(ButtonLinkAutocompleteList, _React$Component);

	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonLinkAutocompleteList
  * @method getDefaultProps
  * @return {Object} The default properties.
  */
	function ButtonLinkAutocompleteList(props) {
		_classCallCheck(this, ButtonLinkAutocompleteList);

		var _this = _possibleConstructorReturn(this, (ButtonLinkAutocompleteList.__proto__ || Object.getPrototypeOf(ButtonLinkAutocompleteList)).call(this, props));

		_this.state = {
			items: []
		};
		return _this;
	}

	/**
  * Lifecycle. Invoked when a component is receiving new props.
  * This method is not called for the initial render.
  *
  * @instance
  * @memberof ButtonLinkAutocompleteList
  * @method componentWillReceiveProps
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default buttonLinkAutocompleteList
  * @memberof ButtonLinkAutocompleteList
  * @property {String} key
  * @static
  */


	_createClass(ButtonLinkAutocompleteList, [{
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps(nextProps) {
			if (!nextProps.term || nextProps.term !== this.props.term) {
				clearTimeout(this._timeout);

				if (nextProps.term) {
					this._timeout = setTimeout(this._updateItems, this.props.delay);
				} else {
					this.setState({
						items: []
					});
				}
			}

			if (nextProps.autocompleteSelected) {
				setTimeout(this.focus, 0);
				this.props.setAutocompleteState({
					selected: false
				});
			}
		}

		/**
   * Lifecycle. Invoked immediately before a component is unmounted from the DOM.
   *
   * @instance
   * @memberof ButtonLinkAutocompleteList
   * @method componentWillUnmount
   */

	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			clearTimeout(this._timeout);
		}

		/**
   * Lifecycle. Renders the UI of the list.
   *
   * @instance
   * @memberof ButtonLinkAutocompleteList
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			if (!this.props.expanded || !this.state.items.length) {
				return null;
			}

			return _react2.default.createElement(
				_buttonDropdown2.default,
				null,
				this._renderAutocompleteItems(this.state.items)
			);
		}

		/**
   * Lifecycle. Invoked before rendering when new props or state are being received.
   * This method is not called for the initial render or when forceUpdate is used.
   *
   * @instance
   * @memberof ButtonLinkAutocompleteList
   * @method  shouldComponentUpdate
   * @return {Boolean} Returns false when the transition to the new props and state will not
   * require a component update.
   */

	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(nextProps, nextState) {
			return nextProps.expanded !== this.props.expanded || nextProps.term !== this.props.term || nextState.items !== this.state.items;
		}

		/**
   * Renders a set of list items for the provided items
   *
   * @instance
   * @memberof ButtonLinkAutocompleteList
   * @method _renderAutocompleteItems
   * @param {Array} items List of autocomplete items to render
   * @protected
   * @return {Array} Rendered list item instances
   */

	}, {
		key: '_renderAutocompleteItems',
		value: function _renderAutocompleteItems(items) {
			var _this2 = this;

			items = items || [];

			var handleLinkAutocompleteClick = this.props.handleLinkAutocompleteClick;

			return items.map(function (item) {
				var className = _this2.props.term === item.url ? 'ae-toolbar-element active' : 'ae-toolbar-element';

				return _react2.default.createElement(
					'li',
					{ key: item.url, role: 'option' },
					_react2.default.createElement(
						'button',
						{
							className: className,
							onClick: handleLinkAutocompleteClick,
							'data-value': item.url },
						item.title
					)
				);
			});
		}

		/**
   * Retrieves the data according to {this.props.term} and calls setState() with the returned data
   *
   * @instance
   * @memberof ButtonLinkAutocompleteList
   * @method _updateItems
   * @protected
   */

	}, {
		key: '_updateItems',
		value: function _updateItems() {
			var _this3 = this;

			if (!this.props.term) {
				return;
			}

			var promise = Promise.resolve(this.props.data(this.props.term));

			promise.then(function (items) {
				if (items.length) {
					!_this3.props.expanded && _this3.props.toggleDropdown();
				}

				_this3.setState({
					items: items
				});
			});
		}
	}]);

	return ButtonLinkAutocompleteList;
}(_react2.default.Component);

ButtonLinkAutocompleteList.defaultProps = {
	circular: false,
	data: [],
	delay: 100,
	descendants: '.ae-toolbar-element',
	keys: {
		dismiss: [27],
		dismissNext: [39],
		dismissPrev: [37],
		next: [40],
		prev: [38]
	}
};
ButtonLinkAutocompleteList.key = 'buttonLinkAutocompleteList';
exports.default = (0, _widgetFocusManager2.default)(ButtonLinkAutocompleteList);

/***/ }),

/***/ "./src/components/buttons/button-link-browse.jsx":
/*!*******************************************************!*\
  !*** ./src/components/buttons/button-link-browse.jsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonKeystroke = __webpack_require__(/*! ../base/button-keystroke.js */ "./src/components/base/button-keystroke.js");

var _buttonKeystroke2 = _interopRequireDefault(_buttonKeystroke);

var _buttonLink = __webpack_require__(/*! ./button-link.jsx */ "./src/components/buttons/button-link.jsx");

var _buttonLink2 = _interopRequireDefault(_buttonLink);

var _buttonLinkEditBrowse = __webpack_require__(/*! ./button-link-edit-browse.jsx */ "./src/components/buttons/button-link-edit-browse.jsx");

var _buttonLinkEditBrowse2 = _interopRequireDefault(_buttonLinkEditBrowse);

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonLinkBrowse class provides functionality for changing text color in a document.
 *
 * @uses ButtonKeystroke
 * @uses ButtonProps
 * @uses ButtonStateClasses
 *
 * @class ButtonLinkBrowse
 */
var ButtonLinkBrowse = function (_React$Component) {
	_inherits(ButtonLinkBrowse, _React$Component);

	function ButtonLinkBrowse() {
		_classCallCheck(this, ButtonLinkBrowse);

		return _possibleConstructorReturn(this, (ButtonLinkBrowse.__proto__ || Object.getPrototypeOf(ButtonLinkBrowse)).apply(this, arguments));
	}

	_createClass(ButtonLinkBrowse, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			if (this.props.renderExclusive) {
				this.props = this.mergeButtonCfgProps();

				return _react2.default.createElement(_buttonLinkEditBrowse2.default, this.props);
			} else {
				return _react2.default.createElement(_buttonLink2.default, this.props);
			}
		}

		/**
   * Requests the link button to be rendered in exclusive mode to allow the creation of a link.
   *
   * @protected
   * @method _requestExclusive
   */

	}, {
		key: '_requestExclusive',
		value: function _requestExclusive() {
			this.props.requestExclusive(ButtonLinkBrowse.key);
		}
	}]);

	return ButtonLinkBrowse;
}(_react2.default.Component);

ButtonLinkBrowse.defaultProps = {
	keystroke: {
		fn: '_requestExclusive',
		keys: CKEDITOR.CTRL + 76 /* L*/
	}
};
ButtonLinkBrowse.key = 'linkBrowse';
ButtonLinkBrowse.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired,

	/**
  * The label that should be used for accessibility purposes.
  *
  * @property {String} label
  */
	label: _propTypes2.default.string,

	/**
  * The tabIndex of the button in its toolbar current state. A value other than -1
  * means that the button has focus and is the active element.
  *
  * @property {Number} tabIndex
  */
	tabIndex: _propTypes2.default.number
};
exports.default = (0, _buttonProps2.default)((0, _buttonStateClasses2.default)((0, _buttonKeystroke2.default)(ButtonLinkBrowse)));

/***/ }),

/***/ "./src/components/buttons/button-link-edit-browse.jsx":
/*!************************************************************!*\
  !*** ./src/components/buttons/button-link-edit-browse.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lang = __webpack_require__(/*! ../../oop/lang */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonLinkEdit = __webpack_require__(/*! ./button-link-edit.jsx */ "./src/components/buttons/button-link-edit.jsx");

var _buttonLinkEdit2 = _interopRequireDefault(_buttonLinkEdit);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The LinkEditBrowse class provides functionality for creating and editing a link in a document,
 * and also allows to link to an existing file in DM.
 * Provides UI for creating, editing and removing a link.
 *
 * @class ButtonLinkEditBrowse
 */
var ButtonLinkEditBrowse = function (_React$Component) {
	_inherits(ButtonLinkEditBrowse, _React$Component);

	/**
  *
  * @inheritDoc
  */
	function ButtonLinkEditBrowse(props, context) {
		_classCallCheck(this, ButtonLinkEditBrowse);

		var _this = _possibleConstructorReturn(this, (ButtonLinkEditBrowse.__proto__ || Object.getPrototypeOf(ButtonLinkEditBrowse)).call(this, props, context));

		_this._browseClick = function () {
			var editor = _this.props.editor.get('nativeEditor');
			var url = editor.config.documentBrowseLinkUrl;
			var browseLinkCallback = editor.config.documentBrowseLinkCallback;
			var linkTarget = _this.linkEditButtonRef.current.state.linkTarget;
			var changeLinkCallback = function changeLinkCallback(selectedItem) {
				_this._updateLink(selectedItem.value, linkTarget, selectedItem.href);
			};

			if (_lang2.default.isFunction(browseLinkCallback)) {
				browseLinkCallback.apply(null, [editor, url, changeLinkCallback]);
			}
		};

		_this._updateLink = function (linkHref, linkTarget, linkTitle) {
			var editor = _this.props.editor.get('nativeEditor');
			var linkUtils = new CKEDITOR.Link(editor, { appendProtocol: false });
			var linkAttrs = {
				target: linkTarget
			};
			var modifySelection = { advance: true };

			if (linkHref) {
				if (editor.plugins && editor.plugins.creole && !linkTitle) {
					linkHref = location.origin + linkHref;
				}

				if (_this.state.element) {
					linkAttrs.href = linkHref;

					linkUtils.update(linkAttrs, _this.state.element, modifySelection);
				} else {
					linkUtils.create(linkHref, linkAttrs, modifySelection);
				}

				editor.fire('actionPerformed', _this);
			}
		};

		var link = new CKEDITOR.Link(_this.props.editor.get('nativeEditor')).getFromSelection();

		var href = link ? link.getAttribute('href') : '';

		_this.linkEditButtonRef = _react2.default.createRef();

		_this.state = {
			element: link,
			linkHref: href
		};
		return _this;
	}

	/**
  * Lifecycle. Renders the UI of the button.
  *
  * @method render
  * @return {Object} The content which should be rendered.
  */


	_createClass(ButtonLinkEditBrowse, [{
		key: 'render',
		value: function render() {
			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-link-edit-browse' },
				_react2.default.createElement(_buttonLinkEdit2.default, _extends({ ref: this.linkEditButtonRef }, this.props)),
				_react2.default.createElement(
					'button',
					{
						'aria-label': 'Browse',
						className: 'ae-button',
						onClick: this._browseClick,
						title: 'browse' },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'folder' })
				)
			);
		}

		/**
   * Opens an item selector dialog.
   *
   * @protected
   * @method _browseClick
   */


		/**
   * Updates the link in the editor element. If the element didn't exist previously, it will
   * create a new <a> element with the href specified in the link input.
   *
   * @protected
   * @method _updateLink
   * @param {String} linkHref href value for the link
   * @param {String} linkTarget target value for the link
   * @param {String} linkTitle if the link is a title that points to a wiki page (only works for creole)
   */

	}]);

	return ButtonLinkEditBrowse;
}(_react2.default.Component);

ButtonLinkEditBrowse.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired
};
ButtonLinkEditBrowse.key = 'linkEditBrowse';
exports.default = ButtonLinkEditBrowse;

/***/ }),

/***/ "./src/components/buttons/button-link-edit.jsx":
/*!*****************************************************!*\
  !*** ./src/components/buttons/button-link-edit.jsx ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonLinkAutocompleteList = __webpack_require__(/*! ./button-link-autocomplete-list.jsx */ "./src/components/buttons/button-link-autocomplete-list.jsx");

var _buttonLinkAutocompleteList2 = _interopRequireDefault(_buttonLinkAutocompleteList);

var _buttonLinkTargetEdit = __webpack_require__(/*! ./button-link-target-edit.jsx */ "./src/components/buttons/button-link-target-edit.jsx");

var _buttonLinkTargetEdit2 = _interopRequireDefault(_buttonLinkTargetEdit);

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _widgetDropdown = __webpack_require__(/*! ../base/widget-dropdown.js */ "./src/components/base/widget-dropdown.js");

var _widgetDropdown2 = _interopRequireDefault(_widgetDropdown);

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonLinkEdit class provides functionality for creating and editing a link in a document.
 * Provides UI for creating, editing and removing a link.
 *
 * @class ButtonLinkEdit
 * @uses ButtonCfgProps
 * @uses WidgetDropdown
 * @uses WidgetFocusManager
 */
var ButtonLinkEdit = function (_React$Component) {
	_inherits(ButtonLinkEdit, _React$Component);

	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonLinkEdit
  * @method getDefaultProps
  * @return {Object} The default properties.
  */
	function ButtonLinkEdit(props) {
		_classCallCheck(this, ButtonLinkEdit);

		var _this = _possibleConstructorReturn(this, (ButtonLinkEdit.__proto__ || Object.getPrototypeOf(ButtonLinkEdit)).call(this, props));

		_this._clearLink = function () {
			_this.setState({
				linkHref: ''
			});

			_this._focusLinkInput();
		};

		_this._handleKeyDown = function (event) {
			if (event.keyCode === 13 || event.keyCode === 27) {
				event.preventDefault();
			}

			if (event.keyCode === 13) {
				_this._updateLink();
			} else if (event.keyCode === 40) {
				_this.setState({
					autocompleteSelected: true
				});
			} else if (event.keyCode === 27) {
				var editor = _this.props.editor.get('nativeEditor');

				new CKEDITOR.Link(editor).advanceSelection();

				_this.props.editor.get('nativeEditor').fire('actionPerformed', _this);
			}
		};

		_this._handleLinkHrefChange = function (event) {
			_this.setState({
				linkHref: event.target.value
			});

			_this._focusLinkInput();
		};

		_this._handleLinkTargetChange = function (event) {
			_this.setState({
				itemDropdown: null,
				linkTarget: event.target.getAttribute('data-value')
			});

			_this._focusLinkInput();
		};

		_this._removeLink = function () {
			var editor = _this.props.editor.get('nativeEditor');
			var linkUtils = new CKEDITOR.Link(editor);
			var selection = editor.getSelection();
			var bookmarks = selection.createBookmarks();

			linkUtils.remove(_this.state.element, { advance: true });

			selection.selectBookmarks(bookmarks);

			// We need to cancelExclusive with the bound parameters in case the button is used
			// inside another in exclusive mode (such is the case of the link button)
			_this.props.cancelExclusive();

			editor.fire('actionPerformed', _this);
		};

		_this._updateLink = function () {
			var editor = _this.props.editor.get('nativeEditor');
			var linkUtils = new CKEDITOR.Link(editor, {
				appendProtocol: _this.props.appendProtocol
			});
			var linkAttrs = {
				target: _this.state.linkTarget
			};
			var modifySelection = { advance: true };

			if (_this.state.linkHref) {
				if (_this.state.element) {
					linkAttrs.href = _this.state.linkHref;

					linkUtils.update(linkAttrs, _this.state.element, modifySelection);
				} else {
					linkUtils.create(_this.state.linkHref, linkAttrs, modifySelection);
				}

				editor.fire('actionPerformed', _this);
			}

			// We need to cancelExclusive with the bound parameters in case the button is used
			// inside another in exclusive mode (such is the case of the link button)
			_this.props.cancelExclusive();
		};

		_this.linkInput = _react2.default.createRef();
		_this.state = _this._getInitialState();
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
  *
  * Focuses on the link input to immediately allow editing. This should only happen if the component
  * is rendered in exclusive mode to prevent aggressive focus stealing.
  *
  * @instance
  * @memberof ButtonLinkEdit
  * @method componentDidMount
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default linkEdit
  * @memberof ButtonLinkEdit
  * @property {String} key
  * @static
  */


	_createClass(ButtonLinkEdit, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			if (this.props.renderExclusive || this.props.manualSelection) {
				// We need to wait for the next rendering cycle before focusing to avoid undesired
				// scrolls on the page
				this._focusLinkInput();
			}
		}

		/**
   * Lifecycle. Invoked when a component is receiving new props.
   * This method is not called for the initial render.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method componentWillReceiveProps
   */

	}, {
		key: 'componentWillReceiveProps',
		value: function componentWillReceiveProps() {
			this.setState(this._getInitialState());
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var targetSelector = {
				allowedTargets: this.props.allowedTargets,
				editor: this.props.editor,
				handleLinkTargetChange: this._handleLinkTargetChange,
				selectedTarget: this.state.linkTarget || AlloyEditor.Strings.linkTargetDefault
			};

			targetSelector = this.mergeDropdownProps(targetSelector, _buttonLinkTargetEdit2.default.key);

			var autocompleteDropdown = void 0;

			if (this.props.data) {
				var dataFn = this.props.data;

				if (!_lang2.default.isFunction(dataFn)) {
					var items = this.props.data;

					dataFn = function dataFn() {
						return items;
					};
				}

				var autocompleteDropdownProps = {
					autocompleteSelected: this.state.autocompleteSelected,
					data: dataFn,
					editor: this.props.editor,
					handleLinkAutocompleteClick: this._handleLinkAutocompleteClick,
					onDismiss: this.props.toggleDropdown,
					setAutocompleteState: this._setAutocompleteState,
					term: this.state.linkHref
				};

				autocompleteDropdownProps = this.mergeDropdownProps(autocompleteDropdownProps, _buttonLinkAutocompleteList2.default.key);

				autocompleteDropdown = _react2.default.createElement(_buttonLinkAutocompleteList2.default, autocompleteDropdownProps);
			}

			var buttonClearLink = void 0;

			if (this.state.linkHref) {
				buttonClearLink = _react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.clearInput,
						className: 'ae-button ae-button-clear',
						onClick: this._clearLink,
						title: AlloyEditor.Strings.clear },
					_react2.default.createElement(_buttonIcon2.default, {
						editor: this.props.editor,
						symbol: 'times-circle'
					})
				);
			}

			var placeholderProp = {};

			if (!CKEDITOR.env.ie && AlloyEditor.Strings) {
				placeholderProp.placeholder = AlloyEditor.Strings.editLink;
			}

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-edit-link' },
				_react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.removeLink,
						className: 'ae-button',
						disabled: !this.state.element,
						onClick: this._removeLink,
						title: AlloyEditor.Strings.remove },
					_react2.default.createElement(_buttonIcon2.default, {
						editor: this.props.editor,
						symbol: 'chain-broken'
					})
				),
				_react2.default.createElement(
					'div',
					{ className: 'ae-container-input xxl' },
					this.props.showTargetSelector && _react2.default.createElement(_buttonLinkTargetEdit2.default, targetSelector),
					_react2.default.createElement(
						'div',
						{ className: 'ae-container-input' },
						_react2.default.createElement('input', _extends({
							className: 'ae-input',
							onChange: this._handleLinkHrefChange,
							onKeyDown: this._handleKeyDown
						}, placeholderProp, {
							ref: this.linkInput,
							type: 'text',
							value: this.state.linkHref
						})),
						autocompleteDropdown
					),
					buttonClearLink
				),
				_react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.confirm,
						className: 'ae-button',
						disabled: !this._isValidState(),
						onClick: this._updateLink,
						title: AlloyEditor.Strings.confirm },
					_react2.default.createElement(_buttonIcon2.default, {
						editor: this.props.editor,
						symbol: 'check',
						className: 'ae-icon-svg-check'
					})
				)
			);
		}

		/**
   * The return value will be used as the initial value of this.state.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _getInitialState
   * @protected
   * @return {Object}
   */

	}, {
		key: '_getInitialState',
		value: function _getInitialState() {
			var _props = this.props,
			    editor = _props.editor,
			    defaultLinkTarget = _props.defaultLinkTarget;


			var link = new CKEDITOR.Link(editor.get('nativeEditor')).getFromSelection();
			var href = link ? link.getAttribute('href') : '';
			var target = link ? link.getAttribute('target') : defaultLinkTarget;

			return {
				autocompleteSelected: false,
				element: link,
				initialLink: {
					href: href,
					target: target
				},
				linkHref: href,
				linkTarget: target
			};
		}

		/**
   * Clears the link input. This only changes the component internal state, but does not
   * affect the link element of the editor. Only the _removeLink and _updateLink methods
   * are translated to the editor element.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _clearLink
   * @protected
   */

	}, {
		key: '_focusLinkInput',


		/**
   * Focuses the user cursor on the widget's input.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _focusLinkInput
   * @protected
   */
		value: function _focusLinkInput() {
			var instance = this;

			var focusLinkEl = function focusLinkEl() {
				instance.linkInput.current.focus();
			};

			if (window.requestAnimationFrame) {
				window.requestAnimationFrame(focusLinkEl);
			} else {
				setTimeout(focusLinkEl, 0);
			}
		}

		/**
   * Monitors key interaction inside the input element to respond to the keys:
   * - Enter: Creates/updates the link.
   * - Escape: Discards the changes.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _handleKeyDown
   * @param {SyntheticEvent} event The keyboard event.
   * @protected
   */


		/**
   * Updates the component state when the link input changes on user interaction.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _handleLinkHrefChange
   * @param {SyntheticEvent} event The change event.
   * @protected
   */


		/**
   * Updates the component state when the link target changes on user interaction.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _handleLinkTargetChange
   * @param {SyntheticEvent} event The click event.
   * @protected
   */

	}, {
		key: '_handleLinkAutocompleteClick',


		/**
   * Updates the component state when an autocomplete link result is selected by user interaction.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _handleLinkAutocompleteClick
   * @param {SyntheticEvent} event The click event.
   * @protected
   */
		value: function _handleLinkAutocompleteClick(event) {
			this.setState({
				itemDropdown: null,
				linkHref: event.target.getAttribute('data-value')
			});

			this._focusLinkInput();
		}

		/**
   * Verifies that the current link state is valid so the user can save the link. A valid state
   * means that we have a non-empty href and that either that or the link target are different
   * from the original link.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _isValidState
   * @protected
   * @return {Boolean} [description]
   */

	}, {
		key: '_isValidState',
		value: function _isValidState() {
			var validState = this.state.linkHref && (this.state.linkHref !== this.state.initialLink.href || this.state.linkTarget !== this.state.initialLink.target);

			return validState;
		}

		/**
   * Removes the link in the editor element.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _removeLink
   * @protected
   */

	}, {
		key: '_setAutocompleteState',


		/**
   * Update autocompleteSelected state to focus and select autocomplete´s dropdown
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _setAutocompleteState
   * @protected
   */
		value: function _setAutocompleteState(state) {
			this.setState({
				autocompleteSelected: state.selected
			});
		}

		/**
   * Updates the link in the editor element. If the element didn't exist previously, it will
   * create a new <a> element with the href specified in the link input.
   *
   * @instance
   * @memberof ButtonLinkEdit
   * @method _updateLink
   * @protected
   */

	}]);

	return ButtonLinkEdit;
}(_react2.default.Component);

ButtonLinkEdit.defaultProps = {
	appendProtocol: true,
	autocompleteUrl: '',
	circular: true,
	customIndexStart: true,
	defaultLinkTarget: '',
	descendants: '.ae-toolbar-element',
	keys: {
		dismiss: [27],
		dismissNext: [39],
		dismissPrev: [37],
		next: [40],
		prev: [38]
	},
	showTargetSelector: true
};
ButtonLinkEdit.key = 'linkEdit';
exports.default = (0, _buttonProps2.default)((0, _widgetDropdown2.default)((0, _widgetFocusManager2.default)(ButtonLinkEdit)));

/***/ }),

/***/ "./src/components/buttons/button-link-target-edit.jsx":
/*!************************************************************!*\
  !*** ./src/components/buttons/button-link-target-edit.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonTargetList = __webpack_require__(/*! ./button-target-list.jsx */ "./src/components/buttons/button-target-list.jsx");

var _buttonTargetList2 = _interopRequireDefault(_buttonTargetList);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonLinkTargetEdit class provides functionality for changing the target of a link
 * in the document.
 *
 * @class ButtonLinkTargetEdit
 */
var ButtonLinkTargetEdit = function (_React$Component) {
	_inherits(ButtonLinkTargetEdit, _React$Component);

	function ButtonLinkTargetEdit() {
		_classCallCheck(this, ButtonLinkTargetEdit);

		return _possibleConstructorReturn(this, (ButtonLinkTargetEdit.__proto__ || Object.getPrototypeOf(ButtonLinkTargetEdit)).apply(this, arguments));
	}

	_createClass(ButtonLinkTargetEdit, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonLinkTargetEdit
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var handleLinkTargetChange = this.props.handleLinkTargetChange;
			var allowedLinkTargets = this.props.allowedTargets;

			return _react2.default.createElement(
				'div',
				{
					className: 'ae-container-edit-link-target ae-container-dropdown ae-container-dropdown-medium ae-has-dropdown',
					tabIndex: '0' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': this.props.expanded,
						'aria-label': this.props.selectedTarget,
						className: 'ae-toolbar-element',
						onClick: this.props.toggleDropdown,
						role: 'combobox',
						tabIndex: this.props.tabIndex,
						title: this.props.selectedTarget },
					_react2.default.createElement(
						'div',
						{ className: 'ae-container' },
						_react2.default.createElement(
							'span',
							{ className: 'ae-container-dropdown-selected-item' },
							this.props.selectedTarget
						),
						_react2.default.createElement(_buttonIcon2.default, {
							editor: this.props.editor,
							symbol: 'caret-bottom'
						})
					)
				),
				this.props.expanded && _react2.default.createElement(_buttonTargetList2.default, {
					editor: this.props.editor,
					onDismiss: this.props.toggleDropdown,
					allowedLinkTargets: allowedLinkTargets,
					handleLinkTargetChange: handleLinkTargetChange,
					selectedTarget: this.props.selectedTarget
				})
			);
		}

		/**
   * Lifecycle. Invoked before rendering when new props or state are being received.
   * This method is not called for the initial render or when forceUpdate is used.
   *
   * @instance
   * @memberof ButtonLinkTargetEdit
   * @method  shouldComponentUpdate
   * @return {Boolean} Returns false when the transition to the new props and state will not
   * require a component update.
   */

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default linkTargetEdit
   * @memberof ButtonLinkTargetEdit
   * @property {String} key
   * @static
   */

	}, {
		key: 'shouldComponentUpdate',
		value: function shouldComponentUpdate(nextProps) {
			return nextProps.expanded !== this.props.expanded || nextProps.selectedTarget !== this.props.selectedTarget;
		}
	}]);

	return ButtonLinkTargetEdit;
}(_react2.default.Component);

ButtonLinkTargetEdit.key = 'linkTargetEdit';
exports.default = ButtonLinkTargetEdit;

/***/ }),

/***/ "./src/components/buttons/button-link.jsx":
/*!************************************************!*\
  !*** ./src/components/buttons/button-link.jsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonKeystroke = __webpack_require__(/*! ../base/button-keystroke.js */ "./src/components/base/button-keystroke.js");

var _buttonKeystroke2 = _interopRequireDefault(_buttonKeystroke);

var _buttonLinkEdit = __webpack_require__(/*! ./button-link-edit.jsx */ "./src/components/buttons/button-link-edit.jsx");

var _buttonLinkEdit2 = _interopRequireDefault(_buttonLinkEdit);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonLink class provides functionality for creating and editing a link in a document. ButtonLink
 * renders in two different modes:
 *
 * - Normal: Just a button that allows to switch to the edition mode
 * - Exclusive: The ButtonLinkEdit UI with all the link edition controls.
 *
 * @class ButtonLink
 * @uses ButtonCfgProps
 * @uses ButtonKeystroke
 * @uses ButtonStateClasses
 */
var ButtonLink = function (_React$Component) {
	_inherits(ButtonLink, _React$Component);

	function ButtonLink() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonLink);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonLink.__proto__ || Object.getPrototypeOf(ButtonLink)).call.apply(_ref, [this].concat(args))), _this), _this._requestExclusive = function () {
			_this.props.requestExclusive(ButtonLink.key);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}
	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonLink
  * @method getDefaultProps
  * @return {Object} The default properties.
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default link
  * @memberof ButtonLink
  * @property {String} key
  * @static
  */


	_createClass(ButtonLink, [{
		key: 'isActive',


		/**
   * Checks if the current selection is contained within a link.
   *
   * @instance
   * @memberof ButtonLink
   * @method isActive
   * @return {Boolean} True if the selection is inside a link, false otherwise.
   */
		value: function isActive() {
			return new CKEDITOR.Link(this.props.editor.get('nativeEditor')).getFromSelection() !== null;
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonLink
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			if (this.props.renderExclusive) {
				var props = this.mergeButtonCfgProps();

				return _react2.default.createElement(_buttonLinkEdit2.default, props);
			} else {
				return _react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.link,
						className: cssClass,
						'data-type': 'button-link',
						onClick: this._requestExclusive,
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.link },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'link' })
				);
			}
		}

		/**
   * Requests the link button to be rendered in exclusive mode to allow the creation of a link.
   *
   * @instance
   * @memberof ButtonLink
   * @method _requestExclusive
   * @protected
   */

	}]);

	return ButtonLink;
}(_react2.default.Component);

ButtonLink.defaultProps = {
	keystroke: {
		fn: '_requestExclusive',
		keys: CKEDITOR.CTRL + 76 /* L*/
	}
};
ButtonLink.key = 'link';
exports.default = (0, _buttonProps2.default)((0, _buttonKeystroke2.default)((0, _buttonStateClasses2.default)(ButtonLink)));

/***/ }),

/***/ "./src/components/buttons/button-ol.jsx":
/*!**********************************************!*\
  !*** ./src/components/buttons/button-ol.jsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonOrderedList class provides functionality for creating ordered lists in an editor.
 *
 * @class ButtonOrderedList
 * @uses ButtonCommand
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonOrderedList = function (_React$Component) {
	_inherits(ButtonOrderedList, _React$Component);

	function ButtonOrderedList() {
		_classCallCheck(this, ButtonOrderedList);

		return _possibleConstructorReturn(this, (ButtonOrderedList.__proto__ || Object.getPrototypeOf(ButtonOrderedList)).apply(this, arguments));
	}

	_createClass(ButtonOrderedList, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonOrderedList
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonOrderedList
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.numberedlist,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-ol',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.numberedlist },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'list-ol' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default ol
   * @memberof ButtonOrderedList
   * @property {String} key
   * @static
   */

	}]);

	return ButtonOrderedList;
}(_react2.default.Component);

ButtonOrderedList.defaultProps = {
	command: 'numberedlist',
	style: {
		element: 'ol'
	}
};
ButtonOrderedList.key = 'ol';
exports.default = (0, _buttonCommand2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonOrderedList)));

/***/ }),

/***/ "./src/components/buttons/button-outdent-block.jsx":
/*!*********************************************************!*\
  !*** ./src/components/buttons/button-outdent-block.jsx ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonOutdentBlock class provides functionality for outdenting blocks.
 *
 * @class ButtonOutdentBlock
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonOutdentBlock = function (_React$Component) {
	_inherits(ButtonOutdentBlock, _React$Component);

	function ButtonOutdentBlock() {
		_classCallCheck(this, ButtonOutdentBlock);

		return _possibleConstructorReturn(this, (ButtonOutdentBlock.__proto__ || Object.getPrototypeOf(ButtonOutdentBlock)).apply(this, arguments));
	}

	_createClass(ButtonOutdentBlock, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonOutdentBlock
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonOutdentBlock
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.outdent,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-outdent-block',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.outdent },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'indent-more' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default indentBlock
   * @memberof ButtonOutdentBlock
   * @property {String} key
   * @static
   */

	}]);

	return ButtonOutdentBlock;
}(_react2.default.Component);

ButtonOutdentBlock.defaultProps = {
	command: 'outdent'
};
ButtonOutdentBlock.key = 'outdentBlock';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonOutdentBlock)));

/***/ }),

/***/ "./src/components/buttons/button-paragraph-align-left.jsx":
/*!****************************************************************!*\
  !*** ./src/components/buttons/button-paragraph-align-left.jsx ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonParagraphAlignLeft class provides functionality for aligning a paragraph on left.
 *
 * @class ButtonParagraphAlignLeft
 *
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonParagraphAlignLeft = function (_React$Component) {
	_inherits(ButtonParagraphAlignLeft, _React$Component);

	function ButtonParagraphAlignLeft() {
		_classCallCheck(this, ButtonParagraphAlignLeft);

		return _possibleConstructorReturn(this, (ButtonParagraphAlignLeft.__proto__ || Object.getPrototypeOf(ButtonParagraphAlignLeft)).apply(this, arguments));
	}

	_createClass(ButtonParagraphAlignLeft, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonParagraphAlignLeft
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonParagraphAlignLeft
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.alignLeft,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-paragraph-align-left',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.alignLeft },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'align-left' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default paragraphLeft
   * @memberof ButtonParagraphAlignLeft
   * @property {String} key
   * @static
   */

	}]);

	return ButtonParagraphAlignLeft;
}(_react2.default.Component);

ButtonParagraphAlignLeft.defaultProps = {
	command: 'justifyleft'
};
ButtonParagraphAlignLeft.key = 'paragraphLeft';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonParagraphAlignLeft)));

/***/ }),

/***/ "./src/components/buttons/button-paragraph-align-right.jsx":
/*!*****************************************************************!*\
  !*** ./src/components/buttons/button-paragraph-align-right.jsx ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonParagraphAlignRight class provides functionality for aligning a paragraph on right.
 *
 * @class ButtonParagraphAlignRight
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonParagraphAlignRight = function (_React$Component) {
	_inherits(ButtonParagraphAlignRight, _React$Component);

	function ButtonParagraphAlignRight() {
		_classCallCheck(this, ButtonParagraphAlignRight);

		return _possibleConstructorReturn(this, (ButtonParagraphAlignRight.__proto__ || Object.getPrototypeOf(ButtonParagraphAlignRight)).apply(this, arguments));
	}

	_createClass(ButtonParagraphAlignRight, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonParagraphAlignRight
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonParagraphAlignRight
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.alignRight,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-paragraph-align-right',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.alignRight },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'align-right' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default paragraphRight
   * @memberof ButtonParagraphAlignRight
   * @property {String} key
   * @static
   */

	}]);

	return ButtonParagraphAlignRight;
}(_react2.default.Component);

ButtonParagraphAlignRight.defaultProps = {
	command: 'justifyright'
};
ButtonParagraphAlignRight.key = 'paragraphRight';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonParagraphAlignRight)));

/***/ }),

/***/ "./src/components/buttons/button-paragraph-align.jsx":
/*!***********************************************************!*\
  !*** ./src/components/buttons/button-paragraph-align.jsx ***!
  \***********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommandsList = __webpack_require__(/*! ./button-commands-list.jsx */ "./src/components/buttons/button-commands-list.jsx");

var _buttonCommandsList2 = _interopRequireDefault(_buttonCommandsList);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonParagraphAlign class provides functionality to work with table rows.
 *
 * @class ButtonParagraphAlign
 */
var ButtonParagraphAlign = function (_React$Component) {
	_inherits(ButtonParagraphAlign, _React$Component);

	function ButtonParagraphAlign() {
		_classCallCheck(this, ButtonParagraphAlign);

		return _possibleConstructorReturn(this, (ButtonParagraphAlign.__proto__ || Object.getPrototypeOf(ButtonParagraphAlign)).apply(this, arguments));
	}

	_createClass(ButtonParagraphAlign, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonParagraphAlign
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var buttonCommandsList = void 0;
			var buttonCommandsListId = void 0;

			if (this.props.expanded) {
				buttonCommandsListId = ButtonParagraphAlign.key + 'List';
				buttonCommandsList = _react2.default.createElement(_buttonCommandsList2.default, {
					commands: this._getCommands(),
					editor: this.props.editor,
					listId: buttonCommandsListId,
					inlineIcons: false,
					onDismiss: this.props.toggleDropdown
				});
			}

			var editor = this.props.editor.get('nativeEditor');

			var activeCommand = this._getCommands().filter(function (alignment) {
				var command = editor.getCommand(alignment.command);

				return command ? command.state === CKEDITOR.TRISTATE_ON : false;
			}).pop();

			var iconClassName = activeCommand.icon;

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-dropdown ae-container-dropdown-xsmall ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': this.props.expanded,
						'aria-label': activeCommand.label,
						'aria-owns': buttonCommandsListId,
						className: 'ae-toolbar-element',
						onClick: this.props.toggleDropdown,
						role: 'combobox',
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.row },
					_react2.default.createElement(
						'div',
						{ className: 'ae-container' },
						_react2.default.createElement(_buttonIcon2.default, {
							editor: this.props.editor,
							symbol: iconClassName
						}),
						_react2.default.createElement(_buttonIcon2.default, {
							editor: this.props.editor,
							symbol: 'caret-bottom'
						})
					)
				),
				buttonCommandsList
			);
		}

		/**
   * Returns a list of commands. If a list of commands was passed
   * as property `commands`, it will take a precedence over the default ones.
   *
   * @instance
   * @memberof ButtonParagraphAlign
   * @method _getCommands
   * @protected
   * @return {Array} The list of available commands.
   */

	}, {
		key: '_getCommands',
		value: function _getCommands() {
			return this.props.commands || [{
				command: 'justifyleft',
				icon: 'align-left',
				label: AlloyEditor.Strings.alignLeft
			}, {
				command: 'justifycenter',
				icon: 'align-center',
				label: AlloyEditor.Strings.alignCenter
			}, {
				command: 'justifyright',
				icon: 'align-right',
				label: AlloyEditor.Strings.alignRight
			}, {
				command: 'justifyblock',
				icon: 'align-justify',
				label: AlloyEditor.Strings.alignJustify
			}];
		}
	}]);

	return ButtonParagraphAlign;
}(_react2.default.Component);

ButtonParagraphAlign.key = 'paragraphAlign';
exports.default = ButtonParagraphAlign;

/***/ }),

/***/ "./src/components/buttons/button-paragraph-center.jsx":
/*!************************************************************!*\
  !*** ./src/components/buttons/button-paragraph-center.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonParagraphCenter class provides functionality for centering a paragraph.
 *
 * @class ButtonParagraphCenter
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonParagraphCenter = function (_React$Component) {
	_inherits(ButtonParagraphCenter, _React$Component);

	function ButtonParagraphCenter() {
		_classCallCheck(this, ButtonParagraphCenter);

		return _possibleConstructorReturn(this, (ButtonParagraphCenter.__proto__ || Object.getPrototypeOf(ButtonParagraphCenter)).apply(this, arguments));
	}

	_createClass(ButtonParagraphCenter, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonParagraphCenter
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonParagraphCenter
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.alignCenter,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-paragraph-center',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.alignCenter },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'align-center' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default paragraphCenter
   * @memberof ButtonParagraphCenter
   * @property {String} key
   * @static
   */

	}]);

	return ButtonParagraphCenter;
}(_react2.default.Component);

ButtonParagraphCenter.defaultProps = {
	command: 'justifycenter'
};
ButtonParagraphCenter.key = 'paragraphCenter';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonParagraphCenter)));

/***/ }),

/***/ "./src/components/buttons/button-paragraph-justify.jsx":
/*!*************************************************************!*\
  !*** ./src/components/buttons/button-paragraph-justify.jsx ***!
  \*************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonCommandActive = __webpack_require__(/*! ../base/button-command-active.js */ "./src/components/base/button-command-active.js");

var _buttonCommandActive2 = _interopRequireDefault(_buttonCommandActive);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonParagraphJustify class provides functionality for justfying a paragraph.
 *
 * @class ButtonParagraphJustify
 * @uses ButtonCommand
 * @uses ButtonCommandActive
 * @uses ButtonStateClasses
 */
var ButtonParagraphJustify = function (_React$Component) {
	_inherits(ButtonParagraphJustify, _React$Component);

	function ButtonParagraphJustify() {
		_classCallCheck(this, ButtonParagraphJustify);

		return _possibleConstructorReturn(this, (ButtonParagraphJustify.__proto__ || Object.getPrototypeOf(ButtonParagraphJustify)).apply(this, arguments));
	}

	_createClass(ButtonParagraphJustify, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonParagraphJustify
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonParagraphJustify
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.alignJustify,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-paragraph-justify',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.alignJustify },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'align-justify' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default paragraphJustify
   * @memberof ButtonParagraphJustify
   * @property {String} key
   * @static
   */

	}]);

	return ButtonParagraphJustify;
}(_react2.default.Component);

ButtonParagraphJustify.defaultProps = {
	command: 'justifyblock'
};
ButtonParagraphJustify.key = 'paragraphJustify';
exports.default = (0, _buttonCommand2.default)((0, _buttonCommandActive2.default)((0, _buttonStateClasses2.default)(ButtonParagraphJustify)));

/***/ }),

/***/ "./src/components/buttons/button-quote.jsx":
/*!*************************************************!*\
  !*** ./src/components/buttons/button-quote.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonQuote class wraps a selection in `blockquote` element.
 *
 * @class ButtonQuote
 * @uses ButtonCommand
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonQuote = function (_React$Component) {
	_inherits(ButtonQuote, _React$Component);

	function ButtonQuote() {
		_classCallCheck(this, ButtonQuote);

		return _possibleConstructorReturn(this, (ButtonQuote.__proto__ || Object.getPrototypeOf(ButtonQuote)).apply(this, arguments));
	}

	_createClass(ButtonQuote, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonQuote
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonQuote
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.quote,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-quote',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.quote },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'quote-right' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default quote
   * @memberof ButtonQuote
   * @property {String} key
   * @static
   */

	}]);

	return ButtonQuote;
}(_react2.default.Component);

ButtonQuote.defaultProps = {
	command: 'blockquote',
	style: {
		element: 'blockquote'
	}
};
ButtonQuote.key = 'quote';
exports.default = (0, _buttonCommand2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonQuote)));

/***/ }),

/***/ "./src/components/buttons/button-remove-format.jsx":
/*!*********************************************************!*\
  !*** ./src/components/buttons/button-remove-format.jsx ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonRemoveFormat class removes style formatting.
 *
 * @class ButtonRemoveFormat
 * @uses ButtonCommand
 */
var ButtonRemoveFormat = function (_React$Component) {
	_inherits(ButtonRemoveFormat, _React$Component);

	function ButtonRemoveFormat() {
		_classCallCheck(this, ButtonRemoveFormat);

		return _possibleConstructorReturn(this, (ButtonRemoveFormat.__proto__ || Object.getPrototypeOf(ButtonRemoveFormat)).apply(this, arguments));
	}

	_createClass(ButtonRemoveFormat, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonRemoveFormat
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonRemoveFormat
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.removeformat,
					className: 'ae-button',
					'data-type': 'button-removeformat',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.removeformat },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'remove-style' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default removeFormat
   * @memberof ButtonRemoveFormat
   * @property {String} key
   * @static
   */

	}]);

	return ButtonRemoveFormat;
}(_react2.default.Component);

ButtonRemoveFormat.defaultProps = {
	command: 'removeFormat'
};
ButtonRemoveFormat.key = 'removeFormat';
exports.default = (0, _buttonCommand2.default)(ButtonRemoveFormat);

/***/ }),

/***/ "./src/components/buttons/button-separator.jsx":
/*!*****************************************************!*\
  !*** ./src/components/buttons/button-separator.jsx ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * The ButtonSeparator function renders a simple separator.
 */
function ButtonSeparator(_props) {
  return _react2.default.createElement('span', { className: 'ae-separator' });
}

/**
 * The name which will be used as an alias of the button in the configuration.
 *
 * @default separator
 * @memberof ButtonSeparator
 * @property {String} key
 * @static
 */
ButtonSeparator.key = 'separator';

exports.default = ButtonSeparator;

/***/ }),

/***/ "./src/components/buttons/button-spacing.jsx":
/*!***************************************************!*\
  !*** ./src/components/buttons/button-spacing.jsx ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonProps = __webpack_require__(/*! ../base/button-props.js */ "./src/components/base/button-props.js");

var _buttonProps2 = _interopRequireDefault(_buttonProps);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStylesList = __webpack_require__(/*! ./button-styles-list.jsx */ "./src/components/buttons/button-styles-list.jsx");

var _buttonStylesList2 = _interopRequireDefault(_buttonStylesList);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonSpacing class provides functionality for changing text color in a document.
 *
 * @uses ButtonProps
 * @uses ButtonStateClasses
 *
 * @class ButtonSpacing
 */
var ButtonSpacing = function (_React$Component) {
	_inherits(ButtonSpacing, _React$Component);

	function ButtonSpacing() {
		_classCallCheck(this, ButtonSpacing);

		return _possibleConstructorReturn(this, (ButtonSpacing.__proto__ || Object.getPrototypeOf(ButtonSpacing)).apply(this, arguments));
	}

	_createClass(ButtonSpacing, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var _this2 = this;

			var activeSpacing = '1.0x';

			var spacings = this._getSpacings();

			spacings.forEach(function (item) {
				if (_this2._checkActive(item.style)) {
					activeSpacing = item.name;
				}
			});

			var _props = this.props,
			    editor = _props.editor,
			    expanded = _props.expanded,
			    tabIndex = _props.tabIndex,
			    toggleDropdown = _props.toggleDropdown;


			var buttonStylesProps = {
				activeStyle: activeSpacing,
				editor: editor,
				onDismiss: toggleDropdown,
				showRemoveStylesItem: false,
				styles: spacings
			};

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container ae-container-dropdown-small ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': expanded,
						className: 'ae-toolbar-element',
						onClick: toggleDropdown,
						role: 'combobox',
						tabIndex: tabIndex },
					_react2.default.createElement(
						'span',
						null,
						_react2.default.createElement(_buttonIcon2.default, { editor: editor, symbol: 'separator' }),
						'\xA0',
						activeSpacing
					)
				),
				expanded && _react2.default.createElement(_buttonStylesList2.default, buttonStylesProps)
			);
		}
	}, {
		key: '_applyStyle',
		value: function _applyStyle(className) {
			var _this3 = this;

			var editor = this.props.editor.get('nativeEditor');

			var styleConfig = {
				element: 'div',
				attributes: {
					class: className
				}
			};

			var style = new CKEDITOR.style(styleConfig);

			editor.getSelection().lock();

			this._getSpacings().forEach(function (item) {
				if (_this3._checkActive(item.style)) {
					editor.removeStyle(new CKEDITOR.style(item.style));
				}
			});

			editor.applyStyle(style);

			editor.getSelection().unlock();

			editor.fire('actionPerformed', this);
		}

		/**
   * Checks if the given spacing definition is applied to the current selection in the editor.
   *
   * @instance
   * @memberof Spacing
   * @method _checkActive
   * @param {Object} styleConfig Spacing definition as per http://docs.ckeditor.com/#!/api/CKEDITOR.style.
   * @protected
   * @return {Boolean} Returns true if the spacing is applied to the selection, false otherwise.
   */

	}, {
		key: '_checkActive',
		value: function _checkActive(styleConfig) {
			var nativeEditor = this.props.editor.get('nativeEditor');

			var active = true;

			var elementPath = nativeEditor.elementPath();

			if (elementPath && elementPath.lastElement) {
				styleConfig.attributes.class.split(' ').forEach(function (className) {
					active = active && elementPath.lastElement.hasClass(className);
				});
			} else {
				active = false;
			}

			return active;
		}

		/**
   * Returns an array of spacings. Each spacing consists from three properties:
   * - name - the style name, for example "default"
   * - style - an object with one property, called `element` which value
   * represents the style which have to be applied to the element.
   * - styleFn - a function which applies selected style to the editor selection
   *
   * @instance
   * @memberof Spacing
   * @method _getSpacings
   * @protected
   * @return {Array<object>} An array of objects containing the spacings.
   */

	}, {
		key: '_getSpacings',
		value: function _getSpacings() {
			return this.props.styles || [{
				name: '1.0x',
				style: {
					element: 'div',
					attributes: {
						class: ''
					},
					type: 1
				},
				styleFn: this._applyStyle.bind(this, '')
			}, {
				name: '1.5x',
				style: {
					element: 'div',
					attributes: {
						class: 'mt-1 mb-1'
					},
					type: 1
				},
				styleFn: this._applyStyle.bind(this, 'mt-1 mb-1')
			}, {
				name: '2.0x',
				style: {
					element: 'div',
					attributes: {
						class: 'mt-2 mb-2'
					},
					type: 1
				},
				styleFn: this._applyStyle.bind(this, 'mt-2 mb-2')
			}, {
				name: '3.0x',
				style: {
					element: 'div',
					attributes: {
						class: 'mt-3 mb-3'
					},
					type: 1
				},
				styleFn: this._applyStyle.bind(this, 'mt-3 mb-3')
			}, {
				name: '4.0x',
				style: {
					element: 'div',
					attributes: {
						class: 'mt-4 mb-4'
					},
					type: 1
				},
				styleFn: this._applyStyle.bind(this, 'mt-4 mb-4')
			}, {
				name: '5.0x',
				style: {
					element: 'div',
					attributes: {
						class: 'mt-5 mb-5'
					},
					type: 1
				},
				styleFn: this._applyStyle.bind(this, 'mt-5 mb-5')
			}];
		}
	}]);

	return ButtonSpacing;
}(_react2.default.Component);

ButtonSpacing.key = 'spacing';
ButtonSpacing.propTypes = {
	/**
  * The editor instance where the component is being used.
  *
  * @instance
  * @memberof Spacing
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired,

	/**
  * Indicates whether the styles list is expanded or not.
  *
  * @instance
  * @memberof Spacing
  * @property {Boolean} expanded
  */
	expanded: _propTypes2.default.bool,

	/**
  * The label that should be used for accessibility purposes.
  *
  * @instance
  * @memberof Spacing
  * @property {String} label
  */
	label: _propTypes2.default.string,

	/**
  * Indicates whether the remove styles item should appear in the styles list.
  *
  * @instance
  * @memberof Spacing
  * @property {Boolean} showRemoveStylesItem
  */
	showRemoveStylesItem: _propTypes2.default.bool,

	/**
  * List of the styles the button is able to handle.
  *
  * @instance
  * @memberof Spacing
  * @property {Array} styles
  */
	styles: _propTypes2.default.arrayOf(_propTypes2.default.object),

	/**
  * The tabIndex of the button in its toolbar current state. A value other than -1
  * means that the button has focus and is the active element.
  *
  * @instance
  * @memberof Spacing
  * @property {Number} tabIndex
  */
	tabIndex: _propTypes2.default.number,

	/**
  * Callback provided by the button host to notify when the styles list has been expanded.
  *
  * @instance
  * @memberof Spacing
  * @property {Function} toggleDropdown
  */
	toggleDropdown: _propTypes2.default.func
};
exports.default = (0, _buttonProps2.default)((0, _buttonStateClasses2.default)(ButtonSpacing));

/***/ }),

/***/ "./src/components/buttons/button-strike.jsx":
/*!**************************************************!*\
  !*** ./src/components/buttons/button-strike.jsx ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonStrike class styles a selection with strike style.
 *
 * @class ButtonStrike
 * @uses ButtonCommand
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonStrike = function (_React$Component) {
	_inherits(ButtonStrike, _React$Component);

	function ButtonStrike() {
		_classCallCheck(this, ButtonStrike);

		return _possibleConstructorReturn(this, (ButtonStrike.__proto__ || Object.getPrototypeOf(ButtonStrike)).apply(this, arguments));
	}

	_createClass(ButtonStrike, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   * @instance
   * @memberof ButtonStrike
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonStrike
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.strike,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-strike',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.strike },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'strikethrough' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default strike
   * @memberof ButtonStrike
   * @property {String} key
   * @static
   */

	}]);

	return ButtonStrike;
}(_react2.default.Component);

ButtonStrike.defaultProps = {
	command: 'strike',
	style: 'coreStyles_strike'
};
ButtonStrike.key = 'strike';
exports.default = (0, _buttonCommand2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonStrike)));

/***/ }),

/***/ "./src/components/buttons/button-styles-list-header.jsx":
/*!**************************************************************!*\
  !*** ./src/components/buttons/button-styles-list-header.jsx ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonsStylesListHeader class provides the header of an list of style items.
 *
 * @class ButtonsStylesListHeader
 */
var ButtonsStylesListHeader = function (_React$Component) {
	_inherits(ButtonsStylesListHeader, _React$Component);

	function ButtonsStylesListHeader() {
		_classCallCheck(this, ButtonsStylesListHeader);

		return _possibleConstructorReturn(this, (ButtonsStylesListHeader.__proto__ || Object.getPrototypeOf(ButtonsStylesListHeader)).apply(this, arguments));
	}

	_createClass(ButtonsStylesListHeader, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonsStylesListHeader
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			if (this.props.styles && this.props.styles.length) {
				return _react2.default.createElement(
					'span',
					{ className: 'ae-list-header' },
					this.props.name
				);
			} else {
				return null;
			}
		}
	}]);

	return ButtonsStylesListHeader;
}(_react2.default.Component);

ButtonsStylesListHeader.key = 'buttonStylesListHeader';
exports.default = ButtonsStylesListHeader;

/***/ }),

/***/ "./src/components/buttons/button-styles-list-item-remove.jsx":
/*!*******************************************************************!*\
  !*** ./src/components/buttons/button-styles-list-item-remove.jsx ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonStylesListItemRemove class provides functionality for previewing a style definition
 * inside a list and applying it to the current editor selection.
 *
 * @class ButtonStylesListItemRemove
 */
var ButtonStylesListItemRemove = function (_React$Component) {
	_inherits(ButtonStylesListItemRemove, _React$Component);

	function ButtonStylesListItemRemove() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonStylesListItemRemove);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonStylesListItemRemove.__proto__ || Object.getPrototypeOf(ButtonStylesListItemRemove)).call.apply(_ref, [this].concat(args))), _this), _this._removeStyles = function () {
			var editor = _this.props.editor.get('nativeEditor');

			editor.execCommand('removeFormat');

			_this.props.removeBlocks.forEach(function (blockItem) {
				var blockStyle = new CKEDITOR.style({ element: blockItem });

				editor.removeStyle(blockStyle);
			});

			editor.fire('actionPerformed', _this);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}
	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonStylesListItemRemove
  * @method getDefaultProps
  * @return {Object} The default properties.
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default buttonStylesListItemRemove
  * @memberof ButtonStylesListItemRemove
  * @property {String} key
  * @static
  */


	_createClass(ButtonStylesListItemRemove, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonStylesListItemRemove
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			return _react2.default.createElement(
				'li',
				{ role: 'option' },
				_react2.default.createElement(
					'button',
					{
						className: 'ae-toolbar-element',
						onClick: this._removeStyles,
						tabIndex: this.props.tabIndex },
					AlloyEditor.Strings.normal
				)
			);
		}

		/**
   * Removes all inline styles and configured block elements applied to the current selection.
   *
   * @instance
   * @memberof ButtonStylesListItemRemove
   * @method _removeStyles
   * @protected
   */

	}]);

	return ButtonStylesListItemRemove;
}(_react2.default.Component);

ButtonStylesListItemRemove.defaultProps = {
	removeBlocks: ['h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'pre']
};
ButtonStylesListItemRemove.key = 'buttonStylesListItemRemove';
exports.default = ButtonStylesListItemRemove;

/***/ }),

/***/ "./src/components/buttons/button-styles-list-item.jsx":
/*!************************************************************!*\
  !*** ./src/components/buttons/button-styles-list-item.jsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonActionStyle = __webpack_require__(/*! ../base/button-action-style.js */ "./src/components/base/button-action-style.js");

var _buttonActionStyle2 = _interopRequireDefault(_buttonActionStyle);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonStylesListItem class provides functionality for previewing a style definition
 * inside a list and applying it to the current editor selection.
 *
 * @class ButtonStylesListItem
 * @uses ButtonActionStyle
 * @uses ButtonStyle
 */
var ButtonStylesListItem = function (_React$Component) {
	_inherits(ButtonStylesListItem, _React$Component);

	function ButtonStylesListItem() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonStylesListItem);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonStylesListItem.__proto__ || Object.getPrototypeOf(ButtonStylesListItem)).call.apply(_ref, [this].concat(args))), _this), _this._onClick = function () {
			// Typically, we want the style to be the only one applied to the current selection, so
			// we execute the 'removeFormat' command first. Note that block styles won't be cleaned.
			// However, this is consistent with other editors implementations of this feature.
			_this.props.editor.get('nativeEditor').execCommand('removeFormat');

			_this.applyStyle();
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}
	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default buttonStylesListItem
  * @memberof ButtonStylesListItem
  * @property {String} key
  * @static
  */


	_createClass(ButtonStylesListItem, [{
		key: 'componentWillMount',


		/**
   * Lifecycle. Invoked once, both on the client and server, immediately before the initial rendering occurs.
   *
   * @instance
   * @memberof ButtonStylesListItem
   * @method componentWillMount
   */
		value: function componentWillMount() {
			// Styles with wildcard element (*) generate an empty tag in their preview < class="custom-class" />.
			// We default to element span and remove the margins to obtain a more consistent set of previews.
			var styleCfg = {
				element: 'span',
				styles: {
					margin: 0
				}
			};

			styleCfg = CKEDITOR.tools.merge(styleCfg, this.props.style);

			this._preview = new CKEDITOR.style(styleCfg).buildPreview(this.props.name);
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonStylesListItem
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			// We need to use dangerouselySetInnterHTML since we're not in control of the style
			// preview that is generated by CKEditor.
			var className = this.props.name === this.props.activeStyle ? 'ae-toolbar-element active' : 'ae-toolbar-element';

			return _react2.default.createElement('button', {
				className: className,
				dangerouslySetInnerHTML: { __html: this._preview },
				onClick: this._onClick,
				tabIndex: this.props.tabIndex
			});
		}

		/**
   * Applies the item style to the editor selection.
   *
   * @instance
   * @memberof ButtonStylesListItem
   * @method _onClick
   * @protected
   */

	}]);

	return ButtonStylesListItem;
}(_react2.default.Component);

ButtonStylesListItem.key = 'buttonStylesListItem';
exports.default = (0, _buttonActionStyle2.default)((0, _buttonStyle2.default)(ButtonStylesListItem));

/***/ }),

/***/ "./src/components/buttons/button-styles-list.jsx":
/*!*******************************************************!*\
  !*** ./src/components/buttons/button-styles-list.jsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonDropdown = __webpack_require__(/*! ./button-dropdown.jsx */ "./src/components/buttons/button-dropdown.jsx");

var _buttonDropdown2 = _interopRequireDefault(_buttonDropdown);

var _buttonStylesListItem = __webpack_require__(/*! ./button-styles-list-item.jsx */ "./src/components/buttons/button-styles-list-item.jsx");

var _buttonStylesListItem2 = _interopRequireDefault(_buttonStylesListItem);

var _buttonStylesListItemRemove = __webpack_require__(/*! ./button-styles-list-item-remove.jsx */ "./src/components/buttons/button-styles-list-item-remove.jsx");

var _buttonStylesListItemRemove2 = _interopRequireDefault(_buttonStylesListItemRemove);

var _buttonStylesListHeader = __webpack_require__(/*! ./button-styles-list-header.jsx */ "./src/components/buttons/button-styles-list-header.jsx");

var _buttonStylesListHeader2 = _interopRequireDefault(_buttonStylesListHeader);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonStylesList class provides functionality for showing a list of styles that can be
 * applied to the current selection..
 *
 * @class ButtonStylesList
 * @uses WidgetFocusManager
 */
var ButtonStylesList = function (_React$Component) {
	_inherits(ButtonStylesList, _React$Component);

	function ButtonStylesList() {
		_classCallCheck(this, ButtonStylesList);

		return _possibleConstructorReturn(this, (ButtonStylesList.__proto__ || Object.getPrototypeOf(ButtonStylesList)).apply(this, arguments));
	}

	_createClass(ButtonStylesList, [{
		key: 'componentDidMount',


		/**
   * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
   *
   * Focuses on the list node to allow keyboard interaction.
   *
   * @instance
   * @memberof ButtonStylesList
   * @method componentDidMount
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonStylesList
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function componentDidMount() {
			_reactDom2.default.findDOMNode(this).focus();
		}

		/**
   * Lifecycle. Invoked once, both on the client and server, immediately before the initial rendering occurs.
   *
   * @instance
   * @memberof ButtonStylesList
   * @method componentWillMount
   */


		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @memberof ButtonStylesList
   * @static
   * @property {String} key
   * @default buttonStylesList
   */

	}, {
		key: 'componentWillMount',
		value: function componentWillMount() {
			var blockStyles = [];
			var inlineStyles = [];
			var objectStyles = [];

			this.props.styles.forEach(function (item) {
				var style = new CKEDITOR.style(item.style);

				if (style.type === CKEDITOR.STYLE_BLOCK) {
					blockStyles.push(item);
				} else if (style.type === CKEDITOR.STYLE_INLINE) {
					inlineStyles.push(item);
				} else if (style.type === CKEDITOR.STYLE_OBJECT) {
					objectStyles.push(item);
				}
			});

			this._blockStyles = blockStyles;
			this._inlineStyles = inlineStyles;
			this._objectStyles = objectStyles;
		}

		/**
   * Lifecycle. Renders the UI of the list.
   *
   * @instance
   * @memberof ButtonStylesList
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var removeStylesItem = void 0;

			if (this.props.showRemoveStylesItem) {
				removeStylesItem = _react2.default.createElement(_buttonStylesListItemRemove2.default, {
					editor: this.props.editor,
					onDismiss: this.props.toggleDropdown
				});
			}

			return _react2.default.createElement(
				_buttonDropdown2.default,
				this.props,
				removeStylesItem,
				_react2.default.createElement(_buttonStylesListHeader2.default, {
					name: AlloyEditor.Strings.blockStyles,
					styles: this._blockStyles
				}),
				this._renderStylesItems(this._blockStyles),
				_react2.default.createElement(_buttonStylesListHeader2.default, {
					name: AlloyEditor.Strings.inlineStyles,
					styles: this._inlineStyles
				}),
				this._renderStylesItems(this._inlineStyles),
				_react2.default.createElement(_buttonStylesListHeader2.default, {
					name: AlloyEditor.Strings.objectStyles,
					styles: this._objectStyles
				}),
				this._renderStylesItems(this._objectStyles)
			);
		}

		/**
   * Renders instances of ButtonStylesListItem with the preview of the correspondent block, inline or object styles.
   *
   * @instance
   * @memberof ButtonStylesList
   * @method _renderStylesItems
   * @param {Array} styles List of styles for which preview should be rendered.
   * @protected
   * @return {Array} Rendered instances of ButtonStylesListItem class
   */

	}, {
		key: '_renderStylesItems',
		value: function _renderStylesItems(styles) {
			var _this2 = this;

			var editor = this.props.editor;
			var items = void 0;

			if (styles && styles.length) {
				items = styles.map(function (item) {
					return _react2.default.createElement(
						'li',
						{ key: item.name, role: 'option' },
						_react2.default.createElement(_buttonStylesListItem2.default, {
							activeStyle: _this2.props.activeStyle,
							editor: editor,
							name: item.name,
							style: item.style
						})
					);
				});
			}

			return items;
		}
	}]);

	return ButtonStylesList;
}(_react2.default.Component);

ButtonStylesList.defaultProps = {
	circular: false,
	descendants: '.ae-toolbar-element',
	keys: {
		dismiss: [27],
		dismissNext: [39],
		dismissPrev: [37],
		next: [40],
		prev: [38]
	},
	showRemoveStylesItem: true
};
ButtonStylesList.key = 'buttonStylesList';
exports.default = (0, _widgetFocusManager2.default)(ButtonStylesList);

/***/ }),

/***/ "./src/components/buttons/button-styles.jsx":
/*!**************************************************!*\
  !*** ./src/components/buttons/button-styles.jsx ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStylesList = __webpack_require__(/*! ./button-styles-list.jsx */ "./src/components/buttons/button-styles-list.jsx");

var _buttonStylesList2 = _interopRequireDefault(_buttonStylesList);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonStyles class provides functionality for styling a selection with a list of
 * configurable and customizable styles. The allowed styles follow CKEDITOR.Style configuration
 * (http://docs.ckeditor.com/#!/api/CKEDITOR.style)
 *
 * @class ButtonStyles
 */
var ButtonStyles = function (_React$Component) {
	_inherits(ButtonStyles, _React$Component);

	function ButtonStyles() {
		_classCallCheck(this, ButtonStyles);

		return _possibleConstructorReturn(this, (ButtonStyles.__proto__ || Object.getPrototypeOf(ButtonStyles)).apply(this, arguments));
	}

	_createClass(ButtonStyles, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonStyles
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var _this2 = this;

			var activeStyle = AlloyEditor.Strings.normal;

			var styles = this._getStyles();

			styles.forEach(function (item) {
				if (_this2._checkActive(item.style)) {
					activeStyle = item.name;
				}
			});

			var buttonStylesList = void 0;

			if (this.props.expanded) {
				buttonStylesList = _react2.default.createElement(_buttonStylesList2.default, {
					activeStyle: activeStyle,
					editor: this.props.editor,
					onDismiss: this.props.toggleDropdown,
					showRemoveStylesItem: this.props.showRemoveStylesItem,
					styles: styles
				});
			}

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-dropdown ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': this.props.expanded,
						'aria-label': AlloyEditor.Strings.styles + ' ' + activeStyle,
						className: 'ae-toolbar-element',
						onClick: this.props.toggleDropdown,
						role: 'combobox',
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.styles + ' ' + activeStyle },
					_react2.default.createElement(
						'div',
						{ className: 'ae-container' },
						_react2.default.createElement(
							'span',
							{ className: 'ae-container-dropdown-selected-item' },
							activeStyle
						),
						_react2.default.createElement(_buttonIcon2.default, {
							editor: this.props.editor,
							symbol: 'caret-bottom'
						})
					)
				),
				buttonStylesList
			);
		}

		/**
   * Checks if the given style definition is applied to the current selection in the editor.
   *
   * @instance
   * @memberof ButtonStyles
   * @method _checkActive
   * @param {Object} styleConfig Style definition as per http://docs.ckeditor.com/#!/api/CKEDITOR.style.
   * @protected
   * @return {Boolean} Returns true if the style is applied to the selection, false otherwise.
   */

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default styles
   * @memberof ButtonStyles
   * @property {String} key
   * @static
   */

	}, {
		key: '_checkActive',
		value: function _checkActive(styleConfig) {
			var nativeEditor = this.props.editor.get('nativeEditor');

			// Styles with wildcard element (*) won't be considered active by CKEditor. Defaulting
			// to a 'span' element works for most of those cases with no defined element.
			styleConfig = CKEDITOR.tools.merge({ element: 'span' }, styleConfig);

			var style = new CKEDITOR.style(styleConfig);

			return style.checkActive(nativeEditor.elementPath(), nativeEditor);
		}

		/**
   * Returns an array of styles. Each style consists from two properties:
   * - name - the style name, for example "h1"
   * - style - an object with one property, called `element` which value
   * represents the style which have to be applied to the element.
   *
   * @instance
   * @memberof ButtonStyles
   * @method _getStyles
   * @protected
   * @return {Array<object>} An array of objects containing the styles.
   */

	}, {
		key: '_getStyles',
		value: function _getStyles() {
			return this.props.styles || [{
				name: AlloyEditor.Strings.h1,
				style: {
					element: 'h1'
				}
			}, {
				name: AlloyEditor.Strings.h2,
				style: {
					element: 'h2'
				}
			}, {
				name: AlloyEditor.Strings.formatted,
				style: {
					element: 'pre'
				}
			}, {
				name: AlloyEditor.Strings.cite,
				style: {
					element: 'cite'
				}
			}, {
				name: AlloyEditor.Strings.code,
				style: {
					element: 'code'
				}
			}];
		}
	}]);

	return ButtonStyles;
}(_react2.default.Component);

ButtonStyles.key = 'styles';
exports.default = ButtonStyles;

/***/ }),

/***/ "./src/components/buttons/button-subscript.jsx":
/*!*****************************************************!*\
  !*** ./src/components/buttons/button-subscript.jsx ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonSubscript class provides functionality for applying subscript style to a text selection.
 *
 * @class ButtonSubscript
 *
 * @uses ButtonCommand
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonSubscript = function (_React$Component) {
	_inherits(ButtonSubscript, _React$Component);

	function ButtonSubscript() {
		_classCallCheck(this, ButtonSubscript);

		return _possibleConstructorReturn(this, (ButtonSubscript.__proto__ || Object.getPrototypeOf(ButtonSubscript)).apply(this, arguments));
	}

	_createClass(ButtonSubscript, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonSubscript
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonSubscript
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.subscript,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-subscript',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.subscript },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'subscript' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default subscript
   * @memberof ButtonSubscript
   * @property {String} key
   * @static
   */

	}]);

	return ButtonSubscript;
}(_react2.default.Component);

ButtonSubscript.defaultProps = {
	command: 'subscript',
	style: 'coreStyles_subscript'
};
ButtonSubscript.key = 'subscript';
exports.default = (0, _buttonCommand2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonSubscript)));

/***/ }),

/***/ "./src/components/buttons/button-superscript.jsx":
/*!*******************************************************!*\
  !*** ./src/components/buttons/button-superscript.jsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonSuperscript class provides functionality for applying superscript style to a text selection.
 *
 * @class ButtonSuperscript
 *
 * @uses ButtonCommand
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonSuperscript = function (_React$Component) {
	_inherits(ButtonSuperscript, _React$Component);

	function ButtonSuperscript() {
		_classCallCheck(this, ButtonSuperscript);

		return _possibleConstructorReturn(this, (ButtonSuperscript.__proto__ || Object.getPrototypeOf(ButtonSuperscript)).apply(this, arguments));
	}

	_createClass(ButtonSuperscript, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonSuperscript
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonSuperscript
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.superscript,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-superscript',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.superscript },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'superscript' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default superscript
   * @memberof ButtonSuperscript
   * @property {String} key
   * @static
   */

	}]);

	return ButtonSuperscript;
}(_react2.default.Component);

ButtonSuperscript.defaultProps = {
	command: 'superscript',
	style: 'coreStyles_superscript'
};
ButtonSuperscript.key = 'superscript';
exports.default = (0, _buttonCommand2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonSuperscript)));

/***/ }),

/***/ "./src/components/buttons/button-table-cell.jsx":
/*!******************************************************!*\
  !*** ./src/components/buttons/button-table-cell.jsx ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommandsList = __webpack_require__(/*! ./button-commands-list.jsx */ "./src/components/buttons/button-commands-list.jsx");

var _buttonCommandsList2 = _interopRequireDefault(_buttonCommandsList);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonTableCell class provides functionality to work with table cells.
 *
 * @class ButtonTableCell
 */
var ButtonTableCell = function (_React$Component) {
	_inherits(ButtonTableCell, _React$Component);

	function ButtonTableCell() {
		_classCallCheck(this, ButtonTableCell);

		return _possibleConstructorReturn(this, (ButtonTableCell.__proto__ || Object.getPrototypeOf(ButtonTableCell)).apply(this, arguments));
	}

	_createClass(ButtonTableCell, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTableCell
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var buttonCommandsList = void 0;
			var buttonCommandsListId = void 0;

			if (this.props.expanded) {
				buttonCommandsListId = ButtonTableCell.key + 'List';
				buttonCommandsList = _react2.default.createElement(_buttonCommandsList2.default, {
					commands: this._getCommands(),
					editor: this.props.editor,
					listId: buttonCommandsListId,
					onDismiss: this.props.toggleDropdown
				});
			}

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': this.props.expanded,
						'aria-label': AlloyEditor.Strings.cell,
						'aria-owns': buttonCommandsListId,
						className: 'ae-button',
						onClick: this.props.toggleDropdown,
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.cell },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'add-cell' })
				),
				buttonCommandsList
			);
		}

		/**
   * Returns a list of commands. If a list of commands was passed
   * as property `commands`, it will take a precedence over the default ones.
   *
   * @instance
   * @memberof ButtonTableCell
   * @method _getCommands
   * @protected
   * @return {Array} The list of available commands.
   */

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default tableCell
   * @memberof ButtonTableCell
   * @property {String} key
   * @static
   */

	}, {
		key: '_getCommands',
		value: function _getCommands() {
			return this.props.commands || [{
				command: 'cellInsertBefore',
				label: AlloyEditor.Strings.cellInsertBefore
			}, {
				command: 'cellInsertAfter',
				label: AlloyEditor.Strings.cellInsertAfter
			}, {
				command: 'cellDelete',
				label: AlloyEditor.Strings.cellDelete
			}, {
				command: 'cellMerge',
				label: AlloyEditor.Strings.cellMerge
			}, {
				command: 'cellMergeDown',
				label: AlloyEditor.Strings.cellMergeDown
			}, {
				command: 'cellMergeRight',
				label: AlloyEditor.Strings.cellMergeRight
			}, {
				command: 'cellHorizontalSplit',
				label: AlloyEditor.Strings.cellSplitHorizontal
			}, {
				command: 'cellVerticalSplit',
				label: AlloyEditor.Strings.cellSplitVertical
			}];
		}
	}]);

	return ButtonTableCell;
}(_react2.default.Component);

ButtonTableCell.key = 'tableCell';
exports.default = ButtonTableCell;

/***/ }),

/***/ "./src/components/buttons/button-table-column.jsx":
/*!********************************************************!*\
  !*** ./src/components/buttons/button-table-column.jsx ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommandsList = __webpack_require__(/*! ./button-commands-list.jsx */ "./src/components/buttons/button-commands-list.jsx");

var _buttonCommandsList2 = _interopRequireDefault(_buttonCommandsList);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonTableColumn class provides functionality to work with table columns.
 *
 * @class ButtonTableColumn
 */
var ButtonTableColumn = function (_React$Component) {
	_inherits(ButtonTableColumn, _React$Component);

	function ButtonTableColumn() {
		_classCallCheck(this, ButtonTableColumn);

		return _possibleConstructorReturn(this, (ButtonTableColumn.__proto__ || Object.getPrototypeOf(ButtonTableColumn)).apply(this, arguments));
	}

	_createClass(ButtonTableColumn, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTableColumn
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var buttonCommandsList = void 0;
			var buttonCommandsListId = void 0;

			if (this.props.expanded) {
				buttonCommandsListId = ButtonTableColumn.key + 'List';
				buttonCommandsList = _react2.default.createElement(_buttonCommandsList2.default, {
					commands: this._getCommands(),
					editor: this.props.editor,
					listId: buttonCommandsListId,
					onDismiss: this.props.toggleDropdown
				});
			}

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': this.props.expanded,
						'aria-label': AlloyEditor.Strings.column,
						'aria-owns': buttonCommandsListId,
						className: 'ae-button',
						onClick: this.props.toggleDropdown,
						role: 'listbox',
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.column },
					_react2.default.createElement(_buttonIcon2.default, {
						editor: this.props.editor,
						symbol: 'add-column'
					})
				),
				buttonCommandsList
			);
		}

		/**
   * Returns a list of commands. If a list of commands was passed
   * as property `commands`, it will take a precedence over the default ones.
   *
   * @instance
   * @memberof ButtonTableColumn
   * @method _getCommands
   * @protected
   * @return {Array} The list of available commands.
   */

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default tableColumn
   * @memberof ButtonTableColumn
   * @property {String} key
   * @static
   */

	}, {
		key: '_getCommands',
		value: function _getCommands() {
			return this.props.commands || [{
				command: 'columnInsertBefore',
				label: AlloyEditor.Strings.columnInsertBefore
			}, {
				command: 'columnInsertAfter',
				label: AlloyEditor.Strings.columnInsertAfter
			}, {
				command: 'columnDelete',
				label: AlloyEditor.Strings.columnDelete
			}];
		}
	}]);

	return ButtonTableColumn;
}(_react2.default.Component);

ButtonTableColumn.key = 'tableColumn';
exports.default = ButtonTableColumn;

/***/ }),

/***/ "./src/components/buttons/button-table-edit.jsx":
/*!******************************************************!*\
  !*** ./src/components/buttons/button-table-edit.jsx ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var KEY_ENTER = 13;
var KEY_ESC = 27;

/**
 * The ButtonTableEdit class provides functionality for creating and editing a table in a document.
 * Provides UI for creating a table.
 *
 * @class ButtonTableEdit
 */

var ButtonTableEdit = function (_React$Component) {
	_inherits(ButtonTableEdit, _React$Component);

	/**
  * Lifecycle. Invoked once before the component is mounted.
  *
  * @instance
  * @memberof ButtonTableEdit
  * @method getInitialState
  */

	/**
  * Lifecycle. Returns the default values of the properties used in the widget.
  *
  * @instance
  * @memberof ButtonTableEdit
  * @method getDefaultProps
  */
	function ButtonTableEdit(props) {
		_classCallCheck(this, ButtonTableEdit);

		var _this = _possibleConstructorReturn(this, (ButtonTableEdit.__proto__ || Object.getPrototypeOf(ButtonTableEdit)).call(this, props));

		_this._createTable = function () {
			var editor = _this.props.editor.get('nativeEditor');
			var tableUtils = new CKEDITOR.Table(editor);

			tableUtils.create({
				attrs: _this.props.tableAttributes,
				cols: _this.state.cols,
				rows: _this.state.rows
			});

			_this.props.cancelExclusive();

			editor.fire('actionPerformed', _this);
		};

		_this._handleChange = function (inputName, event) {
			var state = {};
			state[inputName] = event.target.value;

			_this.setState(state);
		};

		_this._handleKeyDown = function (event) {
			if (event.keyCode === KEY_ENTER || event.keyCode === KEY_ESC) {
				event.preventDefault();
			}

			if (event.keyCode === KEY_ENTER) {
				_this._createTable();
			} else if (event.keyCode === KEY_ESC) {
				_this.props.cancelExclusive();
			}
		};

		_this.rowsRef = _react2.default.createRef();
		_this.colsRef = _react2.default.createRef();
		_this.state = {
			cols: 3,
			rows: 3
		};
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client (not on the server),
  * immediately after the initial rendering occurs.
  *
  * Focuses on the link input to immediately allow editing.
  *
  * @instance
  * @memberof ButtonTableEdit
  * @method componentDidMount
  */


	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default tableEdit
  * @memberof ButtonTableEdit
  * @property {String} key
  * @static
  */


	_createClass(ButtonTableEdit, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this.rowsRef.current.focus();
		}

		/**
   * Creates a table.
   *
   * @instance
   * @memberof ButtonTableEdit
   * @method _createTable
   * @protected
   */


		/**
   * Handles a change in input value. Sets the provided value from the user back to the input.
   *
   * @instance
   * @memberof ButtonTableEdit
   * @method _handleChange
   * @param {String} inputName The name of the input which value should be updated.
   * @param {SyntheticEvent} event The provided event.
   * @protected
   */


		/**
   * Monitors key interaction inside the input element to respond to the keys:
   * - Enter: Creates the table.
   * - Escape: Discards the changes.
   *
   * @instance
   * @memberof ButtonTableEdit
   * @method _handleKeyDown
   * @param {SyntheticEvent} event The keyboard event.
   * @protected
   */

	}, {
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTableEdit
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var time = Date.now();
			var rowsId = time + 'rows';
			var colsId = time + 'cols';

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-edit-table' },
				_react2.default.createElement(
					'label',
					{ htmlFor: rowsId },
					AlloyEditor.Strings.rows
				),
				_react2.default.createElement(
					'div',
					{ className: 'ae-container-input small' },
					_react2.default.createElement('input', {
						className: 'ae-input',
						id: rowsId,
						onChange: this._handleChange.bind(this, 'rows'),
						min: '1',
						onKeyDown: this._handleKeyDown,
						placeholder: 'Rows',
						ref: this.rowsRef,
						type: 'number',
						value: this.state.rows
					})
				),
				_react2.default.createElement(
					'label',
					{ htmlFor: colsId },
					AlloyEditor.Strings.columns
				),
				_react2.default.createElement(
					'div',
					{ className: 'ae-container-input small' },
					_react2.default.createElement('input', {
						className: 'ae-input',
						id: colsId,
						onChange: this._handleChange.bind(this, 'cols'),
						min: '1',
						onKeyDown: this._handleKeyDown,
						placeholder: 'Colums',
						ref: this.colsRef,
						type: 'number',
						value: this.state.cols
					})
				),
				_react2.default.createElement(
					'button',
					{
						'aria-label': 'Confirm',
						className: 'ae-button',
						onClick: this._createTable },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'check' })
				)
			);
		}
	}]);

	return ButtonTableEdit;
}(_react2.default.Component);

ButtonTableEdit.defaultProps = {
	tableAttributes: {
		border: 1,
		cellPadding: 0,
		cellSpacing: 0,
		style: 'width: 100%'
	}
};
ButtonTableEdit.key = 'tableEdit';
exports.default = ButtonTableEdit;

/***/ }),

/***/ "./src/components/buttons/button-table-heading.jsx":
/*!*********************************************************!*\
  !*** ./src/components/buttons/button-table-heading.jsx ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommandsList = __webpack_require__(/*! ./button-commands-list.jsx */ "./src/components/buttons/button-commands-list.jsx");

var _buttonCommandsList2 = _interopRequireDefault(_buttonCommandsList);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonTableHeading class provides functionality to work with table heading.
 *
 * @class ButtonTableHeading
 */
var ButtonTableHeading = function (_React$Component) {
	_inherits(ButtonTableHeading, _React$Component);

	function ButtonTableHeading() {
		_classCallCheck(this, ButtonTableHeading);

		return _possibleConstructorReturn(this, (ButtonTableHeading.__proto__ || Object.getPrototypeOf(ButtonTableHeading)).apply(this, arguments));
	}

	_createClass(ButtonTableHeading, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTableHeading
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var buttonCommandsList = void 0;
			var buttonCommandsListId = void 0;

			if (this.props.expanded) {
				buttonCommandsListId = ButtonTableHeading.key + 'List';
				buttonCommandsList = _react2.default.createElement(_buttonCommandsList2.default, {
					commands: this._getCommands(),
					editor: this.props.editor,
					listId: buttonCommandsListId,
					onDismiss: this.props.toggleDropdown
				});
			}

			var activeHeading = new CKEDITOR.Table(this.props.editor.get('nativeEditor')).getHeading();
			var activeHeadingIntro = AlloyEditor.Strings.headers + ':';
			var activeHeadingLabel = AlloyEditor.Strings['headers' + activeHeading];

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container-dropdown-xl ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': this.props.expanded,
						'aria-label': '',
						className: 'ae-toolbar-element',
						onClick: this.props.toggleDropdown,
						role: 'combobox',
						tabIndex: this.props.tabIndex,
						title: '' },
					_react2.default.createElement(
						'div',
						{ className: 'ae-container' },
						_react2.default.createElement(
							'span',
							{ className: 'ae-container-dropdown-selected-item' },
							activeHeadingIntro,
							' ',
							_react2.default.createElement(
								'strong',
								null,
								activeHeadingLabel
							)
						),
						_react2.default.createElement(_buttonIcon2.default, {
							editor: this.props.editor,
							symbol: 'caret-bottom'
						})
					)
				),
				buttonCommandsList
			);
		}

		/**
   * Returns a list of commands. If a list of commands was passed
   * as property `commands`, it will take a precedence over the default ones.
   *
   * @instance
   * @memberof ButtonTableHeading
   * @method _getCommands
   * @protected
   * @return {Array} The list of available commands.
   */

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default tableRow
   * @memberof ButtonTableHeading
   * @property {String} key
   * @static
   */

	}, {
		key: '_getCommands',
		value: function _getCommands() {
			return this.props.commands || [{
				command: 'tableHeadingNone',
				label: AlloyEditor.Strings.headersNone
			}, {
				command: 'tableHeadingRow',
				label: AlloyEditor.Strings.headersRow
			}, {
				command: 'tableHeadingColumn',
				label: AlloyEditor.Strings.headersColumn
			}, {
				command: 'tableHeadingBoth',
				label: AlloyEditor.Strings.headersBoth
			}];
		}
	}]);

	return ButtonTableHeading;
}(_react2.default.Component);

ButtonTableHeading.key = 'tableHeading';
exports.default = ButtonTableHeading;

/***/ }),

/***/ "./src/components/buttons/button-table-remove.jsx":
/*!********************************************************!*\
  !*** ./src/components/buttons/button-table-remove.jsx ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonTableRemove class provides functionality for removing a table
 *
 * @class ButtonTableRemove
 */
var ButtonTableRemove = function (_React$Component) {
	_inherits(ButtonTableRemove, _React$Component);

	function ButtonTableRemove() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonTableRemove);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonTableRemove.__proto__ || Object.getPrototypeOf(ButtonTableRemove)).call.apply(_ref, [this].concat(args))), _this), _this._removeTable = function () {
			var editor = _this.props.editor.get('nativeEditor');
			var tableUtils = new CKEDITOR.Table(editor);

			tableUtils.remove();

			editor.fire('actionPerformed', _this);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}
	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default tableRemove
  * @memberof ButtonTableRemove
  * @property {String} key
  * @static
  */


	_createClass(ButtonTableRemove, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTableRemove
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.deleteTable,
					className: 'ae-button',
					'data-type': 'button-table-remove',
					onClick: this._removeTable,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.deleteTable },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'trash' })
			);
		}

		/**
   * Removes the table in the editor element.
   *
   * @instance
   * @memberof ButtonTableRemove
   * @method _removeTable
   * @protected
   */

	}]);

	return ButtonTableRemove;
}(_react2.default.Component);

ButtonTableRemove.key = 'tableRemove';
exports.default = ButtonTableRemove;

/***/ }),

/***/ "./src/components/buttons/button-table-row.jsx":
/*!*****************************************************!*\
  !*** ./src/components/buttons/button-table-row.jsx ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommandsList = __webpack_require__(/*! ./button-commands-list.jsx */ "./src/components/buttons/button-commands-list.jsx");

var _buttonCommandsList2 = _interopRequireDefault(_buttonCommandsList);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonTableRow class provides functionality to work with table rows.
 *
 * @class ButtonTableRow
 */
var ButtonTableRow = function (_React$Component) {
	_inherits(ButtonTableRow, _React$Component);

	function ButtonTableRow() {
		_classCallCheck(this, ButtonTableRow);

		return _possibleConstructorReturn(this, (ButtonTableRow.__proto__ || Object.getPrototypeOf(ButtonTableRow)).apply(this, arguments));
	}

	_createClass(ButtonTableRow, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTableRow
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			var buttonCommandsList = void 0;
			var buttonCommandsListId = void 0;

			if (this.props.expanded) {
				buttonCommandsListId = ButtonTableRow.key + 'List';
				buttonCommandsList = _react2.default.createElement(_buttonCommandsList2.default, {
					commands: this._getCommands(),
					editor: this.props.editor,
					listId: buttonCommandsListId,
					onDismiss: this.props.toggleDropdown
				});
			}

			return _react2.default.createElement(
				'div',
				{ className: 'ae-container ae-has-dropdown' },
				_react2.default.createElement(
					'button',
					{
						'aria-expanded': this.props.expanded,
						'aria-label': AlloyEditor.Strings.row,
						'aria-owns': buttonCommandsListId,
						className: 'ae-button',
						onClick: this.props.toggleDropdown,
						role: 'combobox',
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.row },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'add-row' })
				),
				buttonCommandsList
			);
		}

		/**
   * Returns a list of commands. If a list of commands was passed
   * as property `commands`, it will take a precedence over the default ones.
   *
   * @instance
   * @memberof ButtonTableRow
   * @method _getCommands
   * @protected
   * @return {Array} The list of available commands.
   */

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default tableRow
   * @memberof ButtonTableRow
   * @property {String} key
   * @static
   */

	}, {
		key: '_getCommands',
		value: function _getCommands() {
			return this.props.commands || [{
				command: 'rowInsertBefore',
				label: AlloyEditor.Strings.rowInsertBefore
			}, {
				command: 'rowInsertAfter',
				label: AlloyEditor.Strings.rowInsertAfter
			}, {
				command: 'rowDelete',
				label: AlloyEditor.Strings.rowDelete
			}];
		}
	}]);

	return ButtonTableRow;
}(_react2.default.Component);

ButtonTableRow.key = 'tableRow';
exports.default = ButtonTableRow;

/***/ }),

/***/ "./src/components/buttons/button-table.jsx":
/*!*************************************************!*\
  !*** ./src/components/buttons/button-table.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonTableEdit = __webpack_require__(/*! ./button-table-edit.jsx */ "./src/components/buttons/button-table-edit.jsx");

var _buttonTableEdit2 = _interopRequireDefault(_buttonTableEdit);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonTable class provides functionality for creating and editing a table in a document. ButtonTable
 * renders in two different modes:
 *
 * - Normal: Just a button that allows to switch to the edition mode
 * - Exclusive: The ButtonTableEdit UI with all the table edition controls.
 *
 * @class ButtonTable
 */
var ButtonTable = function (_React$Component) {
	_inherits(ButtonTable, _React$Component);

	function ButtonTable() {
		_classCallCheck(this, ButtonTable);

		return _possibleConstructorReturn(this, (ButtonTable.__proto__ || Object.getPrototypeOf(ButtonTable)).apply(this, arguments));
	}

	_createClass(ButtonTable, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTable
   * @method render
   * @return {Object} The content which should be rendered.
   */
		value: function render() {
			if (this.props.renderExclusive) {
				return _react2.default.createElement(_buttonTableEdit2.default, this.props);
			} else {
				return _react2.default.createElement(
					'button',
					{
						'aria-label': AlloyEditor.Strings.table,
						className: 'ae-button',
						'data-type': 'button-table',
						onClick: this.props.requestExclusive,
						tabIndex: this.props.tabIndex,
						title: AlloyEditor.Strings.table },
					_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'table' })
				);
			}
		}
		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default table
   * @memberof ButtonTable
   * @property {String} key
   * @static
   */

	}]);

	return ButtonTable;
}(_react2.default.Component);

ButtonTable.key = 'table';
exports.default = ButtonTable;

/***/ }),

/***/ "./src/components/buttons/button-target-list.jsx":
/*!*******************************************************!*\
  !*** ./src/components/buttons/button-target-list.jsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonDropdown = __webpack_require__(/*! ./button-dropdown.jsx */ "./src/components/buttons/button-dropdown.jsx");

var _buttonDropdown2 = _interopRequireDefault(_buttonDropdown);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonTargetList class provides functionality for changing the target of a link
 * in the document.
 *
 * @class ButtonTargetList
 * @uses WidgetFocusManager
 */
var ButtonTargetList = function (_React$Component) {
	_inherits(ButtonTargetList, _React$Component);

	function ButtonTargetList() {
		_classCallCheck(this, ButtonTargetList);

		return _possibleConstructorReturn(this, (ButtonTargetList.__proto__ || Object.getPrototypeOf(ButtonTargetList)).apply(this, arguments));
	}

	_createClass(ButtonTargetList, [{
		key: 'componentDidMount',


		/**
   * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
   *
   * @instance
   * @memberof ButtonTargetList
   * @method componentDidMount
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonTargetList
   * @method getDefaultProps
   */
		value: function componentDidMount() {
			_reactDom2.default.findDOMNode(this).focus();
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTargetList
   * @method render
   * @return {Object} The content which should be rendered.
   */


		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default linkTargetEdit
   * @memberof ButtonTargetList
   * @property {String} key
   * @static
   */

	}, {
		key: 'render',
		value: function render() {
			var listTargets = this._renderListTargets();

			return _react2.default.createElement(
				_buttonDropdown2.default,
				this.props,
				listTargets
			);
		}

		/**
   * Returns the the allowed link target items.
   *
   * @instance
   * @memberof ButtonTargetList
   * @method _getAllowedTargetItems
   * @protected
   * @return {Array} The allowed target items.
   */

	}, {
		key: '_getAllowedTargetItems',
		value: function _getAllowedTargetItems() {
			return this.props.allowedLinkTargets || [{
				label: AlloyEditor.Strings.linkTargetDefault,
				value: ''
			}, {
				label: AlloyEditor.Strings.linkTargetSelf,
				value: '_self'
			}, {
				label: AlloyEditor.Strings.linkTargetBlank,
				value: '_blank'
			}, {
				label: AlloyEditor.Strings.linkTargetParent,
				value: '_parent'
			}, {
				label: AlloyEditor.Strings.linkTargetTop,
				value: '_top'
			}];
		}

		/**
   * Renders the allowed link target items.
   *
   * @instance
   * @memberof ButtonTargetList
   * @method _renderListTargets
   * @protected
   * @return {Object} Returns the rendered link items
   */

	}, {
		key: '_renderListTargets',
		value: function _renderListTargets() {
			var _this2 = this;

			var targets = this._getAllowedTargetItems();

			var handleLinkTargetChange = this.props.handleLinkTargetChange;

			targets = targets.map(function (target) {
				var className = _this2.props.selectedTarget === target.value ? 'ae-toolbar-element active' : 'ae-toolbar-element';

				return _react2.default.createElement(
					'li',
					{ key: target.value, role: 'option' },
					_react2.default.createElement(
						'button',
						{
							className: className,
							'data-value': target.value,
							onClick: handleLinkTargetChange },
						target.label
					)
				);
			});

			return targets;
		}
	}]);

	return ButtonTargetList;
}(_react2.default.Component);

ButtonTargetList.defaultProps = {
	circular: true,
	descendants: '.ae-toolbar-element',
	keys: {
		dismiss: [27],
		dismissNext: [39],
		dismissPrev: [37],
		next: [40],
		prev: [38]
	}
};
ButtonTargetList.key = 'targetList';
exports.default = (0, _widgetFocusManager2.default)(ButtonTargetList);

/***/ }),

/***/ "./src/components/buttons/button-twitter.jsx":
/*!***************************************************!*\
  !*** ./src/components/buttons/button-twitter.jsx ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var MAX_TWEET_LENGTH = 280;

/**
 * The ButtonTwitter class provides functionality for creating a link which
 * allows people to tweet part of the content in the editor.
 *
 * @class ButtonTwitter
 * @uses ButtonStateClasses
 */

var ButtonTwitter = function (_React$Component) {
	_inherits(ButtonTwitter, _React$Component);

	function ButtonTwitter() {
		var _ref;

		var _temp, _this, _ret;

		_classCallCheck(this, ButtonTwitter);

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonTwitter.__proto__ || Object.getPrototypeOf(ButtonTwitter)).call.apply(_ref, [this].concat(args))), _this), _this.handleClick = function () {
			var editor = _this.props.editor.get('nativeEditor');

			var linkUtils = new CKEDITOR.Link(editor);

			if (_this.isActive()) {
				linkUtils.remove(linkUtils.getFromSelection());
			} else {
				linkUtils.create(_this._getHref(), {
					class: 'ae-twitter-link',
					target: '_blank'
				});
			}

			editor.fire('actionPerformed', _this);
		}, _temp), _possibleConstructorReturn(_this, _ret);
	}
	/**
  * The name which will be used as an alias of the button in the configuration.
  *
  * @default twitter
  * @memberof ButtonTwitter
  * @property {String} key
  * @static
  */


	/**
  * Creates or removes the twitter link on the selection.
  *
  * @instance
  * @memberof ButtonTwitter
  * @method handleClick
  */


	_createClass(ButtonTwitter, [{
		key: 'isActive',


		/**
   * Checks if the current selection is contained within a link that points to twitter.com/intent/tweet.
   *
   * @instance
   * @memberof ButtonTwitter
   * @method isActive
   * @return {Boolean} True if the selection is inside a twitter link, false otherwise.
   */
		value: function isActive() {
			var link = new CKEDITOR.Link(this.props.editor.get('nativeEditor')).getFromSelection();

			return link && link.getAttribute('href').indexOf('twitter.com/intent/tweet') !== -1;
		}

		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonTwitter
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.twitter,
					className: cssClass,
					'data-type': 'button-twitter',
					onClick: this.handleClick,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.twitter },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'twitter' })
			);
		}

		/**
   * Generates the appropriate twitter url based on the selected text and the configuration
   * options received via props.
   *
   * @instance
   * @memberof ButtonTwitter
   * @method _getHref
   * @protected
   * @return {String} A valid twitter url with the selected text and given configuration.
   */

	}, {
		key: '_getHref',
		value: function _getHref() {
			var nativeEditor = this.props.editor.get('nativeEditor');
			var selectedText = nativeEditor.getSelection().getSelectedText().substring(0, MAX_TWEET_LENGTH);
			var url = this.props.url;
			var via = this.props.via;
			var twitterHref = 'https://twitter.com/intent/tweet?text=' + selectedText;

			if (url) {
				twitterHref += '&url=' + url;
			}

			if (via) {
				twitterHref += '&via=' + via;
			}

			return twitterHref;
		}
	}]);

	return ButtonTwitter;
}(_react2.default.Component);

ButtonTwitter.key = 'twitter';
exports.default = (0, _buttonStateClasses2.default)(ButtonTwitter);

/***/ }),

/***/ "./src/components/buttons/button-ul.jsx":
/*!**********************************************!*\
  !*** ./src/components/buttons/button-ul.jsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonUnorderedlist class provides functionality for creating unordered lists in an editor.
 *
 * @class ButtonUnorderedlist
 * @uses ButtonCommand
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonUnorderedlist = function (_React$Component) {
	_inherits(ButtonUnorderedlist, _React$Component);

	function ButtonUnorderedlist() {
		_classCallCheck(this, ButtonUnorderedlist);

		return _possibleConstructorReturn(this, (ButtonUnorderedlist.__proto__ || Object.getPrototypeOf(ButtonUnorderedlist)).apply(this, arguments));
	}

	_createClass(ButtonUnorderedlist, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonUnorderedlist
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonUnorderedlist
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.bulletedlist,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-ul',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.bulletedlist },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'list-ul' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default ul
   * @memberof ButtonUnorderedlist
   * @property {String} key
   * @static
   */

	}]);

	return ButtonUnorderedlist;
}(_react2.default.Component);

ButtonUnorderedlist.defaultProps = {
	command: 'bulletedlist',
	style: {
		element: 'ul'
	}
};
ButtonUnorderedlist.key = 'ul';
exports.default = (0, _buttonCommand2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonUnorderedlist)));

/***/ }),

/***/ "./src/components/buttons/button-underline.jsx":
/*!*****************************************************!*\
  !*** ./src/components/buttons/button-underline.jsx ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonCommand = __webpack_require__(/*! ../base/button-command.js */ "./src/components/base/button-command.js");

var _buttonCommand2 = _interopRequireDefault(_buttonCommand);

var _buttonIcon = __webpack_require__(/*! ./button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _buttonKeystroke = __webpack_require__(/*! ../base/button-keystroke.js */ "./src/components/base/button-keystroke.js");

var _buttonKeystroke2 = _interopRequireDefault(_buttonKeystroke);

var _buttonStateClasses = __webpack_require__(/*! ../base/button-state-classes.js */ "./src/components/base/button-state-classes.js");

var _buttonStateClasses2 = _interopRequireDefault(_buttonStateClasses);

var _buttonStyle = __webpack_require__(/*! ../base/button-style.js */ "./src/components/base/button-style.js");

var _buttonStyle2 = _interopRequireDefault(_buttonStyle);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ButtonUnderline class provides functionality for underlying a text selection.
 *
 * @class ButtonUnderline
 * @uses ButtonCommand
 * @uses ButtonKeystroke
 * @uses ButtonStateClasses
 * @uses ButtonStyle
 */
var ButtonUnderline = function (_React$Component) {
	_inherits(ButtonUnderline, _React$Component);

	function ButtonUnderline() {
		_classCallCheck(this, ButtonUnderline);

		return _possibleConstructorReturn(this, (ButtonUnderline.__proto__ || Object.getPrototypeOf(ButtonUnderline)).apply(this, arguments));
	}

	_createClass(ButtonUnderline, [{
		key: 'render',


		/**
   * Lifecycle. Renders the UI of the button.
   *
   * @instance
   * @memberof ButtonUnderline
   * @method render
   * @return {Object} The content which should be rendered.
   */

		/**
   * Lifecycle. Returns the default values of the properties used in the widget.
   *
   * @instance
   * @memberof ButtonUnderline
   * @method getDefaultProps
   * @return {Object} The default properties.
   */
		value: function render() {
			var cssClass = 'ae-button ' + this.getStateClasses();

			return _react2.default.createElement(
				'button',
				{
					'aria-label': AlloyEditor.Strings.underline,
					'aria-pressed': cssClass.indexOf('pressed') !== -1,
					className: cssClass,
					'data-type': 'button-underline',
					onClick: this.execCommand,
					tabIndex: this.props.tabIndex,
					title: AlloyEditor.Strings.underline },
				_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'underline' })
			);
		}

		/**
   * The name which will be used as an alias of the button in the configuration.
   *
   * @default underline
   * @memberof ButtonUnderline
   * @property {String} key
   * @static
   */

	}]);

	return ButtonUnderline;
}(_react2.default.Component);

ButtonUnderline.defaultProps = {
	command: 'underline',
	keystroke: {
		fn: 'execCommand',
		keys: CKEDITOR.CTRL + 85 /* U*/
	},
	style: 'coreStyles_underline'
};
ButtonUnderline.key = 'underline';
exports.default = (0, _buttonCommand2.default)((0, _buttonKeystroke2.default)((0, _buttonStateClasses2.default)((0, _buttonStyle2.default)(ButtonUnderline))));

/***/ }),

/***/ "./src/components/buttons/index.js":
/*!*****************************************!*\
  !*** ./src/components/buttons/index.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _ButtonAccessibilityI;

var _buttonAccessibilityImageAlt = __webpack_require__(/*! ./button-accessibility-image-alt.jsx */ "./src/components/buttons/button-accessibility-image-alt.jsx");

var _buttonAccessibilityImageAlt2 = _interopRequireDefault(_buttonAccessibilityImageAlt);

var _buttonBackgroundColor = __webpack_require__(/*! ./button-background-color.jsx */ "./src/components/buttons/button-background-color.jsx");

var _buttonBackgroundColor2 = _interopRequireDefault(_buttonBackgroundColor);

var _buttonBold = __webpack_require__(/*! ./button-bold.jsx */ "./src/components/buttons/button-bold.jsx");

var _buttonBold2 = _interopRequireDefault(_buttonBold);

var _buttonCameraImage = __webpack_require__(/*! ./button-camera-image.jsx */ "./src/components/buttons/button-camera-image.jsx");

var _buttonCameraImage2 = _interopRequireDefault(_buttonCameraImage);

var _buttonCamera = __webpack_require__(/*! ./button-camera.jsx */ "./src/components/buttons/button-camera.jsx");

var _buttonCamera2 = _interopRequireDefault(_buttonCamera);

var _buttonCode = __webpack_require__(/*! ./button-code.jsx */ "./src/components/buttons/button-code.jsx");

var _buttonCode2 = _interopRequireDefault(_buttonCode);

var _buttonColor = __webpack_require__(/*! ./button-color.jsx */ "./src/components/buttons/button-color.jsx");

var _buttonColor2 = _interopRequireDefault(_buttonColor);

var _buttonCommandListItem = __webpack_require__(/*! ./button-command-list-item.jsx */ "./src/components/buttons/button-command-list-item.jsx");

var _buttonCommandListItem2 = _interopRequireDefault(_buttonCommandListItem);

var _buttonCommandsList = __webpack_require__(/*! ./button-commands-list.jsx */ "./src/components/buttons/button-commands-list.jsx");

var _buttonCommandsList2 = _interopRequireDefault(_buttonCommandsList);

var _buttonDropdown = __webpack_require__(/*! ./button-dropdown.jsx */ "./src/components/buttons/button-dropdown.jsx");

var _buttonDropdown2 = _interopRequireDefault(_buttonDropdown);

var _buttonEmbedEdit = __webpack_require__(/*! ./button-embed-edit.jsx */ "./src/components/buttons/button-embed-edit.jsx");

var _buttonEmbedEdit2 = _interopRequireDefault(_buttonEmbedEdit);

var _buttonEmbed = __webpack_require__(/*! ./button-embed.jsx */ "./src/components/buttons/button-embed.jsx");

var _buttonEmbed2 = _interopRequireDefault(_buttonEmbed);

var _buttonEmbedVideoEdit = __webpack_require__(/*! ./button-embed-video-edit.jsx */ "./src/components/buttons/button-embed-video-edit.jsx");

var _buttonEmbedVideoEdit2 = _interopRequireDefault(_buttonEmbedVideoEdit);

var _buttonEmbedVideo = __webpack_require__(/*! ./button-embed-video.jsx */ "./src/components/buttons/button-embed-video.jsx");

var _buttonEmbedVideo2 = _interopRequireDefault(_buttonEmbedVideo);

var _buttonH = __webpack_require__(/*! ./button-h1.jsx */ "./src/components/buttons/button-h1.jsx");

var _buttonH2 = _interopRequireDefault(_buttonH);

var _buttonH3 = __webpack_require__(/*! ./button-h2.jsx */ "./src/components/buttons/button-h2.jsx");

var _buttonH4 = _interopRequireDefault(_buttonH3);

var _buttonHline = __webpack_require__(/*! ./button-hline.jsx */ "./src/components/buttons/button-hline.jsx");

var _buttonHline2 = _interopRequireDefault(_buttonHline);

var _buttonImageAlignCenter = __webpack_require__(/*! ./button-image-align-center.jsx */ "./src/components/buttons/button-image-align-center.jsx");

var _buttonImageAlignCenter2 = _interopRequireDefault(_buttonImageAlignCenter);

var _buttonImageAlignLeft = __webpack_require__(/*! ./button-image-align-left.jsx */ "./src/components/buttons/button-image-align-left.jsx");

var _buttonImageAlignLeft2 = _interopRequireDefault(_buttonImageAlignLeft);

var _buttonImageAlignRight = __webpack_require__(/*! ./button-image-align-right.jsx */ "./src/components/buttons/button-image-align-right.jsx");

var _buttonImageAlignRight2 = _interopRequireDefault(_buttonImageAlignRight);

var _buttonImage = __webpack_require__(/*! ./button-image.jsx */ "./src/components/buttons/button-image.jsx");

var _buttonImage2 = _interopRequireDefault(_buttonImage);

var _buttonIndentBlock = __webpack_require__(/*! ./button-indent-block.jsx */ "./src/components/buttons/button-indent-block.jsx");

var _buttonIndentBlock2 = _interopRequireDefault(_buttonIndentBlock);

var _buttonItalic = __webpack_require__(/*! ./button-italic.jsx */ "./src/components/buttons/button-italic.jsx");

var _buttonItalic2 = _interopRequireDefault(_buttonItalic);

var _buttonItemSelectorAudio = __webpack_require__(/*! ./button-item-selector-audio.jsx */ "./src/components/buttons/button-item-selector-audio.jsx");

var _buttonItemSelectorAudio2 = _interopRequireDefault(_buttonItemSelectorAudio);

var _buttonItemSelectorImage = __webpack_require__(/*! ./button-item-selector-image.jsx */ "./src/components/buttons/button-item-selector-image.jsx");

var _buttonItemSelectorImage2 = _interopRequireDefault(_buttonItemSelectorImage);

var _buttonItemSelectorVideo = __webpack_require__(/*! ./button-item-selector-video.jsx */ "./src/components/buttons/button-item-selector-video.jsx");

var _buttonItemSelectorVideo2 = _interopRequireDefault(_buttonItemSelectorVideo);

var _buttonLinkAutocompleteList = __webpack_require__(/*! ./button-link-autocomplete-list.jsx */ "./src/components/buttons/button-link-autocomplete-list.jsx");

var _buttonLinkAutocompleteList2 = _interopRequireDefault(_buttonLinkAutocompleteList);

var _buttonLinkBrowse = __webpack_require__(/*! ./button-link-browse.jsx */ "./src/components/buttons/button-link-browse.jsx");

var _buttonLinkBrowse2 = _interopRequireDefault(_buttonLinkBrowse);

var _buttonLinkEditBrowse = __webpack_require__(/*! ./button-link-edit-browse.jsx */ "./src/components/buttons/button-link-edit-browse.jsx");

var _buttonLinkEditBrowse2 = _interopRequireDefault(_buttonLinkEditBrowse);

var _buttonLinkEdit = __webpack_require__(/*! ./button-link-edit.jsx */ "./src/components/buttons/button-link-edit.jsx");

var _buttonLinkEdit2 = _interopRequireDefault(_buttonLinkEdit);

var _buttonLinkTargetEdit = __webpack_require__(/*! ./button-link-target-edit.jsx */ "./src/components/buttons/button-link-target-edit.jsx");

var _buttonLinkTargetEdit2 = _interopRequireDefault(_buttonLinkTargetEdit);

var _buttonLink = __webpack_require__(/*! ./button-link.jsx */ "./src/components/buttons/button-link.jsx");

var _buttonLink2 = _interopRequireDefault(_buttonLink);

var _buttonOl = __webpack_require__(/*! ./button-ol.jsx */ "./src/components/buttons/button-ol.jsx");

var _buttonOl2 = _interopRequireDefault(_buttonOl);

var _buttonOutdentBlock = __webpack_require__(/*! ./button-outdent-block.jsx */ "./src/components/buttons/button-outdent-block.jsx");

var _buttonOutdentBlock2 = _interopRequireDefault(_buttonOutdentBlock);

var _buttonParagraphAlign = __webpack_require__(/*! ./button-paragraph-align.jsx */ "./src/components/buttons/button-paragraph-align.jsx");

var _buttonParagraphAlign2 = _interopRequireDefault(_buttonParagraphAlign);

var _buttonParagraphAlignLeft = __webpack_require__(/*! ./button-paragraph-align-left.jsx */ "./src/components/buttons/button-paragraph-align-left.jsx");

var _buttonParagraphAlignLeft2 = _interopRequireDefault(_buttonParagraphAlignLeft);

var _buttonParagraphAlignRight = __webpack_require__(/*! ./button-paragraph-align-right.jsx */ "./src/components/buttons/button-paragraph-align-right.jsx");

var _buttonParagraphAlignRight2 = _interopRequireDefault(_buttonParagraphAlignRight);

var _buttonParagraphCenter = __webpack_require__(/*! ./button-paragraph-center.jsx */ "./src/components/buttons/button-paragraph-center.jsx");

var _buttonParagraphCenter2 = _interopRequireDefault(_buttonParagraphCenter);

var _buttonParagraphJustify = __webpack_require__(/*! ./button-paragraph-justify.jsx */ "./src/components/buttons/button-paragraph-justify.jsx");

var _buttonParagraphJustify2 = _interopRequireDefault(_buttonParagraphJustify);

var _buttonQuote = __webpack_require__(/*! ./button-quote.jsx */ "./src/components/buttons/button-quote.jsx");

var _buttonQuote2 = _interopRequireDefault(_buttonQuote);

var _buttonRemoveFormat = __webpack_require__(/*! ./button-remove-format.jsx */ "./src/components/buttons/button-remove-format.jsx");

var _buttonRemoveFormat2 = _interopRequireDefault(_buttonRemoveFormat);

var _buttonSeparator = __webpack_require__(/*! ./button-separator.jsx */ "./src/components/buttons/button-separator.jsx");

var _buttonSeparator2 = _interopRequireDefault(_buttonSeparator);

var _buttonSpacing = __webpack_require__(/*! ./button-spacing.jsx */ "./src/components/buttons/button-spacing.jsx");

var _buttonSpacing2 = _interopRequireDefault(_buttonSpacing);

var _buttonStrike = __webpack_require__(/*! ./button-strike.jsx */ "./src/components/buttons/button-strike.jsx");

var _buttonStrike2 = _interopRequireDefault(_buttonStrike);

var _buttonStylesListHeader = __webpack_require__(/*! ./button-styles-list-header.jsx */ "./src/components/buttons/button-styles-list-header.jsx");

var _buttonStylesListHeader2 = _interopRequireDefault(_buttonStylesListHeader);

var _buttonStylesListItemRemove = __webpack_require__(/*! ./button-styles-list-item-remove.jsx */ "./src/components/buttons/button-styles-list-item-remove.jsx");

var _buttonStylesListItemRemove2 = _interopRequireDefault(_buttonStylesListItemRemove);

var _buttonStylesListItem = __webpack_require__(/*! ./button-styles-list-item.jsx */ "./src/components/buttons/button-styles-list-item.jsx");

var _buttonStylesListItem2 = _interopRequireDefault(_buttonStylesListItem);

var _buttonStylesList = __webpack_require__(/*! ./button-styles-list.jsx */ "./src/components/buttons/button-styles-list.jsx");

var _buttonStylesList2 = _interopRequireDefault(_buttonStylesList);

var _buttonStyles = __webpack_require__(/*! ./button-styles.jsx */ "./src/components/buttons/button-styles.jsx");

var _buttonStyles2 = _interopRequireDefault(_buttonStyles);

var _buttonSubscript = __webpack_require__(/*! ./button-subscript.jsx */ "./src/components/buttons/button-subscript.jsx");

var _buttonSubscript2 = _interopRequireDefault(_buttonSubscript);

var _buttonSuperscript = __webpack_require__(/*! ./button-superscript.jsx */ "./src/components/buttons/button-superscript.jsx");

var _buttonSuperscript2 = _interopRequireDefault(_buttonSuperscript);

var _buttonTableCell = __webpack_require__(/*! ./button-table-cell.jsx */ "./src/components/buttons/button-table-cell.jsx");

var _buttonTableCell2 = _interopRequireDefault(_buttonTableCell);

var _buttonTableColumn = __webpack_require__(/*! ./button-table-column.jsx */ "./src/components/buttons/button-table-column.jsx");

var _buttonTableColumn2 = _interopRequireDefault(_buttonTableColumn);

var _buttonTableEdit = __webpack_require__(/*! ./button-table-edit.jsx */ "./src/components/buttons/button-table-edit.jsx");

var _buttonTableEdit2 = _interopRequireDefault(_buttonTableEdit);

var _buttonTableHeading = __webpack_require__(/*! ./button-table-heading.jsx */ "./src/components/buttons/button-table-heading.jsx");

var _buttonTableHeading2 = _interopRequireDefault(_buttonTableHeading);

var _buttonTableRemove = __webpack_require__(/*! ./button-table-remove.jsx */ "./src/components/buttons/button-table-remove.jsx");

var _buttonTableRemove2 = _interopRequireDefault(_buttonTableRemove);

var _buttonTableRow = __webpack_require__(/*! ./button-table-row.jsx */ "./src/components/buttons/button-table-row.jsx");

var _buttonTableRow2 = _interopRequireDefault(_buttonTableRow);

var _buttonTable = __webpack_require__(/*! ./button-table.jsx */ "./src/components/buttons/button-table.jsx");

var _buttonTable2 = _interopRequireDefault(_buttonTable);

var _buttonTargetList = __webpack_require__(/*! ./button-target-list.jsx */ "./src/components/buttons/button-target-list.jsx");

var _buttonTargetList2 = _interopRequireDefault(_buttonTargetList);

var _buttonTwitter = __webpack_require__(/*! ./button-twitter.jsx */ "./src/components/buttons/button-twitter.jsx");

var _buttonTwitter2 = _interopRequireDefault(_buttonTwitter);

var _buttonUl = __webpack_require__(/*! ./button-ul.jsx */ "./src/components/buttons/button-ul.jsx");

var _buttonUl2 = _interopRequireDefault(_buttonUl);

var _buttonUnderline = __webpack_require__(/*! ./button-underline.jsx */ "./src/components/buttons/button-underline.jsx");

var _buttonUnderline2 = _interopRequireDefault(_buttonUnderline);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = (_ButtonAccessibilityI = {}, _defineProperty(_ButtonAccessibilityI, _buttonAccessibilityImageAlt2.default.key, _buttonAccessibilityImageAlt2.default), _defineProperty(_ButtonAccessibilityI, _buttonBackgroundColor2.default.key, _buttonBackgroundColor2.default), _defineProperty(_ButtonAccessibilityI, _buttonBold2.default.key, _buttonBold2.default), _defineProperty(_ButtonAccessibilityI, _buttonCameraImage2.default.key, _buttonCameraImage2.default), _defineProperty(_ButtonAccessibilityI, _buttonCamera2.default.key, _buttonCamera2.default), _defineProperty(_ButtonAccessibilityI, _buttonCode2.default.key, _buttonCode2.default), _defineProperty(_ButtonAccessibilityI, _buttonColor2.default.key, _buttonColor2.default), _defineProperty(_ButtonAccessibilityI, _buttonCommandListItem2.default.key, _buttonCommandListItem2.default), _defineProperty(_ButtonAccessibilityI, _buttonCommandsList2.default.key, _buttonCommandsList2.default), _defineProperty(_ButtonAccessibilityI, _buttonDropdown2.default.key, _buttonDropdown2.default), _defineProperty(_ButtonAccessibilityI, _buttonEmbedEdit2.default.key, _buttonEmbedEdit2.default), _defineProperty(_ButtonAccessibilityI, _buttonEmbed2.default.key, _buttonEmbed2.default), _defineProperty(_ButtonAccessibilityI, _buttonEmbedVideoEdit2.default.key, _buttonEmbedVideoEdit2.default), _defineProperty(_ButtonAccessibilityI, _buttonEmbedVideo2.default.key, _buttonEmbedVideo2.default), _defineProperty(_ButtonAccessibilityI, _buttonH2.default.key, _buttonH2.default), _defineProperty(_ButtonAccessibilityI, _buttonH4.default.key, _buttonH4.default), _defineProperty(_ButtonAccessibilityI, _buttonHline2.default.key, _buttonHline2.default), _defineProperty(_ButtonAccessibilityI, _buttonImageAlignCenter2.default.key, _buttonImageAlignCenter2.default), _defineProperty(_ButtonAccessibilityI, _buttonImageAlignLeft2.default.key, _buttonImageAlignLeft2.default), _defineProperty(_ButtonAccessibilityI, _buttonImageAlignRight2.default.key, _buttonImageAlignRight2.default), _defineProperty(_ButtonAccessibilityI, _buttonImage2.default.key, _buttonImage2.default), _defineProperty(_ButtonAccessibilityI, _buttonIndentBlock2.default.key, _buttonIndentBlock2.default), _defineProperty(_ButtonAccessibilityI, _buttonItalic2.default.key, _buttonItalic2.default), _defineProperty(_ButtonAccessibilityI, _buttonItemSelectorAudio2.default.key, _buttonItemSelectorAudio2.default), _defineProperty(_ButtonAccessibilityI, _buttonItemSelectorImage2.default.key, _buttonItemSelectorImage2.default), _defineProperty(_ButtonAccessibilityI, _buttonItemSelectorVideo2.default.key, _buttonItemSelectorVideo2.default), _defineProperty(_ButtonAccessibilityI, _buttonLinkAutocompleteList2.default.key, _buttonLinkAutocompleteList2.default), _defineProperty(_ButtonAccessibilityI, _buttonLinkBrowse2.default.key, _buttonLinkBrowse2.default), _defineProperty(_ButtonAccessibilityI, _buttonLinkEditBrowse2.default.key, _buttonLinkEditBrowse2.default), _defineProperty(_ButtonAccessibilityI, _buttonLinkEdit2.default.key, _buttonLinkEdit2.default), _defineProperty(_ButtonAccessibilityI, _buttonLinkTargetEdit2.default.key, _buttonLinkTargetEdit2.default), _defineProperty(_ButtonAccessibilityI, _buttonLink2.default.key, _buttonLink2.default), _defineProperty(_ButtonAccessibilityI, _buttonOl2.default.key, _buttonOl2.default), _defineProperty(_ButtonAccessibilityI, _buttonOutdentBlock2.default.key, _buttonOutdentBlock2.default), _defineProperty(_ButtonAccessibilityI, _buttonParagraphAlign2.default.key, _buttonParagraphAlign2.default), _defineProperty(_ButtonAccessibilityI, _buttonParagraphAlignLeft2.default.key, _buttonParagraphAlignLeft2.default), _defineProperty(_ButtonAccessibilityI, _buttonParagraphAlignRight2.default.key, _buttonParagraphAlignRight2.default), _defineProperty(_ButtonAccessibilityI, _buttonParagraphCenter2.default.key, _buttonParagraphCenter2.default), _defineProperty(_ButtonAccessibilityI, _buttonParagraphJustify2.default.key, _buttonParagraphJustify2.default), _defineProperty(_ButtonAccessibilityI, _buttonQuote2.default.key, _buttonQuote2.default), _defineProperty(_ButtonAccessibilityI, _buttonRemoveFormat2.default.key, _buttonRemoveFormat2.default), _defineProperty(_ButtonAccessibilityI, _buttonSeparator2.default.key, _buttonSeparator2.default), _defineProperty(_ButtonAccessibilityI, _buttonSpacing2.default.key, _buttonSpacing2.default), _defineProperty(_ButtonAccessibilityI, _buttonStrike2.default.key, _buttonStrike2.default), _defineProperty(_ButtonAccessibilityI, _buttonStylesListHeader2.default.key, _buttonStylesListHeader2.default), _defineProperty(_ButtonAccessibilityI, _buttonStylesListItemRemove2.default.key, _buttonStylesListItemRemove2.default), _defineProperty(_ButtonAccessibilityI, _buttonStylesListItem2.default.key, _buttonStylesListItem2.default), _defineProperty(_ButtonAccessibilityI, _buttonStylesList2.default.key, _buttonStylesList2.default), _defineProperty(_ButtonAccessibilityI, _buttonStyles2.default.key, _buttonStyles2.default), _defineProperty(_ButtonAccessibilityI, _buttonSubscript2.default.key, _buttonSubscript2.default), _defineProperty(_ButtonAccessibilityI, _buttonSuperscript2.default.key, _buttonSuperscript2.default), _defineProperty(_ButtonAccessibilityI, _buttonTableCell2.default.key, _buttonTableCell2.default), _defineProperty(_ButtonAccessibilityI, _buttonTableColumn2.default.key, _buttonTableColumn2.default), _defineProperty(_ButtonAccessibilityI, _buttonTableEdit2.default.key, _buttonTableEdit2.default), _defineProperty(_ButtonAccessibilityI, _buttonTableHeading2.default.key, _buttonTableHeading2.default), _defineProperty(_ButtonAccessibilityI, _buttonTableRemove2.default.key, _buttonTableRemove2.default), _defineProperty(_ButtonAccessibilityI, _buttonTableRow2.default.key, _buttonTableRow2.default), _defineProperty(_ButtonAccessibilityI, _buttonTable2.default.key, _buttonTable2.default), _defineProperty(_ButtonAccessibilityI, _buttonTargetList2.default.key, _buttonTargetList2.default), _defineProperty(_ButtonAccessibilityI, _buttonTwitter2.default.key, _buttonTwitter2.default), _defineProperty(_ButtonAccessibilityI, _buttonUl2.default.key, _buttonUl2.default), _defineProperty(_ButtonAccessibilityI, _buttonUnderline2.default.key, _buttonUnderline2.default), _ButtonAccessibilityI);

/***/ }),

/***/ "./src/components/main.jsx":
/*!*********************************!*\
  !*** ./src/components/main.jsx ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _widgetExclusive = __webpack_require__(/*! ./base/widget-exclusive.js */ "./src/components/base/widget-exclusive.js");

var _widgetExclusive2 = _interopRequireDefault(_widgetExclusive);

var _widgetFocusManager = __webpack_require__(/*! ./base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

var _propTypes = __webpack_require__(/*! prop-types */ "./node_modules/prop-types/index.js");

var _propTypes2 = _interopRequireDefault(_propTypes);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The main editor UI class manages a hierarchy of widgets (toolbars and buttons).
 *
 * @class UI
 * @uses WidgetExclusive
 * @uses WidgetFocusManager
 */
var UI = function (_React$Component) {
	_inherits(UI, _React$Component);

	function UI(props) {
		_classCallCheck(this, UI);

		var _this = _possibleConstructorReturn(this, (UI.__proto__ || Object.getPrototypeOf(UI)).call(this, props));

		_this._onDismissToolbarFocus = function () {
			var editor = _this.props.editor.get('nativeEditor');

			editor.focus();
		};

		_this.state = {
			hidden: false
		};
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client, immediately after the initial rendering occurs.
  *
  * @instance
  * @memberof UI
  * @method componentDidMount
  */


	_createClass(UI, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			var _this2 = this;

			var editor = this.props.editor.get('nativeEditor');

			editor.on('editorInteraction', this._onEditorInteraction, this);
			editor.on('actionPerformed', this._onActionPerformed, this);
			editor.on('key', this._onEditorKey, this);

			// Set up events for hiding the UI when user stops interacting with the editor.
			// This may happen when he just clicks outside of the editor. However,
			// this does not include a situation when he clicks on some button, part of
			// editor's UI.

			// It is not easy to debounce _setUIHidden on mousedown, because if we
			// debounce it, when the handler is being invoked, the target might be no more part
			// of the editor's UI - onActionPerformed causes re-render.
			this._mousedownListener = function (event) {
				_this2._setUIHidden(event.target);
			};

			this._keyDownListener = CKEDITOR.tools.debounce(function (_event) {
				_this2._setUIHidden(document.activeElement);
			}, this.props.eventsDelay, this);

			document.addEventListener('mousedown', this._mousedownListener);
			document.addEventListener('keydown', this._keyDownListener);
		}

		/**
   * Lifecycle. Invoked immediately after the component's updates are flushed to the DOM.
   * Fires `ariaUpdate` event passing ARIA related messages.
   * Fires `editorUpdate` event passing the previous and current properties and state.
   *
   * @instance
   * @memberof UI
   * @method componentDidUpdate
   */

	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(prevProps, prevState) {
			var domNode = _reactDom2.default.findDOMNode(this);

			var editor = this.props.editor.get('nativeEditor');

			if (domNode) {
				editor.fire('ariaUpdate', {
					message: this._getAvailableToolbarsMessage(domNode)
				});
			}

			editor.fire('editorUpdate', {
				prevProps: prevProps,
				prevState: prevState,
				props: this.props,
				state: this.state
			});
		}
	}, {
		key: '_getAriaUpdateTemplate',
		value: function _getAriaUpdateTemplate(ariaUpdate) {
			if (!this._ariaUpdateTemplates) {
				this._ariaUpdateTemplates = {};
			}

			if (!this._ariaUpdateTemplates[ariaUpdate]) {
				this._ariaUpdateTemplates[ariaUpdate] = new CKEDITOR.template(this._getAriaUpdates()[ariaUpdate]);
			}

			return this._ariaUpdateTemplates[ariaUpdate];
		}

		/**
   * Returns the templates for ARIA messages.
   *
   * @instance
   * @memberof UI
   * @protected
   * @method _getAriaUpdates
   * @return {Object} ARIA relates messages. Default:
   * {
   *      noToolbar: AlloyEditor.Strings.ariaUpdateNoToolbar,
   *      oneToolbar: AlloyEditor.Strings.ariaUpdateOneToolbar,
   *      manyToolbars: AlloyEditor.Strings.ariaUpdateManyToolbars
   *  }
   */

	}, {
		key: '_getAriaUpdates',
		value: function _getAriaUpdates() {
			return this.props.ariaUpdates || {
				noToolbar: AlloyEditor.Strings.ariaUpdateNoToolbar,
				oneToolbar: AlloyEditor.Strings.ariaUpdateOneToolbar,
				manyToolbars: AlloyEditor.Strings.ariaUpdateManyToolbars
			};
		}

		/**
   * Returns an ARIA message which represents the number of currently available toolbars.
   *
   * @instance
   * @memberof UI
   * @method _getAvailableToolbarsMessage
   * @protected
   * @param {CKEDITOR.dom.element} domNode The DOM node from which the available toolbars will be retrieved.
   * @return {String} The ARIA message for the number of available toolbars
   */

	}, {
		key: '_getAvailableToolbarsMessage',
		value: function _getAvailableToolbarsMessage(domNode) {
			var toolbarsNodeList = domNode.querySelectorAll('[role="toolbar"]');

			if (!toolbarsNodeList.length) {
				return this._getAriaUpdates().noToolbar;
			} else {
				var toolbarNames = Array.prototype.slice.call(toolbarsNodeList).map(function (toolbar) {
					return toolbar.getAttribute('aria-label');
				});

				var ariaUpdate = toolbarNames.length === 1 ? 'oneToolbar' : 'manyToolbars';

				return this._getAriaUpdateTemplate(ariaUpdate).output({
					toolbars: toolbarNames.join(',').replace(/,([^,]*)$/, ' and ' + '$1')
				});
			}
		}

		/**
   * Lifecycle. Invoked immediately before a component is unmounted from the DOM.
   *
   * @instance
   * @memberof UI
   * @method componentWillUnmount
   */

	}, {
		key: 'componentWillUnmount',
		value: function componentWillUnmount() {
			if (this._mousedownListener) {
				document.removeEventListener('mousedown', this._mousedownListener);
			}

			if (this._keyDownListener) {
				this._keyDownListener.detach();
				document.removeEventListener('keydown', this._keyDownListener);
			}
		}

		/**
   * Lifecycle. Renders the UI of the editor. This may include several toolbars and buttons.
   * The editor's UI also takes care of rendering the items in exclusive mode.
   *
   * @instance
   * @memberof UI
   * @method render
   * @return {Object} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var _this3 = this;

			if (this.state.hidden) {
				return null;
			}

			var toolbars = Object.keys(this.props.toolbars).map(function (toolbar) {
				return AlloyEditor.Toolbars[toolbar] || window[toolbar];
			});

			toolbars = this.filterExclusive(toolbars).map(function (toolbar) {
				var props = _this3.mergeExclusiveProps({
					config: _this3.props.toolbars[toolbar.key],
					editor: _this3.props.editor,
					editorEvent: _this3.state.editorEvent,
					key: toolbar.key,
					onDismiss: _this3._onDismissToolbarFocus,
					selectionData: _this3.state.selectionData
				}, toolbar.key);

				return _react2.default.createElement(toolbar, props);
			});

			return _react2.default.createElement(
				'div',
				{ className: 'ae-toolbars', onKeyDown: this.handleKey },
				toolbars
			);
		}

		/**
   * Listener to the editor's `actionPerformed` event. Sets state and redraws the UI of the editor.
   *
   * @instance
   * @memberof UI
   * @protected
   * @method _onActionPerformed
   * @param {SynteticEvent} event The provided event
   */

	}, {
		key: '_onActionPerformed',
		value: function _onActionPerformed(_event) {
			var editor = this.props.editor.get('nativeEditor');

			editor.focus();

			this.setState({
				itemExclusive: null,
				selectionData: editor.getSelectionData()
			});
		}

		/**
   * Executed when a dismiss key is pressed over a toolbar to return the focus to the editor.
   *
   * @instance
   * @memberof UI
   * @protected
   * @method _onDismissToolbarFocus
   */

	}, {
		key: '_onEditorInteraction',


		/**
   * Listener to the editor's `userInteraction` event. Retrieves the data about the user selection and
   * provides it via component's state property.
   *
   * @instance
   * @memberof UI
   * @protected
   * @method _onEditorInteraction
   * @param {SynteticEvent} event The provided event
   */
		value: function _onEditorInteraction(event) {
			this.setState({
				editorEvent: event,
				hidden: false,
				itemExclusive: null,
				selectionData: event.data.selectionData
			});
		}

		/**
   * Focuses on the active toolbar when the combination ALT+F10 is pressed inside the editor.
   *
   * @instance
   * @memberof UI
   * @protected
   * @method _onEditorKey
   */

	}, {
		key: '_onEditorKey',
		value: function _onEditorKey(event) {
			var nativeEvent = event.data.domEvent.$;

			if (nativeEvent.altKey && nativeEvent.keyCode === 121) {
				this.focus();
			}
		}

		/**
   * Checks if the target with which the user interacted is part of editor's UI or it is
   * the editable area. If none of these, sets the state of editor's UI to be hidden.
   *
   * @instance
   * @memberof UI
   * @protected
   * @method _setUIHidden
   * @param {DOMElement} target The DOM element with which user interacted lastly.
   */

	}, {
		key: '_setUIHidden',
		value: function _setUIHidden(target) {
			var domNode = _reactDom2.default.findDOMNode(this);

			if (domNode) {
				var editable = this.props.editor.get('nativeEditor').editable();
				var parentNode = target.parentNode;
				var targetNode = new CKEDITOR.dom.node(target);

				if (!editable) {
					this.setState({
						hidden: true
					});
				} else {
					var res = editable.$ === target || editable.contains(targetNode) || new CKEDITOR.dom.element(domNode).contains(targetNode);

					if (parentNode) {
						res = res || parentNode.id === 'ckimgrsz';
					}

					if (!res) {
						this.setState({
							hidden: true
						});
					}
				}
			}
		}
	}]);

	return UI;
}(_react2.default.Component);

/**
 * Lifecycle. Returns the default values of the properties used in the widget.
 *
 * @instance
 * @memberof UI
 * @method getDefaultProps
 * @return {Object} The default properties.
 */


UI.defaultProps = {
	circular: true,
	descendants: '[class^=ae-toolbar-]',
	eventsDelay: 0,
	keys: {
		next: 9
	}
};

/**
 * Fired when component updates and when it is rendered in the DOM.
 * The payload consists from a `message` property containing the ARIA message.
 *
 * @event ariaUpdate
 */

/**
 * Fired when component updates. The payload consists from an object with the following
 * properties:
 * - prevProps - The previous properties of the component
 * - prevState - The previous state of the component
 * - props - The current properties of the component
 * - state - The current state of the component
 *
 * @event ariaUpdate
 */

UI.propTypes = {
	/**
  * Localized messages for live aria updates. Should include the following messages:
  * - noToolbar: Notification for no available toolbar in the editor.
  * - oneToolbar: Notification for just one available toolbar in the editor.
  * - manyToolbars: Notification for more than one available toolbar in the editor.
  *
  * @instance
  * @memberof UI
  * @property {Object} ariaUpdates
  */
	ariaUpdates: _propTypes2.default.object,

	/**
  * The editor instance where the component is being used.
  *
  * @instance
  * @memberof UI
  * @property {Object} editor
  */
	editor: _propTypes2.default.object.isRequired,

	/**
  * The delay (ms), after which key or mouse events will be processed.
  *
  * @instance
  * @memberof UI
  * @property {Number} eventsDelay
  */
	eventsDelay: _propTypes2.default.number,

	/**
  * The toolbars configuration for this editor instance
  *
  * @instance
  * @memberof UI
  * @property {Object} toolbars
  */
	toolbars: _propTypes2.default.object.isRequired
};

exports.default = (0, _widgetExclusive2.default)((0, _widgetFocusManager2.default)(UI));

/***/ }),

/***/ "./src/components/toolbars/index.js":
/*!******************************************!*\
  !*** ./src/components/toolbars/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _ToolbarAdd$key$Toolb;

var _toolbarAdd = __webpack_require__(/*! ./toolbar-add.jsx */ "./src/components/toolbars/toolbar-add.jsx");

var _toolbarAdd2 = _interopRequireDefault(_toolbarAdd);

var _toolbarStyles = __webpack_require__(/*! ./toolbar-styles.jsx */ "./src/components/toolbars/toolbar-styles.jsx");

var _toolbarStyles2 = _interopRequireDefault(_toolbarStyles);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

exports.default = (_ToolbarAdd$key$Toolb = {}, _defineProperty(_ToolbarAdd$key$Toolb, _toolbarAdd2.default.key, _toolbarAdd2.default), _defineProperty(_ToolbarAdd$key$Toolb, _toolbarStyles2.default.key, _toolbarStyles2.default), _ToolbarAdd$key$Toolb);

/***/ }),

/***/ "./src/components/toolbars/toolbar-add.jsx":
/*!*************************************************!*\
  !*** ./src/components/toolbars/toolbar-add.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _toolbarButtons = __webpack_require__(/*! ../base/toolbar-buttons.js */ "./src/components/base/toolbar-buttons.js");

var _toolbarButtons2 = _interopRequireDefault(_toolbarButtons);

var _widgetArrowBox = __webpack_require__(/*! ../base/widget-arrow-box.js */ "./src/components/base/widget-arrow-box.js");

var _widgetArrowBox2 = _interopRequireDefault(_widgetArrowBox);

var _widgetDropdown = __webpack_require__(/*! ../base/widget-dropdown.js */ "./src/components/base/widget-dropdown.js");

var _widgetDropdown2 = _interopRequireDefault(_widgetDropdown);

var _widgetExclusive = __webpack_require__(/*! ../base/widget-exclusive.js */ "./src/components/base/widget-exclusive.js");

var _widgetExclusive2 = _interopRequireDefault(_widgetExclusive);

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

var _widgetPosition = __webpack_require__(/*! ../base/widget-position.js */ "./src/components/base/widget-position.js");

var _widgetPosition2 = _interopRequireDefault(_widgetPosition);

var _buttonIcon = __webpack_require__(/*! ../buttons/button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var POSITION_LEFT = 1;
var POSITION_RIGHT = 2;

/**
 * The ToolbarAdd class provides functionality for adding content to the editor.
 *
 * @class ToolbarAdd
 * @uses ToolbarButtons
 * @uses WidgetArrowBox
 * @uses WidgetDropdown
 * @uses WidgetExclusive
 * @uses WidgetFocusManager
 * @uses WidgetPosition
 */

var ToolbarAdd = function (_React$Component) {
	_inherits(ToolbarAdd, _React$Component);

	function ToolbarAdd(props) {
		_classCallCheck(this, ToolbarAdd);

		var _this = _possibleConstructorReturn(this, (ToolbarAdd.__proto__ || Object.getPrototypeOf(ToolbarAdd)).call(this, props));

		_this.state = {};
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client (not on the server),
  * immediately after the initial rendering occurs.
  *
  * @instance
  * @memberof ToolbarAdd
  * @method componentDidMount
  */


	_createClass(ToolbarAdd, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this._updatePosition();
		}

		/**
   * Lifecycle. Invoked immediately after the component's updates are flushed to the DOM.
   * This method is not called for the initial render.
   *
   * @instance
   * @memberof ToolbarAdd
   * @method componentDidUpdate
   * @param {Object} prevProps The previous state of the component's properties.
   * @param {Object} prevState Component's previous state.
   */

	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(_prevProps, _prevState) {
			this._updatePosition();

			// In case of exclusive rendering, focus the first descendant (button)
			// so the user will be able to start interacting with the buttons immediately.
			if (this.props.renderExclusive) {
				this.focus();
			}
		}

		/**
   * Lifecycle. Renders the buttons for adding content or hides the toolbar
   * if user interacted with a non-editable element.
   *
   * @instance
   * @memberof ToolbarAdd
   * @method render
   * @return {Object|null} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			// Some operations such as `requestExclusive` may force editor to blur which will
			// invalidate the `props.editorEvent` stored value, without causing a `props` change.
			// For example, if the editor is empty, `ae_placeholder` plugin will remove
			// the target from the DOM and will prevent `add` toolbar from rendering.
			//
			// It should be safe to assume that if you have been able to render the toolbar
			// and request the exclusive mode, then rendering might be kept until the exclusive mode is left.
			if (!this.state.itemExclusive && this.props.editorEvent && this.props.editorEvent.data.nativeEvent.target && !this.props.editorEvent.data.nativeEvent.target.isContentEditable) {
				return null;
			}

			var buttons = this._getButtons();
			var className = this._getToolbarClassName();

			return _react2.default.createElement(
				'div',
				{
					'aria-label': AlloyEditor.Strings.add,
					className: className,
					'data-tabindex': this.props.config.tabIndex || 0,
					onFocus: this.focus.bind(this),
					onKeyDown: this.handleKey.bind(this),
					role: 'toolbar',
					tabIndex: '-1' },
				_react2.default.createElement(
					'div',
					{ className: 'ae-container' },
					buttons
				)
			);
		}

		/**
   * Returns a list of buttons that will eventually render to HTML.
   *
   * @instance
   * @memberof ToolbarAdd
   * @method _getButtons
   * @protected
   * @return {Object} The buttons which have to be rendered.
   */

	}, {
		key: '_getButtons',
		value: function _getButtons() {
			var buttons = void 0;

			if (this.props.renderExclusive) {
				buttons = this.getToolbarButtons(this.props.config.buttons);
			} else {
				if (this.props.selectionData && this.props.selectionData.region) {
					buttons = _react2.default.createElement(
						'button',
						{
							'aria-label': AlloyEditor.Strings.add,
							className: 'ae-button ae-button-add',
							onClick: this.props.requestExclusive.bind(this, ToolbarAdd.key),
							title: AlloyEditor.Strings.add },
						_react2.default.createElement(_buttonIcon2.default, { editor: this.props.editor, symbol: 'plus' })
					);
				}
			}

			return buttons;
		}

		/**
   * Returns the class name of the toolbar in case of both exclusive and normal mode.
   *
   * @instance
   * @memberof ToolbarAdd
   * @method _getToolbarClassName
   * @protected
   * @return {String} The class name which have to be applied to the DOM element.
   */

	}, {
		key: '_getToolbarClassName',
		value: function _getToolbarClassName() {
			var cssClass = 'ae-toolbar-add';

			if (this.props.renderExclusive) {
				cssClass = 'ae-toolbar ' + this.getArrowBoxClasses();
			}

			return cssClass;
		}

		/**
   * Calculates and sets the position of the toolbar in exclusive or normal mode.
   *
   * @instance
   * @memberof ToolbarAdd
   * @method _updatePosition
   * @protected
   */

	}, {
		key: '_updatePosition',
		value: function _updatePosition() {
			var region = void 0;

			// If component is not mounted, there is nothing to do
			if (!_reactDom2.default.findDOMNode(this)) {
				return;
			}

			if (this.props.renderExclusive) {
				this.updatePosition();
				this.show();
			} else {
				if (this.props.selectionData) {
					region = this.props.selectionData.region;
				}

				if (region) {
					var domNode = _reactDom2.default.findDOMNode(this);

					var domElement = new CKEDITOR.dom.element(domNode);

					var startRect = region.startRect || region;

					var nativeEditor = this.props.editor.get('nativeEditor');

					var clientRect = nativeEditor.editable().getClientRect();

					var offsetLeft = void 0;

					var position = this.props.config.position || this.props.position;

					if (position === POSITION_LEFT) {
						offsetLeft = clientRect.left - domNode.offsetWidth - this.props.gutterExclusive.left + 'px';
					} else {
						offsetLeft = clientRect.right + this.props.gutterExclusive.left + 'px';
					}

					domNode.style.left = offsetLeft;

					domNode.style.top = Math.floor((region.bottom + region.top) / 2) + 'px';

					var uiNode = this.props.editor.get('uiNode');

					var scrollTop = uiNode ? uiNode.scrollTop : 0;

					if (nativeEditor.element.getStyle('overflow') !== 'auto') {
						domNode.style.top = Math.floor(region.top - domNode.offsetHeight / 2 + startRect.height / 2 + scrollTop) + 'px';
					} else {
						domNode.style.top = Math.floor(nativeEditor.element.$.offsetTop + startRect.height / 2 - domNode.offsetHeight / 2) + 'px';
					}

					domNode.style.opacity = 1;

					domElement.removeClass('ae-arrow-box');

					this.cancelAnimation();
				}
			}
		}
	}]);

	return ToolbarAdd;
}(_react2.default.Component);

/**
 * The name which will be used as an alias of the button in the configuration.
 *
 * @default add
 * @memberof ToolbarAdd
 * @property {String} key
 * @static
 */


ToolbarAdd.key = 'add';

/**
 * Defines the constant for positioning the Toolbar on left of the editable area.
 *
 * @default 1
 * @memberof ToolbarAdd
 * @property {String} left
 * @static
 */
ToolbarAdd.left = POSITION_LEFT;

/**
 * Defines the constant for positioning the Toolbar on right of the editable area.
 *
 * @default 2
 * @memberof ToolbarAdd
 * @property {String} right
 * @static
 */
ToolbarAdd.right = POSITION_RIGHT;

/**
 * Lifecycle. Returns the default values of the properties used in the widget.
 *
 * @instance
 * @memberof ToolbarAdd
 * @method getDefaultProps
 * @return {Object} The default properties.
 */
ToolbarAdd.defaultProps = {
	circular: true,
	descendants: '.ae-button',
	gutterExclusive: {
		left: 10,
		top: 0
	},
	keys: {
		dismiss: [27],
		next: [39, 40],
		prev: [37, 38]
	},
	position: POSITION_LEFT
};

exports.default = (0, _widgetArrowBox2.default)((0, _widgetDropdown2.default)((0, _widgetExclusive2.default)((0, _widgetFocusManager2.default)((0, _widgetPosition2.default)((0, _toolbarButtons2.default)(ToolbarAdd))))));

/***/ }),

/***/ "./src/components/toolbars/toolbar-styles.jsx":
/*!****************************************************!*\
  !*** ./src/components/toolbars/toolbar-styles.jsx ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _lang = __webpack_require__(/*! ../../oop/lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

var _toolbarButtons = __webpack_require__(/*! ../base/toolbar-buttons.js */ "./src/components/base/toolbar-buttons.js");

var _toolbarButtons2 = _interopRequireDefault(_toolbarButtons);

var _widgetArrowBox = __webpack_require__(/*! ../base/widget-arrow-box.js */ "./src/components/base/widget-arrow-box.js");

var _widgetArrowBox2 = _interopRequireDefault(_widgetArrowBox);

var _widgetDropdown = __webpack_require__(/*! ../base/widget-dropdown.js */ "./src/components/base/widget-dropdown.js");

var _widgetDropdown2 = _interopRequireDefault(_widgetDropdown);

var _widgetExclusive = __webpack_require__(/*! ../base/widget-exclusive.js */ "./src/components/base/widget-exclusive.js");

var _widgetExclusive2 = _interopRequireDefault(_widgetExclusive);

var _widgetFocusManager = __webpack_require__(/*! ../base/widget-focus-manager.js */ "./src/components/base/widget-focus-manager.js");

var _widgetFocusManager2 = _interopRequireDefault(_widgetFocusManager);

var _widgetPosition = __webpack_require__(/*! ../base/widget-position.js */ "./src/components/base/widget-position.js");

var _widgetPosition2 = _interopRequireDefault(_widgetPosition);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * The ToolbarStyles class hosts the buttons for styling a text selection.
 *
 * @class ToolbarStyles
 * @uses ToolbarButtons
 * @uses WidgetArrowBox
 * @uses WidgetDropdown
 * @uses WidgetExclusive
 * @uses WidgetFocusManager
 * @uses WidgetPosition
 */
var ToolbarStyles = function (_React$Component) {
	_inherits(ToolbarStyles, _React$Component);

	function ToolbarStyles(props) {
		_classCallCheck(this, ToolbarStyles);

		var _this = _possibleConstructorReturn(this, (ToolbarStyles.__proto__ || Object.getPrototypeOf(ToolbarStyles)).call(this, props));

		_this.state = {};
		return _this;
	}

	/**
  * Lifecycle. Invoked once, only on the client (not on the server),
  * immediately after the initial rendering occurs.
  *
  * @instance
  * @memberof ToolbarStyles
  * @method componentDidMount
  */


	_createClass(ToolbarStyles, [{
		key: 'componentDidMount',
		value: function componentDidMount() {
			this._updatePosition();
		}

		/**
   * Lifecycle. Invoked immediately after the component's updates are flushed to the DOM.
   * This method is not called for the initial render.
   *
   * @instance
   * @memberof ToolbarStyles
   * @method componentDidUpdate
   * @param {Object} prevProps The previous state of the component's properties.
   * @param {Object} prevState Component's previous state.
   */

	}, {
		key: 'componentDidUpdate',
		value: function componentDidUpdate(_prevProps, _prevState) {
			this._updatePosition();
		}

		/**
   * Lifecycle. Renders the buttons for adding content or hides the toolbar
   * if user interacted with a non-editable element.
   *
   * @instance
   * @memberof ToolbarStyles
   * @method render
   * @return {Object|null} The content which should be rendered.
   */

	}, {
		key: 'render',
		value: function render() {
			var currentSelection = this._getCurrentSelection();

			if (currentSelection) {
				var getArrowBoxClassesFn = this._getSelectionFunction(currentSelection.getArrowBoxClasses);
				var arrowBoxClasses = void 0;

				if (getArrowBoxClassesFn) {
					arrowBoxClasses = getArrowBoxClassesFn();
				} else {
					arrowBoxClasses = this.getArrowBoxClasses();
				}

				var cssClasses = 'ae-toolbar-styles ' + arrowBoxClasses;

				var buttons = currentSelection.buttons;

				if ((typeof buttons === 'undefined' ? 'undefined' : _typeof(buttons)) === 'object' && !Array.isArray(buttons)) {
					buttons = buttons[this.props.editor.get('mode')] || buttons['simple'];
				}

				var buttonsGroup = this.getToolbarButtonGroups(buttons, {
					manualSelection: this.props.editorEvent ? this.props.editorEvent.data.manualSelection : null,
					selectionType: currentSelection.name
				});

				var hasGroups = buttonsGroup.filter(function (button) {
					return Array.isArray(button);
				}).length > 0;

				var className = 'ae-container';

				if (hasGroups) {
					className += ' ae-container-column';
				}

				return _react2.default.createElement(
					'div',
					{
						'aria-label': AlloyEditor.Strings.styles,
						className: cssClasses,
						'data-tabindex': this.props.config.tabIndex || 0,
						onFocus: this.focus.bind(this),
						onKeyDown: this.handleKey.bind(this),
						role: 'toolbar',
						tabIndex: '-1' },
					_react2.default.createElement(
						'div',
						{ className: className },
						buttonsGroup.map(function (value, index) {
							if (Array.isArray(value)) {
								return _react2.default.createElement(
									'div',
									{ className: 'ae-row', key: index },
									value.map(function (button) {
										return button;
									})
								);
							} else {
								return value;
							}
						})
					)
				);
			}

			return null;
		}

		/**
   * Retrieve a function from String. It converts a fully qualified string into the mapped function.
   *
   * @instance
   * @memberof ToolbarStyles
   * @method _getSelectionFunction
   * @param {Function|String} selectionFn A function, or a fully qualified string pointing to the desired one (e.g. 'AlloyEditor.SelectionTest.image').
   * @protected
   * @return {Function} The mapped function.
   */

	}, {
		key: '_getSelectionFunction',
		value: function _getSelectionFunction(selectionFn) {
			var selectionFunction = void 0;

			if (_lang2.default.isFunction(selectionFn)) {
				selectionFunction = selectionFn;
			} else if (_lang2.default.isString(selectionFn)) {
				var parts = selectionFn.split('.');
				var currentMember = window;
				var property = parts.shift();

				while (property && _lang2.default.isObject(currentMember) && _lang2.default.isObject(currentMember[property])) {
					currentMember = currentMember[property];
					property = parts.shift();
				}

				if (_lang2.default.isFunction(currentMember)) {
					selectionFunction = currentMember;
				}
			}

			return selectionFunction;
		}

		/**
   * Analyzes the current editor selection and returns the selection configuration that matches.
   *
   * @instance
   * @memberof ToolbarStyles
   * @method _getCurrentSelection
   * @protected
   * @return {Object} The matched selection configuration.
   */

	}, {
		key: '_getCurrentSelection',
		value: function _getCurrentSelection() {
			var eventPayload = this.props.editorEvent ? this.props.editorEvent.data : null;
			var selection = void 0;

			if (eventPayload) {
				this.props.config.selections.some(function (item) {
					var testFn = this._getSelectionFunction(item.test);
					var result = void 0;

					if (testFn) {
						result = eventPayload.manualSelection === item.name || testFn({
							data: eventPayload,
							editor: this.props.editor
						});
					}

					if (result) {
						selection = item;
					}

					return result;
				}, this);
			}

			return selection;
		}

		/**
   * Calculates and sets the position of the toolbar.
   *
   * @instance
   * @memberof ToolbarStyles
   * @method _updatePosition
   * @protected
   */

	}, {
		key: '_updatePosition',
		value: function _updatePosition() {
			// If component is not mounted, there is nothing to do
			if (!_reactDom2.default.findDOMNode(this)) {
				return;
			}

			var currentSelection = this._getCurrentSelection();
			var result = void 0;

			// If current selection has a function called `setPosition`, call it
			// and check the returned value. If false, fallback to the default positioning logic.
			if (currentSelection) {
				var setPositionFn = this._getSelectionFunction(currentSelection.setPosition);

				if (setPositionFn) {
					result = setPositionFn.call(this, {
						editor: this.props.editor,
						editorEvent: this.props.editorEvent,
						selectionData: this.props.selectionData
					});
				}
			}

			if (!result) {
				this.updatePosition();
				this.show();
			}
		}
	}]);

	return ToolbarStyles;
}(_react2.default.Component);

/**
 * Lifecycle. Returns the default values of the properties used in the widget.
 *
 * @instance
 * @memberof ToolbarStyles
 * @method getDefaultProps
 * @return {Object} The default properties.
 */


ToolbarStyles.defaultProps = {
	circular: true,
	descendants: '.ae-input, .ae-button:not([disabled]), .ae-toolbar-element',
	keys: {
		dismiss: [27],
		next: [39, 40],
		prev: [37, 38]
	}
};

/**
 * The name which will be used as an alias of the button in the configuration.
 *
 * @default styles
 * @memberof ToolbarStyles
 * @property {String} key
 * @static
 */
ToolbarStyles.key = 'styles';

exports.default = (0, _widgetArrowBox2.default)((0, _widgetDropdown2.default)((0, _widgetExclusive2.default)((0, _widgetFocusManager2.default)((0, _widgetPosition2.default)((0, _toolbarButtons2.default)(ToolbarStyles))))));

/***/ }),

/***/ "./src/components/uibridge/button.jsx":
/*!********************************************!*\
  !*** ./src/components/uibridge/button.jsx ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {
	'use strict';

	/* istanbul ignore if */

	if (CKEDITOR.plugins.get('ae_buttonbridge')) {
		return;
	}

	var BUTTON_DEFS = {};

	/**
  * Generates a ButtonBridge React class for a given button definition if it has not been
  * already created based on the button name and definition.
  *
  * @private
  * @method generateButtonBridge
  * @param {String} buttonName The button's name
  * @param {Object} buttonDefinition The button's definition
  * @return {Object} The generated or already existing React Button Class
  */

	function generateButtonBridge(buttonName, buttonDefinition, editor) {
		var ButtonBridge = AlloyEditor.Buttons[buttonName];

		BUTTON_DEFS[editor.name] = BUTTON_DEFS[editor.name] || {};
		BUTTON_DEFS[editor.name][buttonName] = BUTTON_DEFS[editor.name][buttonName] || buttonDefinition;

		if (!ButtonBridge) {
			var _class, _temp2;

			ButtonBridge = (_temp2 = _class = function (_React$Component) {
				_inherits(ButtonBridge, _React$Component);

				function ButtonBridge() {
					var _ref;

					var _temp, _this, _ret;

					_classCallCheck(this, ButtonBridge);

					for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
						args[_key] = arguments[_key];
					}

					return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = ButtonBridge.__proto__ || Object.getPrototypeOf(ButtonBridge)).call.apply(_ref, [this].concat(args))), _this), _this._handleClick = function () {
						var editor = _this.props.editor.get('nativeEditor');

						var buttonCommand = BUTTON_DEFS[editor.name][buttonName].command;

						var buttonOnClick = BUTTON_DEFS[editor.name][buttonName].onClick;

						if (buttonOnClick) {
							buttonOnClick.call(_this);
						} else {
							editor.execCommand(buttonCommand);
						}

						editor.fire('actionPerformed', _this);
					}, _temp), _possibleConstructorReturn(_this, _ret);
				}

				_createClass(ButtonBridge, [{
					key: 'toFeature',


					// API not yet implemented inside the button
					// bridge. By mocking the unsupported method, we prevent
					// plugins from crashing if they make use of it.
					value: function toFeature() {}
				}, {
					key: 'render',
					value: function render() {
						var editor = this.props.editor.get('nativeEditor');

						var buttonClassName = 'ae-button ae-button-bridge';

						var buttonDisplayName = BUTTON_DEFS[editor.name][buttonName].name || BUTTON_DEFS[editor.name][buttonName].command || buttonName;

						var buttonLabel = BUTTON_DEFS[editor.name][buttonName].label;

						var buttonType = 'button-' + buttonDisplayName;

						var iconClassName = 'ae-icon-' + buttonDisplayName;

						var iconStyle = {};

						var cssStyle = CKEDITOR.skin.getIconStyle(buttonDisplayName);

						if (cssStyle) {
							var cssStyleParts = cssStyle.split(';');

							iconStyle.backgroundImage = cssStyleParts[0].substring(cssStyleParts[0].indexOf(':') + 1);
							iconStyle.backgroundPosition = cssStyleParts[1].substring(cssStyleParts[1].indexOf(':') + 1);
							iconStyle.backgroundSize = cssStyleParts[2].substring(cssStyleParts[2].indexOf(':') + 1);
						}

						return _react2.default.createElement(
							'button',
							{
								'aria-label': buttonLabel,
								className: buttonClassName,
								'data-type': buttonType,
								onClick: this._handleClick,
								tabIndex: this.props.tabIndex,
								title: buttonLabel },
							_react2.default.createElement('span', { className: iconClassName, style: iconStyle })
						);
					}
				}]);

				return ButtonBridge;
			}(_react2.default.Component), _class.displayName = buttonName, _class.key = buttonName, _temp2);

			AlloyEditor.Buttons[buttonName] = ButtonBridge;
		}

		return ButtonBridge;
	}

	/* istanbul ignore else */
	if (!CKEDITOR.plugins.get('button')) {
		CKEDITOR.UI_BUTTON = 'button';

		CKEDITOR.plugins.add('button', {});
	}

	/**
  * CKEditor plugin that bridges the support offered by CKEditor Button plugin. It takes over the
  * responsibility of registering and creating buttons via:
  * - editor.ui.addButton(name, definition)
  * - editor.ui.add(name, CKEDITOR.UI_BUTTON, definition)
  *
  * @class CKEDITOR.plugins.ae_buttonbridge
  * @requires CKEDITOR.plugins.ae_uibridge
  * @constructor
  */
	CKEDITOR.plugins.add('ae_buttonbridge', {
		requires: ['ae_uibridge'],

		/**
   * Set the add handler for UI_BUTTON to our own. We do this in the init phase to override
   * the one in the native plugin in case it's present.
   *
   * @method init
   * @param {Object} editor The CKEditor instance being initialized
   */
		beforeInit: function beforeInit(editor) {
			editor.ui.addButton = function (buttonName, buttonDefinition) {
				this.add(buttonName, CKEDITOR.UI_BUTTON, buttonDefinition);
			};

			editor.ui.addHandler(CKEDITOR.UI_BUTTON, {
				add: generateButtonBridge,
				create: function create(buttonDefinition) {
					var buttonName = 'buttonBridge' + (Math.random() * 1e9 >>> 0);
					var ButtonBridge = generateButtonBridge(buttonName, buttonDefinition);

					return new ButtonBridge();
				}
			});
		}
	});
})();

/***/ }),

/***/ "./src/components/uibridge/index.js":
/*!******************************************!*\
  !*** ./src/components/uibridge/index.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uibridge = exports.richcombo = exports.panelMenuButton = exports.menu = exports.menuButton = exports.button = undefined;

var _button = __webpack_require__(/*! ./button.jsx */ "./src/components/uibridge/button.jsx");

var _button2 = _interopRequireDefault(_button);

var _menuButton = __webpack_require__(/*! ./menu-button.jsx */ "./src/components/uibridge/menu-button.jsx");

var _menuButton2 = _interopRequireDefault(_menuButton);

var _menu = __webpack_require__(/*! ./menu.jsx */ "./src/components/uibridge/menu.jsx");

var _menu2 = _interopRequireDefault(_menu);

var _panelMenuButton = __webpack_require__(/*! ./panel-menu-button.jsx */ "./src/components/uibridge/panel-menu-button.jsx");

var _panelMenuButton2 = _interopRequireDefault(_panelMenuButton);

var _richcombo = __webpack_require__(/*! ./richcombo.jsx */ "./src/components/uibridge/richcombo.jsx");

var _richcombo2 = _interopRequireDefault(_richcombo);

var _uibridge = __webpack_require__(/*! ./uibridge */ "./src/components/uibridge/uibridge.js");

var _uibridge2 = _interopRequireDefault(_uibridge);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.button = _button2.default;
exports.menuButton = _menuButton2.default;
exports.menu = _menu2.default;
exports.panelMenuButton = _panelMenuButton2.default;
exports.richcombo = _richcombo2.default;
exports.uibridge = _uibridge2.default;

/***/ }),

/***/ "./src/components/uibridge/menu-button.jsx":
/*!*************************************************!*\
  !*** ./src/components/uibridge/menu-button.jsx ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonDropdown = __webpack_require__(/*! ../buttons/button-dropdown.jsx */ "./src/components/buttons/button-dropdown.jsx");

var _buttonDropdown2 = _interopRequireDefault(_buttonDropdown);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {
	'use strict';

	/* istanbul ignore if */

	if (CKEDITOR.plugins.get('ae_menubuttonbridge')) {
		return;
	}

	var MENUBUTTON_DEFS = {};

	/**
  * Generates a MenuButtonBridge React class for a given menuButton definition if it has not been
  * already created based on the button name and definition.
  *
  * @private
  * @method generateMenuButtonBridge
  * @param {String} menuButtonName The menuButton's name
  * @param {Object} menuButtonDefinition The menuButton's definition
  * @return {Object} The generated or already existing React MenuButton Class
  */
	function generateMenuButtonBridge(menuButtonName, menuButtonDefinition, editor) {
		var MenuButtonBridge = AlloyEditor.Buttons[menuButtonName];

		MENUBUTTON_DEFS[editor.name] = MENUBUTTON_DEFS[editor.name] || {};
		MENUBUTTON_DEFS[editor.name][menuButtonName] = MENUBUTTON_DEFS[editor.name][menuButtonName] || menuButtonDefinition;

		if (!MenuButtonBridge) {
			var _class, _temp;

			MenuButtonBridge = (_temp = _class = function (_React$Component) {
				_inherits(MenuButtonBridge, _React$Component);

				function MenuButtonBridge() {
					_classCallCheck(this, MenuButtonBridge);

					return _possibleConstructorReturn(this, (MenuButtonBridge.__proto__ || Object.getPrototypeOf(MenuButtonBridge)).apply(this, arguments));
				}

				_createClass(MenuButtonBridge, [{
					key: 'toFeature',


					// API not yet implemented inside the menubutton
					// bridge. By mocking the unsupported method, we prevent
					// plugins from crashing if they make use of it.
					value: function toFeature() {}
				}, {
					key: 'render',
					value: function render() {
						var editor = this.props.editor.get('nativeEditor');

						var panelMenuButtonDisplayName = MENUBUTTON_DEFS[editor.name][menuButtonName].name || MENUBUTTON_DEFS[editor.name][menuButtonName].command || menuButtonName;

						var buttonClassName = 'ae-button ae-button-bridge';

						var iconClassName = 'ae-icon-' + panelMenuButtonDisplayName;

						var iconStyle = {};

						var cssStyle = CKEDITOR.skin.getIconStyle(panelMenuButtonDisplayName);

						if (cssStyle) {
							var cssStyleParts = cssStyle.split(';');

							iconStyle.backgroundImage = cssStyleParts[0].substring(cssStyleParts[0].indexOf(':') + 1);
							iconStyle.backgroundPosition = cssStyleParts[1].substring(cssStyleParts[1].indexOf(':') + 1);
							iconStyle.backgroundSize = cssStyleParts[2].substring(cssStyleParts[2].indexOf(':') + 1);
						}

						return _react2.default.createElement(
							'div',
							{ className: 'ae-container ae-has-dropdown' },
							_react2.default.createElement(
								'button',
								{
									'aria-expanded': this.props.expanded,
									'aria-label': MENUBUTTON_DEFS[editor.name][menuButtonName].label,
									className: buttonClassName,
									onClick: this.props.toggleDropdown,
									role: 'combobox',
									tabIndex: this.props.tabIndex,
									title: MENUBUTTON_DEFS[editor.name][menuButtonName].label },
								_react2.default.createElement('span', {
									className: iconClassName,
									style: iconStyle
								})
							),
							this.props.expanded && _react2.default.createElement(
								_buttonDropdown2.default,
								{
									onDismiss: this.props.toggleDropdown },
								this._getMenuItems()
							)
						);
					}
				}, {
					key: '_getMenuItems',
					value: function _getMenuItems() {
						var editor = this.props.editor.get('nativeEditor');
						var items = menuButtonDefinition.onMenu();
						var menuItems = Object.keys(items).map(function (key) {
							var menuItem = editor.getMenuItem(key);

							if (!menuItem) {
								return null;
							}

							var menuItemDefinition = menuItem.definition || menuItem;
							var menuItemState = items[key];

							var className = 'ae-toolbar-element ' + (menuItemState === CKEDITOR.TRISTATE_ON ? 'active' : '');
							var disabled = menuItemState === CKEDITOR.TRISTATE_DISABLED;
							var onClick = function onClick() {
								if (menuItemDefinition.command) {
									editor.execCommand(menuItemDefinition.command);
								} else if (menuItemDefinition.onClick) {
									menuItemDefinition.onClick.apply(menuItemDefinition);
								}
							};

							return _react2.default.createElement(
								'li',
								{ key: menuItem.name, role: 'option' },
								_react2.default.createElement(
									'button',
									{
										className: className,
										disabled: disabled,
										onClick: onClick },
									menuItemDefinition.label
								)
							);
						});

						return menuItems;
					}
				}]);

				return MenuButtonBridge;
			}(_react2.default.Component), _class.displayName = menuButtonName, _class.key = menuButtonName, _temp);

			AlloyEditor.Buttons[menuButtonName] = MenuButtonBridge;
		}

		return MenuButtonBridge;
	}

	/* istanbul ignore else */
	if (!CKEDITOR.plugins.get('menubutton')) {
		CKEDITOR.UI_MENU_BUTTON = 'menubutton';

		CKEDITOR.plugins.add('menubutton', {});
	}

	/**
  * CKEditor plugin that bridges the support offered by CKEditor MenuButton plugin. It takes over the
  * responsibility of registering and creating menuButtons via:
  * - editor.ui.addMenuButton(name, definition)
  * - editor.ui.add(name, CKEDITOR.UI_MENUBUTTON, definition)
  *
  * @class CKEDITOR.plugins.ae_menubuttonbridge
  * @requires CKEDITOR.plugins.ae_uibridge
  * @requires CKEDITOR.plugins.ae_menubridge
  * @constructor
  */
	CKEDITOR.plugins.add('ae_menubuttonbridge', {
		requires: ['ae_uibridge', 'ae_menubridge'],

		/**
   * Set the add handler for UI_MENUBUTTON to our own. We do this in the init phase to override
   * the one in the native plugin in case it's present.
   *
   * @method init
   * @param {Object} editor The CKEditor instance being initialized
   */
		beforeInit: function beforeInit(editor) {
			editor.ui.addMenuButton = function (menuButtonName, menuButtonDefinition) {
				this.add(menuButtonName, CKEDITOR.UI_MENUBUTTON, menuButtonDefinition);
			};

			editor.ui.addHandler(CKEDITOR.UI_MENUBUTTON, {
				add: generateMenuButtonBridge,
				create: function create(menuButtonDefinition) {
					var menuButtonName = 'buttonBridge' + (Math.random() * 1e9 >>> 0);
					var MenuButtonBridge = generateMenuButtonBridge(menuButtonName, menuButtonDefinition);

					return new MenuButtonBridge();
				}
			});
		}
	});
})();

/***/ }),

/***/ "./src/components/uibridge/menu.jsx":
/*!******************************************!*\
  !*** ./src/components/uibridge/menu.jsx ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	/* istanbul ignore if */

	if (CKEDITOR.plugins.get('ae_menubridge')) {
		return;
	}

	/**
  * CKEditor plugin that bridges the support offered by CKEditor Menu plugin. It takes over the
  * responsibility of adding, removing and retrieving menu groups and items
  * - editor.addMenuGroup(name, order)
  * - editor.addMenuItem(name, definition)
  * - editor.addMenuItems(definitions)
  * - editor.getMenuItem(name)
  * - editor.removeMenuItem(name)
  *
  * @class CKEDITOR.plugins.ae_menubridge
  * @constructor
  */
	CKEDITOR.plugins.add('ae_menubridge', {
		/**
   * Set the add handler for UI_BUTTON to our own. We do this in the init phase to override
   * the one in the native plugin in case it's present.
   *
   * @method init
   * @param {Object} editor The CKEditor instance being initialized
   */
		beforeInit: function beforeInit(editor) {
			// Do nothing if the real menu plugin is present
			if (CKEDITOR.plugins.get('menu')) {
				return;
			}

			var groups = [];
			var groupsOrder = editor._.menuGroups = {};
			var menuItems = editor._.menuItems = {};

			for (var i = 0; i < groups.length; i++) {
				groupsOrder[groups[i]] = i + 1;
			}

			/**
    * Registers an item group to the editor context menu in order to make it
    * possible to associate it with menu items later.
    *
    * @method addMenuGroup
    * @param {String} name Specify a group name.
    * @param {Number} [order=100] Define the display sequence of this group
    * inside the menu. A smaller value gets displayed first.
    */
			editor.addMenuGroup = function (name, order) {
				groupsOrder[name] = order || 100;
			};

			/**
    * Adds an item from the specified definition to the editor context menu.
    *
    * @method addMenuItem
    * @param {String} name The menu item name.
    * @param {Object} definition The menu item definition.
    */
			editor.addMenuItem = function (name, definition) {
				if (groupsOrder[definition.group]) {
					menuItems[name] = {
						name: name,
						definition: definition
					};
				}
			};

			/**
    * Adds one or more items from the specified definition object to the editor context menu.
    *
    * @method addMenuItems
    * @param {Object} definitions Object where keys are used as itemName and corresponding values as definition for a {@link #addMenuItem} call.
    */
			editor.addMenuItems = function (definitions) {
				for (var itemName in definitions) {
					if (definitions.hasOwnProperty(itemName)) {
						this.addMenuItem(itemName, definitions[itemName]);
					}
				}
			};

			/**
    * Retrieves a particular menu item definition from the editor context menu.
    *
    * @method getMenuItem
    * @param {String} name The name of the desired menu item.
    * @return {Object}
    */
			editor.getMenuItem = function (name) {
				return menuItems[name];
			};

			/**
    * Removes a particular menu item added before from the editor context menu.
    *
    * @method  removeMenuItem
    * @param {String} name The name of the desired menu item.
    */
			editor.removeMenuItem = function (name) {
				delete menuItems[name];
			};
		}
	});
})();

/***/ }),

/***/ "./src/components/uibridge/panel-menu-button.jsx":
/*!*******************************************************!*\
  !*** ./src/components/uibridge/panel-menu-button.jsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonDropdown = __webpack_require__(/*! ../buttons/button-dropdown.jsx */ "./src/components/buttons/button-dropdown.jsx");

var _buttonDropdown2 = _interopRequireDefault(_buttonDropdown);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {
	'use strict';

	/* istanbul ignore if */

	if (CKEDITOR.plugins.get('ae_panelmenubuttonbridge')) {
		return;
	}

	var PANEL_MENU_DEFS = {};

	/**
  * Generates a PanelMenuButtonBridge React class for a given panelmenubutton definition if it has not been
  * already created based on the panelmenubutton name and definition.
  *
  * @private
  * @method generatePanelMenuButtonBridge
  * @param {String} panelMenuButtonName The panel button name
  * @param {Object} panelMenuButtonDefinition The panel button definition
  * @return {Object} The generated or already existing React PanelMenuButton Class
  */
	var generatePanelMenuButtonBridge = function generatePanelMenuButtonBridge(panelMenuButtonName, panelMenuButtonDefinition, editor) {
		var PanelMenuButtonBridge = AlloyEditor.Buttons[panelMenuButtonName];

		PANEL_MENU_DEFS[editor.name] = PANEL_MENU_DEFS[editor.name] || {};
		PANEL_MENU_DEFS[editor.name][panelMenuButtonName] = PANEL_MENU_DEFS[editor.name][panelMenuButtonName] || panelMenuButtonDefinition;

		if (!PanelMenuButtonBridge) {
			var _class, _temp;

			PanelMenuButtonBridge = (_temp = _class = function (_React$Component) {
				_inherits(PanelMenuButtonBridge, _React$Component);

				function PanelMenuButtonBridge() {
					_classCallCheck(this, PanelMenuButtonBridge);

					return _possibleConstructorReturn(this, (PanelMenuButtonBridge.__proto__ || Object.getPrototypeOf(PanelMenuButtonBridge)).apply(this, arguments));
				}

				_createClass(PanelMenuButtonBridge, [{
					key: 'createPanel',


					// API not yet implemented inside the panel menu button bridge. By mocking the unsupported methods, we
					// prevent plugins from crashing if they make use of them.
					value: function createPanel() {}
				}, {
					key: 'render',
					value: function render() {
						var editor = this.props.editor.get('nativeEditor');

						var panelMenuButtonDisplayName = PANEL_MENU_DEFS[editor.name][panelMenuButtonName].name || PANEL_MENU_DEFS[editor.name][panelMenuButtonName].command || panelMenuButtonName;

						var buttonClassName = 'ae-button ae-button-bridge';

						var iconClassName = 'ae-icon-' + panelMenuButtonDisplayName;

						var iconStyle = {};

						var cssStyle = CKEDITOR.skin.getIconStyle(panelMenuButtonDisplayName);

						if (cssStyle) {
							var cssStyleParts = cssStyle.split(';');

							iconStyle.backgroundImage = cssStyleParts[0].substring(cssStyleParts[0].indexOf(':') + 1);
							iconStyle.backgroundPosition = cssStyleParts[1].substring(cssStyleParts[1].indexOf(':') + 1);
							iconStyle.backgroundSize = cssStyleParts[2].substring(cssStyleParts[2].indexOf(':') + 1);
						}

						var panel = void 0;

						if (this.props.expanded) {
							panel = this._getPanel();
						}

						return _react2.default.createElement(
							'div',
							{ className: 'ae-container ae-has-dropdown' },
							_react2.default.createElement(
								'button',
								{
									'aria-expanded': this.props.expanded,
									'aria-label': PANEL_MENU_DEFS[editor.name][panelMenuButtonName].label,
									className: buttonClassName,
									onClick: this.props.toggleDropdown,
									role: 'combobox',
									tabIndex: this.props.tabIndex,
									title: PANEL_MENU_DEFS[editor.name][panelMenuButtonName].label },
								_react2.default.createElement('span', {
									className: iconClassName,
									style: iconStyle
								})
							),
							panel
						);
					}
				}, {
					key: '_getPanel',
					value: function _getPanel() {
						var editor = this.props.editor.get('nativeEditor');

						var panelMenuButtonOnBlock = PANEL_MENU_DEFS[editor.name][panelMenuButtonName].onBlock;

						var panel = {
							hide: this.props.toggleDropdown,
							show: this.props.toggleDropdown
						};

						var blockElement = new CKEDITOR.dom.element('div');

						var block = {
							element: blockElement,
							keys: {}
						};

						/* istanbul ignore else */
						if (panelMenuButtonOnBlock) {
							panelMenuButtonOnBlock.call(this, panel, block);
						}

						// TODO
						// Use block.keys to configure the panel keyboard navigation

						return _react2.default.createElement(
							_buttonDropdown2.default,
							{ onDismiss: this.props.toggleDropdown },
							_react2.default.createElement('div', {
								className: blockElement.getAttribute('class'),
								dangerouslySetInnerHTML: {
									__html: blockElement.getHtml()
								}
							})
						);
					}
				}]);

				return PanelMenuButtonBridge;
			}(_react2.default.Component), _class.displayName = panelMenuButtonName, _class.key = panelMenuButtonName, _temp);

			AlloyEditor.Buttons[panelMenuButtonName] = PanelMenuButtonBridge;
		}

		return PanelMenuButtonBridge;
	};

	/* istanbul ignore else */
	if (!CKEDITOR.plugins.get('panelmenubutton')) {
		CKEDITOR.UI_PANELBUTTON = 'panelmenubutton';

		CKEDITOR.plugins.add('panelmenubutton', {});
	}

	/* istanbul ignore else */
	if (!CKEDITOR.plugins.get('panelbutton')) {
		CKEDITOR.UI_PANELBUTTON = 'panelbutton';

		CKEDITOR.plugins.add('panelbutton', {});
	}

	/**
  * CKEditor plugin that bridges the support offered by CKEditor PanelButton plugin. It takes over the
  * responsibility of registering and creating buttons via:
  * - editor.ui.addPanelMenuButton(name, definition)
  * - editor.ui.add(name, CKEDITOR.UI_PANELBUTTON, definition)
  *
  * @class CKEDITOR.plugins.ae_panelmenubuttonbridge
  * @requires CKEDITOR.plugins.ae_uibridge
  * @constructor
  */
	CKEDITOR.plugins.add('ae_panelmenubuttonbridge', {
		requires: ['ae_uibridge'],

		/**
   * Set the add handler for UI_PANELBUTTON to our own. We do this in the init phase to override
   * the one in the native plugin in case it's present
   *
   * @method init
   * @param {Object} editor The CKEditor instance being initialized
   */
		beforeInit: function beforeInit(editor) {
			editor.ui.addPanelMenuButton = function (panelMenuButtonName, panelMenuButtonDefinition) {
				this.add(panelMenuButtonName, CKEDITOR.UI_PANELBUTTON, panelMenuButtonDefinition);
			};

			editor.ui.addHandler(CKEDITOR.UI_PANELBUTTON, {
				add: generatePanelMenuButtonBridge,
				create: function create(panelMenuButtonDefinition) {
					var panelMenuButtonName = 'panelMenuButtonBridge' + (Math.random() * 1e9 >>> 0);
					var PanelMenuButtonBridge = generatePanelMenuButtonBridge(panelMenuButtonName, panelMenuButtonDefinition);

					return new PanelMenuButtonBridge();
				}
			});
		}
	});
})();

/***/ }),

/***/ "./src/components/uibridge/richcombo.jsx":
/*!***********************************************!*\
  !*** ./src/components/uibridge/richcombo.jsx ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _buttonDropdown = __webpack_require__(/*! ../buttons/button-dropdown.jsx */ "./src/components/buttons/button-dropdown.jsx");

var _buttonDropdown2 = _interopRequireDefault(_buttonDropdown);

var _buttonIcon = __webpack_require__(/*! ../buttons/button-icon.jsx */ "./src/components/buttons/button-icon.jsx");

var _buttonIcon2 = _interopRequireDefault(_buttonIcon);

var _react = __webpack_require__(/*! react */ "react");

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

(function () {
	'use strict';

	/* istanbul ignore if */

	if (CKEDITOR.plugins.get('ae_richcombobridge')) {
		return;
	}

	var RICH_COMBO_DEFS = {};

	/**
  * Generates a RichComboBridge React class for a given richcombo definition if it has not been
  * already created based on the richcombo name and definition.
  *
  * @method generateRichComboBridge
  * @private
  * @param {String} richComboName The rich combo name
  * @param {Object} richComboDefinition The rich combo definition
  * @return {Object} The generated or already existing React RichCombo Class
  */
	var generateRichComboBridge = function generateRichComboBridge(richComboName, richComboDefinition, editor) {
		var RichComboBridge = AlloyEditor.Buttons[richComboName];

		RICH_COMBO_DEFS[editor.name] = RICH_COMBO_DEFS[editor.name] || {};
		RICH_COMBO_DEFS[editor.name][richComboName] = RICH_COMBO_DEFS[editor.name][richComboName] || richComboDefinition;
		RICH_COMBO_DEFS[editor.name][richComboName].currentValue = undefined;

		if (!RichComboBridge) {
			var _class, _temp;

			RichComboBridge = (_temp = _class = function (_React$Component) {
				_inherits(RichComboBridge, _React$Component);

				function RichComboBridge(props) {
					_classCallCheck(this, RichComboBridge);

					var _this = _possibleConstructorReturn(this, (RichComboBridge.__proto__ || Object.getPrototypeOf(RichComboBridge)).call(this, props));

					_this._onClick = function (event) {
						var editor = _this.props.editor.get('nativeEditor');

						var editorCombo = RICH_COMBO_DEFS[editor.name][richComboName];

						if (editorCombo.onClick) {
							var newValue = event.currentTarget.getAttribute('data-value');

							editorCombo.onClick.call(_this, newValue);

							RICH_COMBO_DEFS[editor.name][richComboName].currentValue = newValue;

							editor.fire('actionPerformed', _this);
						}
					};

					_this.state = {
						value: RICH_COMBO_DEFS[editor.name][richComboName].currentValue
					};
					return _this;
				}

				// API not yet implemented inside the richcombo bridge. By mocking the unsupported methods, we
				// prevent plugins from crashing if they make use of them.


				_createClass(RichComboBridge, [{
					key: 'commit',
					value: function commit() {}
				}, {
					key: 'createPanel',
					value: function createPanel() {}
				}, {
					key: 'disable',
					value: function disable() {}
				}, {
					key: 'enable',
					value: function enable() {}
				}, {
					key: 'getState',
					value: function getState() {}
				}, {
					key: 'hideGroup',
					value: function hideGroup() {}
				}, {
					key: 'hideItem',
					value: function hideItem() {}
				}, {
					key: 'mark',
					value: function mark() {}
				}, {
					key: 'showAll',
					value: function showAll() {}
				}, {
					key: 'startGroup',
					value: function startGroup() {}
				}, {
					key: 'unmarkAll',
					value: function unmarkAll() {}
				}, {
					key: 'add',
					value: function add(value, preview, title) {
						this._items.push({
							preview: preview,
							title: title,
							value: value
						});
					}
				}, {
					key: 'componentWillMount',
					value: function componentWillMount() {
						var editor = this.props.editor.get('nativeEditor');

						var editorCombo = RICH_COMBO_DEFS[editor.name][richComboName];

						this._items = [];

						this.setValue = this._setValue;

						if (editorCombo.init) {
							editorCombo.init.call(this);
						}

						if (editorCombo.onRender) {
							editorCombo.onRender.call(this);
						}
					}
				}, {
					key: 'componentWillUnmount',
					value: function componentWillUnmount() {
						this._cacheValue(this.state.value);

						this.setValue = this._cacheValue;
					}
				}, {
					key: 'getValue',
					value: function getValue() {
						return this.state.value;
					}
				}, {
					key: 'render',
					value: function render() {
						var editor = this.props.editor.get('nativeEditor');

						var richComboLabel = RICH_COMBO_DEFS[editor.name][richComboName].currentValue || richComboDefinition.label;

						return _react2.default.createElement(
							'div',
							{ className: 'ae-container-dropdown ae-has-dropdown' },
							_react2.default.createElement(
								'button',
								{
									'aria-expanded': this.props.expanded,
									'aria-label': richComboLabel,
									className: 'ae-toolbar-element',
									onClick: this.props.toggleDropdown,
									role: 'combobox',
									tabIndex: this.props.tabIndex,
									title: richComboLabel },
								_react2.default.createElement(
									'div',
									{ className: 'ae-container' },
									_react2.default.createElement(
										'span',
										{ className: 'ae-container-dropdown-selected-item' },
										richComboLabel
									),
									_react2.default.createElement(_buttonIcon2.default, {
										editor: this.props.editor,
										symbol: 'caret-bottom'
									})
								)
							),
							this.props.expanded && _react2.default.createElement(
								_buttonDropdown2.default,
								{
									onDismiss: this.props.toggleDropdown },
								this._getItems()
							)
						);
					}
				}, {
					key: '_cacheValue',
					value: function _cacheValue(value) {
						var editor = this.props.editor.get('nativeEditor');

						RICH_COMBO_DEFS[editor.name][richComboName].currentValue = value;
					}
				}, {
					key: '_getItems',
					value: function _getItems() {
						var richCombo = this;

						var items = this._items.map(function (item) {
							var className = 'ae-toolbar-element ' + (item.value === this.state.value ? 'active' : '');

							return _react2.default.createElement(
								'li',
								{ key: item.title, role: 'option' },
								_react2.default.createElement('button', {
									className: className,
									dangerouslySetInnerHTML: {
										__html: item.preview
									},
									'data-value': item.value,
									onClick: richCombo._onClick
								})
							);
						}.bind(this));

						return items;
					}
				}, {
					key: '_setValue',
					value: function _setValue(value) {
						this._cacheValue(value);

						this.setState({
							value: value
						});
					}
				}]);

				return RichComboBridge;
			}(_react2.default.Component), _class.displayName = richComboName, _class.key = richComboName, _temp);

			AlloyEditor.Buttons[richComboName] = RichComboBridge;
		}

		return RichComboBridge;
	};

	/* istanbul ignore else */
	if (!CKEDITOR.plugins.get('richcombo')) {
		CKEDITOR.UI_RICHCOMBO = 'richcombo';

		CKEDITOR.plugins.add('richcombo', {});
	}

	/**
  * CKEditor plugin that bridges the support offered by CKEditor RichCombo plugin. It takes over the
  * responsibility of registering and creating rich combo elements via:
  * - editor.ui.addRichCombo(name, definition)
  * - editor.ui.add(name, CKEDITOR.UI_RICHCOMBO, definition)
  *
  * @class CKEDITOR.plugins.ae_richcombobridge
  * @requires CKEDITOR.plugins.ae_uibridge
  * @constructor
  */
	CKEDITOR.plugins.add('ae_richcombobridge', {
		requires: ['ae_uibridge'],

		/**
   * Set the add handler for UI_RICHCOMBO to our own. We do this in the init phase to override
   * the one in the original plugin in case it's present
   *
   * @method init
   * @param {Object} editor The CKEditor instance being initialized
   */
		beforeInit: function beforeInit(editor) {
			editor.ui.addRichCombo = function (richComboName, richComboDefinition) {
				this.add(richComboName, CKEDITOR.UI_RICHCOMBO, richComboDefinition);
			};

			editor.ui.addHandler(CKEDITOR.UI_RICHCOMBO, {
				add: generateRichComboBridge,
				create: function create(richComboDefinition) {
					var richComboName = 'richComboBridge' + (Math.random() * 1e9 >>> 0);
					var RichComboBridge = generateRichComboBridge(richComboName, richComboDefinition);

					return new RichComboBridge();
				}
			});
		}
	});
})();

/***/ }),

/***/ "./src/components/uibridge/uibridge.js":
/*!*********************************************!*\
  !*** ./src/components/uibridge/uibridge.js ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	/* istanbul ignore if */

	if (CKEDITOR.plugins.get('ae_uibridge')) {
		return;
	}

	/**
  * CKEditor plugin that extends CKEDITOR.ui.add function so an add handler can be specified
  * on top of the original ones. It bridges the calls to add components via:
  * - editor.ui.add(name, type, definition)
  *
  * @class CKEDITOR.plugins.ae_uibridge
  * @constructor
  */
	CKEDITOR.plugins.add('ae_uibridge', {
		/**
   * Initialization of the plugin, part of CKEditor plugin lifecycle.
   *
   * @method beforeInit
   * @param {Object} editor The current editor instance
   */
		beforeInit: function beforeInit(editor) {
			var originalUIAddFn = editor.ui.add;

			editor.ui.add = function (name, type, definition) {
				originalUIAddFn.call(this, name, type, definition);

				var typeHandler = this._.handlers[type];

				if (typeHandler && typeHandler.add) {
					typeHandler.add(name, definition, editor);
					AlloyEditor.registerBridgeButton(name, editor.__processingPlugin__.plugin.name);
				}
			};
		}
	});
})();

/***/ }),

/***/ "./src/core/debounce.js":
/*!******************************!*\
  !*** ./src/core/debounce.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function () {
	'use strict';

	/**
  * Debounce util function. If a function execution is expensive, it might be debounced. This means
  * that it will be executed after some amount of time after its last call. For example, if we attach a
  * a function on scroll event, it might be called hundreds times per second. In this case it may be
  * debounced with, let's say 100ms. The real execution of this function will happen 100ms after last
  * scroll event.
  *
  * @memberof CKEDITOR.tools
  * @method debounce
  * @param {Array} args An array of arguments which the callback will receive.
  * @param {Function} callback The callback which has to be called after given timeout.
  * @param {Number} timeout Timeout in milliseconds after which the callback will be called.
  * @param {Object} context The context in which the callback will be called. This argument is optional.
  * @static
  */

	CKEDITOR.tools.debounce = CKEDITOR.tools.debounce || function (callback, timeout, context) {
		var args = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

		var debounceHandle = void 0;

		var callFn = function callFn() {
			for (var _len = arguments.length, callArgs = Array(_len), _key = 0; _key < _len; _key++) {
				callArgs[_key] = arguments[_key];
			}

			/* eslint-disable babel/no-invalid-this */
			var callContext = context || this;
			/* eslint-enable babel/no-invalid-this */

			clearTimeout(debounceHandle);

			debounceHandle = setTimeout(function () {
				callback.apply(callContext, [].concat(callArgs, _toConsumableArray(args)));
			}, timeout);
		};

		callFn.detach = function () {
			clearTimeout(debounceHandle);
		};

		return callFn;
	};
})();

/***/ }),

/***/ "./src/core/index.js":
/*!***************************!*\
  !*** ./src/core/index.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.uicore = exports.tools = exports.table = exports.selectionRegion = exports.plugins = exports.link = exports.debounce = undefined;

var _debounce = __webpack_require__(/*! ./debounce */ "./src/core/debounce.js");

var _debounce2 = _interopRequireDefault(_debounce);

var _link = __webpack_require__(/*! ./link */ "./src/core/link.js");

var _link2 = _interopRequireDefault(_link);

var _plugins = __webpack_require__(/*! ./plugins */ "./src/core/plugins.js");

var _plugins2 = _interopRequireDefault(_plugins);

var _selectionRegion = __webpack_require__(/*! ./selection-region */ "./src/core/selection-region.js");

var _selectionRegion2 = _interopRequireDefault(_selectionRegion);

var _table = __webpack_require__(/*! ./table */ "./src/core/table.js");

var _table2 = _interopRequireDefault(_table);

var _tools = __webpack_require__(/*! ./tools */ "./src/core/tools.js");

var _tools2 = _interopRequireDefault(_tools);

var _uicore = __webpack_require__(/*! ./uicore */ "./src/core/uicore.js");

var _uicore2 = _interopRequireDefault(_uicore);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.debounce = _debounce2.default;
exports.link = _link2.default;
exports.plugins = _plugins2.default;
exports.selectionRegion = _selectionRegion2.default;
exports.table = _table2.default;
exports.tools = _tools2.default;
exports.uicore = _uicore2.default;

/***/ }),

/***/ "./src/core/link.js":
/*!**************************!*\
  !*** ./src/core/link.js ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function () {
	'use strict';

	var REGEX_BOOKMARK_SCHEME = /^#.*/i;
	var REGEX_EMAIL_SCHEME = /^[a-z0-9\u0430-\u044F._-]+@/i;
	var REGEX_URI_SCHEME = /^(?:[a-z][a-z0-9+\-.]*):|^\//i;

	/**
  * Link class utility. Provides methods for create, delete and update links.
  *
  * @class CKEDITOR.Link
  * @constructor
  * @param {Object} editor The CKEditor instance.
  */
	function Link(editor, config) {
		this._editor = editor;
		this.appendProtocol = config && config.appendProtocol === false ? false : true;
	}

	Link.prototype = {
		constructor: Link,

		/**
   * Advances the editor selection to the next available position after a
   * given link or the one in the current selection.
   *
   * @instance
   * @memberof CKEDITOR.Link
   * @method advanceSelection
   * @param {CKEDITOR.dom.element} link The link element which link style should be removed.
   */
		advanceSelection: function advanceSelection(link) {
			link = link || this.getFromSelection();

			var range = this._editor.getSelection().getRanges()[0];

			if (link) {
				range.moveToElementEditEnd(link);

				var nextNode = range.getNextEditableNode();

				if (nextNode && !this._editor.element.equals(nextNode.getCommonAncestor(link))) {
					var whitespace = /\s/.exec(nextNode.getText());

					var offset = whitespace ? whitespace.index + 1 : 0;

					range.setStart(nextNode, offset);
					range.setEnd(nextNode, offset);
				}
			}

			this._editor.getSelection().selectRanges([range]);
		},

		/**
   * Create a link with given URI as href.
   *
   * @instance
   * @memberof CKEDITOR.Link
   * @method create
   * @param {Object} attrs A config object with link attributes. These might be arbitrary DOM attributes.
   * @param {Object} modifySelection A config object with an advance attribute to indicate if the selection should be moved after the link creation.
   * @param {String} URI The URI of the link.
   */
		create: function create(URI, attrs, modifySelection) {
			var selection = this._editor.getSelection();

			var range = selection.getRanges()[0];

			if (range.collapsed) {
				var text = new CKEDITOR.dom.text(URI, this._editor.document);
				range.insertNode(text);
				range.selectNodeContents(text);
			}

			URI = this._getCompleteURI(URI);

			var linkAttrs = CKEDITOR.tools.merge({
				'data-cke-saved-href': URI,
				href: URI
			}, attrs);

			var style = new CKEDITOR.style({
				attributes: linkAttrs,
				element: 'a'
			});

			style.type = CKEDITOR.STYLE_INLINE;
			style.applyToRange(range, this._editor);

			if (modifySelection && modifySelection.advance) {
				this.advanceSelection();
			} else {
				range.select();
			}
		},

		/**
   * Retrieves a link from the current selection.
   *
   * @instance
   * @memberof CKEDITOR.Link
   * @method getFromSelection
   * @return {CKEDITOR.dom.element} The retrieved link or null if not found.
   */
		getFromSelection: function getFromSelection() {
			var selection = this._editor.getSelection();

			var selectedElement = selection.getSelectedElement();

			if (selectedElement && selectedElement.is('a')) {
				return selectedElement;
			}

			if (selectedElement && CKEDITOR.env.ie) {
				var children = selectedElement.getChildren();

				var count = children.count();

				for (var i = 0; i < count; i++) {
					var node = children.getItem(i);

					if (node.is('a')) {
						return node;
					}
				}
			}

			var range = selection.getRanges()[0];

			if (range) {
				range.shrink(CKEDITOR.SHRINK_TEXT);

				return this._editor.elementPath(range.getCommonAncestor()).contains('a', 1);
			}

			return null;
		},

		/**
   * Removes a link from the editor.
   *
   * @instance
   * @memberof CKEDITOR.Link
   * @method remove
   * @param {CKEDITOR.dom.element} link The link element which link style should be removed.
   * @param {Object} modifySelection A config object with an advance attribute to indicate if the selection should be moved after the link creation.
   */
		remove: function remove(link, modifySelection) {
			var editor = this._editor;

			if (link) {
				if (modifySelection && modifySelection.advance) {
					this.advanceSelection();
				}

				link.remove(editor);
			} else {
				var style = new CKEDITOR.style({
					alwaysRemoveElement: 1,
					element: 'a',
					type: CKEDITOR.STYLE_INLINE
				});

				// 'removeStyle()' removes the style from the editor's current selection.
				//  We need to force the selection to be the whole link element
				//  to remove it properly.

				var selection = editor.getSelection();
				selection.selectElement(selection.getStartElement());

				editor.removeStyle(style);
			}
		},

		/**
   * Updates the href of an already existing link.
   *
   * @instance
   * @memberof CKEDITOR.Link
   * @method update
   * @param {CKEDITOR.dom.element} link The link element which href should be removed.
   * @param {Object|String} attrs The attributes to update or remove. Attributes with null values will be removed.
   * @param {Object} modifySelection A config object with an advance attribute to indicate if the selection should be moved after the link creation.
   */
		update: function update(attrs, link, modifySelection) {
			var instance = this;

			link = link || this.getFromSelection();

			if (typeof attrs === 'string') {
				var uri = instance._getCompleteURI(attrs);

				link.setAttributes({
					'data-cke-saved-href': uri,
					href: uri
				});
			} else if ((typeof attrs === 'undefined' ? 'undefined' : _typeof(attrs)) === 'object') {
				var removeAttrs = [];

				var setAttrs = {};

				Object.keys(attrs).forEach(function (key) {
					if (attrs[key] === null) {
						if (key === 'href') {
							removeAttrs.push('data-cke-saved-href');
						}

						removeAttrs.push(key);
					} else {
						if (key === 'href') {
							var _uri = instance._getCompleteURI(attrs[key]);

							setAttrs['data-cke-saved-href'] = _uri;
							setAttrs[key] = _uri;
						} else {
							setAttrs[key] = attrs[key];
						}
					}
				});

				link.removeAttributes(removeAttrs);
				link.setAttributes(setAttrs);
			}

			if (modifySelection && modifySelection.advance) {
				this.advanceSelection(link);
			}
		},

		/**
   * Checks if the URI begins with a '#' symbol to determine if it's an on page bookmark.
   * If it doesn't, it then checks if the URI has an '@' symbol. If it does and the URI
   * looks like an email and doesn't have 'mailto:', 'mailto:' is added to the URI.
   * If it doesn't and the URI doesn't have a scheme, the default 'http' scheme with
   * hierarchical path '//' is added to the URI.
   *
   * @instance
   * @memberof CKEDITOR.Link
   * @method _getCompleteURI
   * @param {String} URI The URI of the link.
   * @protected
   * @return {String} The URI updated with the protocol.
   */
		_getCompleteURI: function _getCompleteURI(URI) {
			if (REGEX_BOOKMARK_SCHEME.test(URI)) {
				return URI;
			} else if (REGEX_EMAIL_SCHEME.test(URI)) {
				URI = 'mailto:' + URI;
			} else if (!REGEX_URI_SCHEME.test(URI)) {
				URI = this.appendProtocol ? 'http://' + URI : URI;
			}

			return URI;
		}
	};

	CKEDITOR.Link = CKEDITOR.Link || Link;
})();

/***/ }),

/***/ "./src/core/plugins.js":
/*!*****************************!*\
  !*** ./src/core/plugins.js ***!
  \*****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	// Wraps each of the plugin lifecycle methods in a closure that will
	// set up the editor.__processingPlugin__ variable so it can be globally
	// accessed exposing the plugin being processed and the lifecycle phase
	// in which it is happening
	//
	// @param {Object} plugin The plugin to wrap lifecycle methods

	var wrapPluginLifecycle = function wrapPluginLifecycle(plugin) {
		var methods = ['beforeInit', 'init', 'afterInit'];

		methods.forEach(function (methodName) {
			if (plugin[methodName]) {
				plugin[methodName] = CKEDITOR.tools.override(plugin[methodName], function (originalPluginMethod) {
					var payload = {
						phase: methodName,
						plugin: plugin
					};

					return function (editor) {
						editor.__processingPlugin__ = payload;

						// eslint-disable-next-line babel/no-invalid-this
						originalPluginMethod.call(this, editor);

						editor.__processingPlugin__ = null;
					};
				});
			}
		});
	};

	// Filters the requires object to remove unwanted dependencies. At this point
	// only 'toolbar' has been identified, but more can appear. An unwanted plugin
	// dependency is one that prevents a necessary plugin from being removed
	//
	// @param {string|Array<string>} requires The requires object
	// @return {string} The filtered requires object
	var filterUnwantedDependencies = function filterUnwantedDependencies(requires) {
		if (typeof requires === 'string') {
			requires = requires.split(',');
		}

		return requires.filter(function (require) {
			return require !== 'toolbar';
		});
	};

	/**
  * CKEDITOR.plugins class utility which adds additional methods to those of CKEditor.
  *
  * @class CKEDITOR.plugins
  */

	/**
  * Overrides CKEDITOR.plugins.load method so we can extend the lifecycle methods of
  * the loaded plugins to add some metainformation about the plugin being processed
  *
  * @param {String/Array} names The name of the resource to load. It may be a
  * string with a single resource name, or an array with several names.
  * @param {Function} callback A function to be called when all resources
  * are loaded. The callback will receive an array containing all loaded names.
  * @param {Object} [scope] The scope object to be used for the callback call.
  * @memberof CKEDITOR.plugins
  * @method load
  * @static
  */
	CKEDITOR.plugins.load = CKEDITOR.tools.override(CKEDITOR.plugins.load, function (pluginsLoad) {
		// Wrap original load function so we can transform the plugin input parameter
		// before passing it down to the original callback
		return function (names, callback, scope) {
			// eslint-disable-next-line babel/no-invalid-this
			pluginsLoad.call(this, names, function (plugins) {
				if (callback) {
					Object.keys(plugins).forEach(function (pluginName) {
						var plugin = plugins[pluginName];

						if (plugin.requires) {
							plugin.requires = filterUnwantedDependencies(plugin.requires);
						}

						wrapPluginLifecycle(plugin);
					});

					callback.call(scope, plugins);
				}
			});
		};
	});
})();

/***/ }),

/***/ "./src/core/selection-region.js":
/*!**************************************!*\
  !*** ./src/core/selection-region.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_selectionregion')) {
		return;
	}

	CKEDITOR.SELECTION_TOP_TO_BOTTOM = 0;
	CKEDITOR.SELECTION_BOTTOM_TO_TOP = 1;
	CKEDITOR.SELECTION_LEFT_TO_RIGHT = 2;
	CKEDITOR.SELECTION_RIGHT_TO_LEFT = 3;

	/**
  * SelectionRegion utility class which provides metadata about the selection. The metadata may be the start and end
  * rectangles, caret region, etc. **This class is not intended to be used standalone. Its functions will
  * be merged into each editor instance, so the developer may use them directly via the editor, without making
  * an instance of this class**.
  *
  * @class SelectionRegion
  * @constructor
  */
	function SelectionRegion() {}

	SelectionRegion.prototype = {
		constructor: SelectionRegion,

		/**
   * Creates selection from two points in page coordinates.
   *
   * @instance
   * @memberof SelectionRegion
   * @method createSelectionFromPoint
   * @param {Number} x X point in page coordinates.
   * @param {Number} y Y point in page coordinates.
   */
		createSelectionFromPoint: function createSelectionFromPoint(x, y) {
			this.createSelectionFromRange(x, y, x, y);
		},

		/**
   * Creates selection from range. A range consists from two points in page coordinates.
   *
   * @instance
   * @memberof SelectionRegion
   * @method createSelectionFromRange
   * @param {Number} startX X coordinate of the first point.
   * @param {Number} startY Y coordinate of the first point.
   * @param {Number} endX X coordinate of the second point.
   * @param {Number} endY Y coordinate of the second point.
   */
		createSelectionFromRange: function createSelectionFromRange(startX, startY, endX, endY) {
			var end = void 0;
			var endContainer = void 0;
			var endOffset = void 0;
			var range = void 0;
			var start = void 0;
			var startContainer = void 0;
			var startOffset = void 0;

			if (typeof document.caretPositionFromPoint === 'function') {
				start = document.caretPositionFromPoint(startX, startY);
				end = document.caretPositionFromPoint(endX, endY);

				startContainer = start.offsetNode;
				endContainer = end.offsetNode;

				startOffset = start.offset;
				endOffset = end.offset;

				range = this.createRange();
			} else if (typeof document.caretRangeFromPoint === 'function') {
				start = document.caretRangeFromPoint(startX, startY);
				end = document.caretRangeFromPoint(endX, endY);

				startContainer = start.startContainer;
				endContainer = end.startContainer;

				startOffset = start.startOffset;
				endOffset = end.startOffset;

				range = this.createRange();
			}

			if (range && document.getSelection) {
				range.setStart(new CKEDITOR.dom.node(startContainer), startOffset);
				range.setEnd(new CKEDITOR.dom.node(endContainer), endOffset);

				this.getSelection().selectRanges([range]);
			} else if (typeof document.body.createTextRange === 'function') {
				var selection = this.getSelection();

				selection.unlock();

				range = document.body.createTextRange();
				range.moveToPoint(startX, startY);

				var endRange = range.duplicate();
				endRange.moveToPoint(endX, endY);

				range.setEndPoint('EndToEnd', endRange);
				range.select();

				this.getSelection().lock();
			}
		},

		/**
   * Returns the region of the current position of the caret. The points are in page coordinates.
   *
   * @instance
   * @memberof SelectionRegion
   * @method getCaretRegion
   * @return {Object} Returns object with the following properties:
   * - bottom
   * - left
   * - right
   * - top
   */
		getCaretRegion: function getCaretRegion() {
			var selection = this.getSelection();

			var region = {
				bottom: 0,
				left: 0,
				right: 0,
				top: 0
			};

			var bookmarks = selection.createBookmarks();

			if (!bookmarks.length) {
				return region;
			}

			var bookmarkNodeEl = bookmarks[0].startNode.$;

			bookmarkNodeEl.style.display = 'inline-block';

			region = new CKEDITOR.dom.element(bookmarkNodeEl).getClientRect();

			bookmarkNodeEl.parentNode.removeChild(bookmarkNodeEl);

			var scrollPos = new CKEDITOR.dom.window(window).getScrollPosition();

			region.bottom = scrollPos.y + region.bottom;
			region.left = scrollPos.x + region.left;
			region.right = scrollPos.x + region.right;
			region.top = scrollPos.y + region.top;

			return region;
		},

		/**
   * Returns data for the current selection.
   *
   * @instance
   * @memberof SelectionRegion
   * @method getSelectionData
   * @return {Object|null} Returns an object with the following data:
   * - element - The currently selected element, if any
   * - text - The selected text
   * - region - The data, returned from {{#crossLink "CKEDITOR.plugins.ae_selectionregion/getSelectionRegion:method"}}{{/crossLink}}
   */
		getSelectionData: function getSelectionData() {
			var selection = this.getSelection();

			if (!selection.getNative()) {
				return null;
			}

			var result = {
				element: selection.getSelectedElement(),
				text: selection.getSelectedText()
			};

			result.region = this.getSelectionRegion(selection);

			return result;
		},

		/**
   * Returns the region of the current selection.
   *
   * @instance
   * @memberof SelectionRegion
   * @method getSelectionRegion
   * @return {Object} Returns object which is being returned from
   * {{#crossLink "CKEDITOR.plugins.ae_selectionregion/getClientRectsRegion:method"}}{{/crossLink}} with three more properties:
   * - direction - the direction of the selection. Can be one of these:
   *   1. CKEDITOR.SELECTION_TOP_TO_BOTTOM
   *   2. CKEDITOR.SELECTION_BOTTOM_TO_TOP
   * - height - The height of the selection region
   * - width - The width of the selection region
   */
		getSelectionRegion: function getSelectionRegion() {
			var region = this.getClientRectsRegion();

			region.direction = this.getSelectionDirection();

			region.height = region.bottom - region.top;
			region.width = region.right - region.left;

			return region;
		},

		/**
   * Returns true if the current selection is empty, false otherwise.
   *
   * @instance
   * @memberof SelectionRegion
   * @method isSelectionEmpty
   * @return {Boolean} Returns true if the current selection is empty, false otherwise.
   */
		isSelectionEmpty: function isSelectionEmpty() {
			var ranges = void 0;

			var selection = this.getSelection();

			return selection.getType() === CKEDITOR.SELECTION_NONE || (ranges = selection.getRanges()) && ranges.length === 1 && ranges[0].collapsed;
		},

		/**
   * Returns object with data about the [client rectangles](https://developer.mozilla.org/en-US/docs/Web/API/Element.getClientRects) of the selection,
   * normalized across browses. All offsets below are in page coordinates.
   *
   * @instance
   * @memberof SelectionRegion
   * @method getClientRectsRegion
   * @return {Object} Returns object with the following data:
   * - bottom - bottom offset of all client rectangles
   * - left - left offset of all client rectangles
   * - right - right offset of all client rectangles
   * - top - top offset of all client rectangles
   * - startRect - An Object, which contains the following information:
   *     + bottom - bottom offset
   *     + height - the height of the rectangle
   *     + left - left offset of the selection
   *     + right - right offset of the selection
   *     + top - top offset of the selection
   *     + width - the width of the rectangle
   * - endRect - An Object, which contains the following information:
   *     + bottom - bottom offset
   *     + height - the height of the rectangle
   *     + left - left offset of the selection
   *     + right - right offset of the selection
   *     + top - top offset of the selection
   *     + width - the width of the rectangle
   *
   * If there is no native selection, the objects will be filled with 0.
   */
		getClientRectsRegion: function getClientRectsRegion() {
			var selection = this.getSelection();
			var nativeSelection = selection.getNative();

			var defaultRect = {
				bottom: 0,
				height: 0,
				left: 0,
				right: 0,
				top: 0,
				width: 0
			};

			var region = {
				bottom: 0,
				endRect: defaultRect,
				left: 0,
				right: 0,
				top: 0,
				startRect: defaultRect
			};

			if (!nativeSelection) {
				return region;
			}

			var bottom = 0;
			var clientRects = void 0;
			var left = Infinity;
			var right = -Infinity;
			var top = Infinity;

			if (nativeSelection.createRange) {
				clientRects = nativeSelection.createRange().getClientRects();
			} else {
				clientRects = nativeSelection.rangeCount > 0 ? nativeSelection.getRangeAt(0).getClientRects() : [];
			}

			if (clientRects.length === 0) {
				region = this.getCaretRegion();
			} else {
				for (var i = 0, length = clientRects.length; i < length; i++) {
					var item = clientRects[i];

					if (item.left < left) {
						left = item.left;
					}

					if (item.right > right) {
						right = item.right;
					}

					if (item.top < top) {
						top = item.top;
					}

					if (item.bottom > bottom) {
						bottom = item.bottom;
					}
				}

				var scrollPos = new CKEDITOR.dom.window(window).getScrollPosition();

				region.bottom = scrollPos.y + bottom;
				region.left = scrollPos.x + left;
				region.right = scrollPos.x + right;
				region.top = scrollPos.y + top;

				if (clientRects.length) {
					var endRect = clientRects[clientRects.length - 1];
					var startRect = clientRects[0];

					region.endRect = {
						bottom: scrollPos.y + endRect.bottom,
						height: endRect.height,
						left: scrollPos.x + endRect.left,
						right: scrollPos.x + endRect.right,
						top: scrollPos.y + endRect.top,
						width: endRect.width
					};

					region.startRect = {
						bottom: scrollPos.y + startRect.bottom,
						height: startRect.height,
						left: scrollPos.x + startRect.left,
						right: scrollPos.x + startRect.right,
						top: scrollPos.y + startRect.top,
						width: startRect.width
					};
				}
			}

			return region;
		},

		/**
   * Retrieves the direction of the selection. The direction is from top to bottom or from bottom to top.
   * For IE < 9 it is not possible, so the direction for these browsers will be always CKEDITOR.SELECTION_TOP_TO_BOTTOM.
   *
   * @instance
   * @memberof SelectionRegion
   * @method getSelectionDirection
   * @return {Number} Returns a number which represents selection direction. It might be one of these:
   * - CKEDITOR.SELECTION_TOP_TO_BOTTOM;
   * - CKEDITOR.SELECTION_BOTTOM_TO_TOP;
   */
		getSelectionDirection: function getSelectionDirection() {
			var direction = CKEDITOR.SELECTION_TOP_TO_BOTTOM;
			var selection = this.getSelection();
			var nativeSelection = selection.getNative();

			if (!nativeSelection) {
				return direction;
			}

			var anchorNode = void 0;

			if ((anchorNode = nativeSelection.anchorNode) && anchorNode.compareDocumentPosition) {
				var position = anchorNode.compareDocumentPosition(nativeSelection.focusNode);

				if (!position && nativeSelection.anchorOffset > nativeSelection.focusOffset || position === Node.DOCUMENT_POSITION_PRECEDING) {
					direction = CKEDITOR.SELECTION_BOTTOM_TO_TOP;
				}
			}

			return direction;
		}
	};

	CKEDITOR.plugins.add('ae_selectionregion', {
		init: function init(editor) {
			var attr = void 0;
			var hasOwnProperty = void 0;

			hasOwnProperty = Object.prototype.hasOwnProperty;

			for (attr in SelectionRegion.prototype) {
				if (hasOwnProperty.call(SelectionRegion.prototype, attr) && typeof editor[attr] === 'undefined') {
					editor[attr] = SelectionRegion.prototype[attr];
				}
			}
		}
	});
})();

/***/ }),

/***/ "./src/core/table.js":
/*!***************************!*\
  !*** ./src/core/table.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	var IE_NON_DIRECTLY_EDITABLE_ELEMENT = {
		table: 1,
		col: 1,
		colgroup: 1,
		tbody: 1,
		td: 1,
		tfoot: 1,
		th: 1,
		thead: 1,
		tr: 1
	};

	/**
  * Table class utility. Provides methods for create, delete and update tables.
  *
  * @class CKEDITOR.Table
  * @constructor
  * @param {Object} editor The CKEditor instance.
  */

	function Table(editor) {
		this._editor = editor;
	}

	Table.HEADING_BOTH = 'Both';
	Table.HEADING_COL = 'Column';
	Table.HEADING_NONE = 'None';
	Table.HEADING_ROW = 'Row';

	Table.prototype = {
		constructor: Table,

		/**
   * Creates a table.
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @method create
   * @param {Object} config Table configuration object
   * @return {Object} The created table
   */
		create: function create(config) {
			var editor = this._editor;
			var table = this._createElement('table');

			config = config || {};

			// Generate the rows and cols.
			var tbody = table.append(this._createElement('tbody'));
			var rows = config.rows || 1;
			var cols = config.cols || 1;

			for (var i = 0; i < rows; i++) {
				var row = tbody.append(this._createElement('tr'));
				for (var j = 0; j < cols; j++) {
					var cell = row.append(this._createElement('td'));

					cell.appendBogus();
				}
			}

			this.setAttributes(table, config.attrs);
			this.setHeading(table, config.heading);

			// Insert the table element if we're creating one.
			editor.insertElement(table);

			var firstCell = new CKEDITOR.dom.element(table.$.rows[0].cells[0]);
			var range = editor.createRange();
			range.moveToPosition(firstCell, CKEDITOR.POSITION_AFTER_START);
			range.select();

			return table;
		},

		/**
   * Retrieves a table from the current selection.
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @method getFromSelection
   * @return {CKEDITOR.dom.element} The retrieved table or null if not found.
   */
		getFromSelection: function getFromSelection() {
			var table = void 0;
			var selection = this._editor.getSelection();
			var selected = selection.getSelectedElement();

			if (selected && selected.is('table')) {
				table = selected;
			} else {
				var ranges = selection.getRanges();

				if (ranges.length > 0) {
					// Webkit could report the following range on cell selection (#4948):
					// <table><tr><td>[&nbsp;</td></tr></table>]

					/* istanbul ignore else */
					if (CKEDITOR.env.webkit) {
						ranges[0].shrink(CKEDITOR.NODE_ELEMENT);
					}

					table = this._editor.elementPath(ranges[0].getCommonAncestor(true)).contains('table', 1);
				}
			}

			return table;
		},

		/**
   * Checks if a given table can be considered as editable. This method
   * workarounds a limitation of IE where for some elements (like table),
   * `isContentEditable` returns always false. This is because IE does not support
   * `contenteditable` on such elements. However, despite such elements
   * cannot be set as content editable directly, a content editable SPAN,
   * or DIV element can be placed inside the individual table cells.
   * See https://msdn.microsoft.com/en-us/library/ms537837%28v=VS.85%29.aspx
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @method isEditable
   * @param {CKEDITOR.dom.element} el The table element to test if editable
   * @return {Boolean}
   */
		isEditable: function isEditable(el) {
			if (!CKEDITOR.env.ie || !el.is(IE_NON_DIRECTLY_EDITABLE_ELEMENT)) {
				return !el.isReadOnly();
			}

			if (el.hasAttribute('contenteditable')) {
				return el.getAttribute('contenteditable') !== 'false';
			}

			return this.isEditable(el.getParent());
		},

		/**
   * Returns which heading style is set for the given table.
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @method getHeading
   * @param {CKEDITOR.dom.element} table The table to gather the heading from. If null, it will be retrieved from the current selection.
   * @return {String} The heading of the table. Expected values are `CKEDITOR.Table.NONE`, `CKEDITOR.Table.ROW`, `CKEDITOR.Table.COL` and `CKEDITOR.Table.BOTH`.
   */
		getHeading: function getHeading(table) {
			table = table || this.getFromSelection();

			if (!table) {
				return null;
			}

			var rowHeadingSettings = table.$.tHead !== null;

			var colHeadingSettings = true;

			// Check if all of the first cells in every row are TH
			for (var row = 0; row < table.$.rows.length; row++) {
				// If just one cell isn't a TH then it isn't a header column
				var cell = table.$.rows[row].cells[0];

				if (cell && cell.nodeName.toLowerCase() !== 'th') {
					colHeadingSettings = false;
					break;
				}
			}

			var headingSettings = Table.HEADING_NONE;

			if (rowHeadingSettings) {
				headingSettings = Table.HEADING_ROW;
			}

			if (colHeadingSettings) {
				headingSettings = headingSettings === Table.HEADING_ROW ? Table.HEADING_BOTH : Table.HEADING_COL;
			}

			return headingSettings;
		},

		/**
   * Removes a table from the editor.
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @method remove
   * @param {CKEDITOR.dom.element} table The table element which table style should be removed.
   */
		remove: function remove(table) {
			var editor = this._editor;

			if (table) {
				table.remove();
			} else {
				table = editor.elementPath().contains('table', 1);

				if (table) {
					// If the table's parent has only one child remove it as well (unless it's a table cell, or the editable element) (#5416, #6289, #12110)
					var parent = table.getParent();
					var editable = editor.editable();

					if (parent.getChildCount() === 1 && !parent.is('td', 'th') && !parent.equals(editable)) {
						table = parent;
					}

					var range = editor.createRange();
					range.moveToPosition(table, CKEDITOR.POSITION_BEFORE_START);
					table.remove();
					range.select();
				}
			}
		},

		/**
   * Assigns provided attributes to a table.
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @method setAttributes
   * @param {Object} table The table to which the attributes should be assigned
   * @param {Object} attrs The attributes which have to be assigned to the table
   */
		setAttributes: function setAttributes(table, attrs) {
			if (attrs) {
				Object.keys(attrs).forEach(function (attr) {
					table.setAttribute(attr, attrs[attr]);
				});
			}
		},

		/**
   * Sets the appropriate table heading style to a table.
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @method setHeading
   * @param {CKEDITOR.dom.element} table The table element to which the heading should be set. If null, it will be retrieved from the current selection.
   * @param {String} heading The table heading to be set. Accepted values are: `CKEDITOR.Table.NONE`, `CKEDITOR.Table.ROW`, `CKEDITOR.Table.COL` and `CKEDITOR.Table.BOTH`.
   */
		setHeading: function setHeading(table, heading) {
			table = table || this.getFromSelection();

			var i = void 0;
			var newCell = void 0;
			var tableHead = void 0;
			var tableBody = table.getElementsByTag('tbody').getItem(0);

			var tableHeading = this.getHeading(table);
			var hadColHeading = tableHeading === Table.HEADING_COL || tableHeading === Table.HEADING_BOTH;

			var needColHeading = heading === Table.HEADING_COL || heading === Table.HEADING_BOTH;
			var needRowHeading = heading === Table.HEADING_ROW || heading === Table.HEADING_BOTH;

			// If we need row heading and don't have a <thead> element yet, move the
			// first row of the table to the head and convert the nodes to <th> ones.
			if (!table.$.tHead && needRowHeading) {
				var tableFirstRow = tableBody.getElementsByTag('tr').getItem(0);
				var tableFirstRowChildCount = tableFirstRow.getChildCount();

				// Change TD to TH:
				for (i = 0; i < tableFirstRowChildCount; i++) {
					var cell = tableFirstRow.getChild(i);

					// Skip bookmark nodes. (#6155)
					if (cell.type === CKEDITOR.NODE_ELEMENT && !cell.data('cke-bookmark')) {
						cell.renameNode('th');
						cell.setAttribute('scope', 'col');
					}
				}

				tableHead = this._createElement(table.$.createTHead());
				tableHead.append(tableFirstRow.remove());
			}

			// If we don't need row heading and we have a <thead> element, move the
			// row out of there and into the <tbody> element.
			if (table.$.tHead !== null && !needRowHeading) {
				// Move the row out of the THead and put it in the TBody:
				tableHead = this._createElement(table.$.tHead);

				var previousFirstRow = tableBody.getFirst();

				while (tableHead.getChildCount() > 0) {
					var newFirstRow = tableHead.getFirst();
					var newFirstRowChildCount = newFirstRow.getChildCount();

					for (i = 0; i < newFirstRowChildCount; i++) {
						newCell = newFirstRow.getChild(i);

						if (newCell.type === CKEDITOR.NODE_ELEMENT) {
							newCell.renameNode('td');
							newCell.removeAttribute('scope');
						}
					}

					newFirstRow.insertBefore(previousFirstRow);
				}

				tableHead.remove();
			}

			tableHeading = this.getHeading(table);
			var hasColHeading = tableHeading === Table.HEADING_COL || tableHeading === Table.HEADING_BOTH;

			// If we need column heading and the table doesn't have it, convert every first cell in
			// every row into a `<th scope="row">` element.
			if (!hasColHeading && needColHeading) {
				for (i = 0; i < table.$.rows.length; i++) {
					if (table.$.rows[i].cells[0].nodeName.toLowerCase() !== 'th') {
						newCell = new CKEDITOR.dom.element(table.$.rows[i].cells[0]);
						newCell.renameNode('th');
						newCell.setAttribute('scope', 'row');
					}
				}
			}

			// If we don't need column heading but the table has it, convert every first cell in every
			// row back into a `<td>` element.
			if (hadColHeading && !needColHeading) {
				for (i = 0; i < table.$.rows.length; i++) {
					var row = new CKEDITOR.dom.element(table.$.rows[i]);

					if (row.getParent().getName() === 'tbody') {
						newCell = new CKEDITOR.dom.element(row.$.cells[0]);
						newCell.renameNode('td');
						newCell.removeAttribute('scope');
					}
				}
			}
		},

		/**
   * Creates a new CKEDITOR.dom.element using the passed tag name.
   *
   * @instance
   * @memberof CKEDITOR.Table
   * @protected
   * @method _createElement
   * @param {String} name The tag name from which an element should be created
   * @return {CKEDITOR.dom.element} Instance of CKEDITOR DOM element class
   */
		_createElement: function _createElement(name) {
			return new CKEDITOR.dom.element(name, this._editor.document);
		}
	};

	CKEDITOR.on('instanceReady', function (event) {
		var headingCommands = [Table.HEADING_NONE, Table.HEADING_ROW, Table.HEADING_COL, Table.HEADING_BOTH];

		var tableUtils = new Table(event.editor);

		headingCommands.forEach(function (heading) {
			event.editor.addCommand('tableHeading' + heading, {
				exec: function exec(_editor) {
					tableUtils.setHeading(null, heading);
				}
			});
		});
	});

	CKEDITOR.Table = CKEDITOR.Table || Table;
})();

/***/ }),

/***/ "./src/core/tools.js":
/*!***************************!*\
  !*** ./src/core/tools.js ***!
  \***************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	/**
  * CKEDITOR.tools class utility which adds additional methods to those of CKEditor.
  *
  * @class CKEDITOR.tools
  */

	/**
  * Sends a request using the JSONP technique.
  *
  * @memberof CKEDITOR.tools
  * @method jsonp
  * @param {CKEDITOR.template} urlTemplate The template of the URL to be requested. All properties passed in `urlParams` can be used, plus a `{callback}`, which represent a JSONP callback, must be defined.
  * @param {Function} callback A function to be called in case of success.
  * @param {Function} errorCallback A function to be called in case of failure.
  * @param {Object} urlParams Parameters to be passed to the `urlTemplate`.
  * @return {Object} An object with the following properties:
  *  - id: the transaction ID
  *  - a `cancel()` method
  * @static
  */

	CKEDITOR.tools.jsonp = function (urlTemplate, urlParams, callback, errorCallback) {
		var callbackKey = CKEDITOR.tools.getNextNumber();

		urlParams = urlParams || {};
		urlParams.callback = 'CKEDITOR._.jsonpCallbacks[' + callbackKey + ']';

		if (!CKEDITOR._.jsonpCallbacks) {
			CKEDITOR._.jsonpCallbacks = {};
		}

		CKEDITOR._.jsonpCallbacks[callbackKey] = function (response) {
			setTimeout(function () {
				cleanUp();

				callback(response);
			});
		};

		var scriptElement = new CKEDITOR.dom.element('script');
		scriptElement.setAttribute('src', urlTemplate.output(urlParams));
		scriptElement.on('error', function () {
			cleanUp();

			if (errorCallback) {
				errorCallback();
			}
		});

		function cleanUp() {
			if (scriptElement) {
				scriptElement.remove();
				delete CKEDITOR._.jsonpCallbacks[callbackKey];
				scriptElement = null;
			}
		}

		CKEDITOR.document.getBody().append(scriptElement);

		return {
			cancel: cleanUp,
			id: callbackKey
		};
	};

	/**
  * Returns a new object containing all of the properties of all the supplied
  * objects. The properties from later objects will overwrite those in earlier
  * objects.
  *
  * Passing in a single object will create a shallow copy of it.
  *
  * @memberof CKEDITOR.tools
  * @method merge
  * @param {Object} objects* One or more objects to merge.
  * @return {Object} A new merged object.
  * @static
  */
	CKEDITOR.tools.merge = CKEDITOR.tools.merge || function () {
		var result = {};

		for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
			args[_key] = arguments[_key];
		}

		for (var i = 0; i < args.length; ++i) {
			var obj = args[i];

			for (var key in obj) {
				if (Object.prototype.hasOwnProperty.call(obj, key)) {
					result[key] = obj[key];
				}
			}
		}

		return result;
	};

	/**
  * Simulates event on a DOM element.
  *
  * @memberof CKEDITOR.tools
  * @method simulate
  * @param {DOMElement} element The element on which the event shoud be simualted.
  * @param {String} event The name of the event which have to be simulated.
  * @static
  */
	CKEDITOR.tools.simulate = function (element, event) {
		var eventInstance = document.createEvent('Events');
		eventInstance.initEvent(event, true, false);
		element.dispatchEvent(eventInstance);
	};
})();

/***/ }),

/***/ "./src/core/uicore.js":
/*!****************************!*\
  !*** ./src/core/uicore.js ***!
  \****************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_uicore')) {
		return;
	}

	/**
  * UICore class which will handle user interactions with the editor. These interactions
  * might be triggered via mouse, keyboard or touch devices. The class fill fire an event via
  * CKEditor's event system - "editorInteraction". The UI may listen to this event and
  * execute some actions - for example to show/hide toolbars.
  *
  * By default if user presses the Esc key, 'editorInteraction' event won't be fired. However, this behaviour can be changed
  * by setting {{#crossLink "CKEDITOR.plugins.ae_uicore/allowEsc:attribute"}}{{/crossLink}} config property in editor's configuration to true.
  *
  * @class ae_uicore
  */

	/**
  * Fired when user interacts somehow with the browser. This may be clicking with the mouse, pressing keyboard button,
  * or touching screen. This even will be not fired after each interaction. It will be debounced. By default the timeout
  * is 50ms. This value can be overwritten via {{#crossLink "CKEDITOR.plugins.ae_uicore/timeout:attribute"}}{{/crossLink}}
  * property of editor's configuration, like: editor.config.uicore.timeout = 100
  *
  * @memberof ae_uicore
  * @event ae_uicore#editorInteraction
  * @param {Object} data An object which contains the following properties:
  * - nativeEvent - The event as received from CKEditor.
  * - selectionData - The data, returned from {{#crossLink "CKEDITOR.plugins.ae_selectionregion/getSelectionData:method"}}{{/crossLink}}
  */

	/**
  * Fired by UI elements like Toolbars or Buttons when their state changes. The listener updates the live region with the provided data.
  *
  * @memberof ae_uicore
  * @event ae_uicore#ariaUpdate
  * @param {Object} data An object which contains the following properties:
  * - message - The provided message from the UI element.
  */

	/**
  * If set to true, the editor will still fire {{#crossLink "CKEDITOR.plugins.ae_uicore/editorInteraction:event"}}{{/crossLink}} event,
  * if user presses Esc key.
  *
  * @memberof ae_uicore
  * @attribute allowEsc
  * @default false
  * @type Boolean
  */

	/**
  * Specifies the default timeout after which the {{#crossLink "CKEDITOR.plugins.ae_uicore/editorInteraction:event"}}{{/crossLink}} event
  * will be fired.
  *
  * @memberof ae_uicore
  * @attribute timeout
  * @default 50 (ms)
  * @type Number
  */

	CKEDITOR.plugins.add('ae_uicore', {
		/**
   * Initializer lifecycle implementation for the UICore plugin.
   *
   * @memberof ae_uicore
   * @method init
   * @param {Object} editor The current CKEditor instance.
   * @protected
   */
		init: function init(editor) {
			var ariaState = [];

			var ariaElement = this._createAriaElement(editor.id);

			var uiTasksTimeout = editor.config.uicore ? editor.config.uicore.timeout : 50;

			var handleUI = CKEDITOR.tools.debounce(function (event) {
				ariaState = [];

				if (event.name !== 'keyup' || event.data.$.keyCode !== 27 || editor.config.allowEsc) {
					var selectionData = editor.getSelectionData();

					if (selectionData) {
						editor.fire('editorInteraction', {
							nativeEvent: event.data.$,
							selectionData: selectionData
						});
					}
				}
			}, uiTasksTimeout);

			var handleAria = CKEDITOR.tools.debounce(function (_event) {
				ariaElement.innerHTML = ariaState.join('. ');
			}, uiTasksTimeout);

			var handleMouseLeave = CKEDITOR.tools.debounce(function (event) {
				var aeUINodes = document.querySelectorAll('.ae-ui');

				var found = void 0;

				for (var i = 0; i < aeUINodes.length; i++) {
					if (aeUINodes[i].contains(event.data.$.relatedTarget)) {
						found = true;
						break;
					}
				}

				if (!found) {
					handleUI(event);
				}
			}, uiTasksTimeout);

			editor.on('ariaUpdate', function (event) {
				// handleAria is debounced function, so if it is being called multiple times, it will
				// be canceled until some time passes.
				// For that reason here we explicitly append the current message to the list of messages
				// and call handleAria. Since it is debounced, when some timeout passes,
				// all the messages will be applied to the live region and not only the last one.

				ariaState.push(event.data.message);

				handleAria();
			});

			editor.once('contentDom', function () {
				var editable = editor.editable();

				var focusHandler = editable.attachListener(editable, 'focus', function (event) {
					focusHandler.removeListener();

					editable.attachListener(editable, 'keyup', handleUI);
					editable.attachListener(editable, 'mouseup', handleUI);
					editable.attachListener(editable, 'mouseleave', handleMouseLeave);

					handleUI(event);
				});
			});

			editor.on('destroy', function (_event) {
				ariaElement.parentNode.removeChild(ariaElement);

				handleUI.detach();
			});
		},

		/**
   * Creates and applies an HTML element to the body of the document which will contain ARIA messages.
   *
   * @memberof ae_uicore
   * @method _createAriaElement
   * @param {String} id The provided id of the element. It will be used as prefix for the final element Id.
   * @protected
   * @return {HTMLElement} The created and applied to DOM element.
   */
		_createAriaElement: function _createAriaElement(id) {
			var statusElement = document.createElement('div');

			statusElement.className = 'ae-sr-only';

			statusElement.setAttribute('aria-live', 'polite');
			statusElement.setAttribute('role', 'status');
			statusElement.setAttribute('id', id + 'LiveRegion');

			document.body.appendChild(statusElement);

			return statusElement;
		}
	});
})();

/***/ }),

/***/ "./src/oop/attribute.js":
/*!******************************!*\
  !*** ./src/oop/attribute.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lang = __webpack_require__(/*! ./lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

/**
 * Attribute implementation.
 *
 * @class Attribute
 * @constructor
 */
function Attribute(config) {
	this.__config__ = config || {};
	this.__ATTRS__ = {};
}

Attribute.prototype = {
	constructor: Attribute,

	/**
  * Retrieves the value of an attribute.
  *
  * @instance
  * @memberof Attribute
  * @method get
  * @param {String} attr The attribute which value should be retrieved.
  * @return {Any} The value of the attribute.
  */
	get: function get(attr) {
		var currentAttr = this.constructor.ATTRS[attr];

		if (!currentAttr) {
			return;
		}

		if (!this._isInitialized(attr)) {
			this._init(attr);
		}

		var curValue = this.__ATTRS__[attr];

		if (currentAttr.getter) {
			curValue = this._callStringOrFunction(currentAttr.getter, curValue);
		}

		return curValue;
	},

	/**
  * Sets the value of an attribute.
  *
  * @instance
  * @memberof Attribute
  * @method set
  * @param {String} attr The attribute which value should be set.
  * @param {Any} value The value which should be set to the attribute.
  */
	set: function set(attr, value) {
		var currentAttr = this.constructor.ATTRS[attr];

		if (!currentAttr) {
			return;
		}

		if (!this._isInitialized(attr)) {
			this._init(attr);
		}

		if (currentAttr.readOnly) {
			return;
		}

		if (currentAttr.writeOnce && this._isInitialized(attr)) {
			return;
		}

		if (currentAttr.validator && !this._callStringOrFunction(currentAttr.validator, value)) {
			return;
		}

		if (currentAttr.setter) {
			value = this._callStringOrFunction(currentAttr.setter, value);
		}

		this.__ATTRS__[attr] = value;
	},

	/**
  * Calls the provided param as function with the supplied arguments.
  * If param provided as string, a corresponding function in this object will
  * be called. If provided param is a function, it will be directly called.
  *
  * @instance
  * @memberof Attribute
  * @method _callStringOrFunction
  * @param  {Any|Array} args The arguments which will be provided to the called function
  * @param  {String|Function} stringOrFunction The function which should be called
  * @protected
  * @return {Any} The returned value from the called function
  */
	_callStringOrFunction: function _callStringOrFunction(stringOrFunction, args) {
		var result = null;

		if (!_lang2.default.isArray(args)) {
			args = [args];
		}

		if (_lang2.default.isString(stringOrFunction) && _lang2.default.isFunction(this[stringOrFunction])) {
			result = this[stringOrFunction].apply(this, _toConsumableArray(args));
		} else if (_lang2.default.isFunction(stringOrFunction)) {
			result = stringOrFunction.apply(this, args);
		}

		return result;
	},

	/**
  * Initializes an attribute. Sets its default value depending on the flags of the
  * attribute and the passed configuration object to the constructor.
  *
  * @instance
  * @memberof Attribute
  * @method _init
  * @param {String} attr The name of the attribute which have to be initialized.
  * @protected
  */
	_init: function _init(attr) {
		var value = void 0;

		var currentAttr = this.constructor.ATTRS[attr];

		// Check if there is default value or passed one via configuration object
		var hasDefaultValue = Object.prototype.hasOwnProperty.call(currentAttr, 'value');
		var hasPassedValueViaConfig = Object.prototype.hasOwnProperty.call(this.__config__, attr);

		// If there is valueFn, set the value to be the result of invocation of this function
		if (currentAttr.valueFn) {
			value = this._callStringOrFunction(currentAttr.valueFn, value);

			this.__ATTRS__[attr] = value;
		}
		// else if the attribute has readOnly flag, set the default value from the attribute,
		// regardless if there is value or not
		else if (currentAttr.readOnly) {
				value = currentAttr.value;
			}
			// else if the attribute has writeOnce value, set it from the passed configuration or from the
			// default value, in this order. Otherwise, return miserable.
			else if (currentAttr.writeOnce) {
					if (hasPassedValueViaConfig) {
						value = this.__config__[attr];
					} else if (hasDefaultValue) {
						value = currentAttr.value;
					} else {
						return;
					}
				}
				// These two cases below are easy - set the value to be from the passed config or
				// from the default value, in this order.
				else if (hasPassedValueViaConfig) {
						value = this.__config__[attr];
					} else if (hasDefaultValue) {
						value = currentAttr.value;
					}

		// If there is validator, and user passed config object - check the returned value.
		// If it is false, then set as initial value the default one.
		// However, if there is no default value, just return.
		if (currentAttr.validator && hasPassedValueViaConfig && !this._callStringOrFunction(currentAttr.validator, value)) {
			if (hasDefaultValue) {
				value = currentAttr.value;
			} else {
				return;
			}
		}

		// If there is setter and user passed config object - pass the value thought the setter.
		// The value might be one from defaultFn, default value or provided from the config.
		if (currentAttr.setter && hasPassedValueViaConfig) {
			value = this._callStringOrFunction(currentAttr.setter, value);
		}

		// Finally, set the value as initial value to the storage with values.
		this.__ATTRS__[attr] = value;
	},

	/**
  * Checks if an attribute is initialized. An attribute is considered as initialized
  * when there is an own property with this name in the local collection of attribute values
  * for the current instance.
  *
  * @instance
  * @memberof Attribute
  * @method _isInitialized
  * @param {String} attr The attribute which should be checked if it is initialized.
  * @protected
  * @return {Boolean} Returns true if the attribute has been initialized, false otherwise.
  */
	_isInitialized: function _isInitialized(attr) {
		return Object.prototype.hasOwnProperty.call(this.__ATTRS__, attr);
	}
};

exports.default = Attribute;

/***/ }),

/***/ "./src/oop/base.js":
/*!*************************!*\
  !*** ./src/oop/base.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _attribute = __webpack_require__(/*! ./attribute.js */ "./src/oop/attribute.js");

var _attribute2 = _interopRequireDefault(_attribute);

var _lang = __webpack_require__(/*! ./lang.js */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

var _oop = __webpack_require__(/*! ./oop.js */ "./src/oop/oop.js");

var _oop2 = _interopRequireDefault(_oop);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Quick and dirty impl of Base class.
 *
 * @class Base
 * @constructor
 */
function Base(config) {
	Base.superclass.constructor.call(this, config);

	this.init(config);
}

(0, _oop2.default)(Base, _attribute2.default, {
	/**
  * Calls the `initializer` method of each class which extends Base starting from the parent to the child.
  * Will pass the configuration object to each initializer method.
  *
  * @instance
  * @memberof Base
  * @method init
  * @param {Object} config Configuration object
  */
	init: function init(config) {
		this._callChain('initializer', config);
	},

	/**
  * Calls the `destructor` method of each class which extends Base starting from the parent to the child.
  *
  * @instance
  * @memberof Base
  * @method destroy
  */
	destroy: function destroy() {
		this._callChain('destructor');
	},

	/**
  * Calls a method of each class, which is being present in the hierarchy starting from parent to the child.
  *
  * @instance
  * @memberof Base
  * @method _callChain
  * @param {Object|Array} args The arguments with which the method should be invoked
  * @param {String} wat  The method, which should be invoked
  * @protected
  */
	_callChain: function _callChain(wat, args) {
		var arr = [];

		var ctor = this.constructor;

		while (ctor) {
			if (_lang2.default.isFunction(ctor.prototype[wat])) {
				arr.push(ctor.prototype[wat]);
			}

			ctor = ctor.superclass ? ctor.superclass.constructor : null;
		}

		arr = arr.reverse();

		args = _lang2.default.isArray(args) ? args : [args];

		for (var i = 0; i < arr.length; i++) {
			var item = arr[i];

			item.apply(this, args);
		}
	}
});

exports.default = Base;

/***/ }),

/***/ "./src/oop/lang.js":
/*!*************************!*\
  !*** ./src/oop/lang.js ***!
  \*************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Provides core language utilities.
 *
 * @class Lang
 */
var Lang = {
	/**
  * Check if the passed value is an array.
  *
  * @memberof Lang
  * @method isArray
  * @param {Any} value The value which have to be checked.
  * @return {Boolean} True if the passed value is an array, false otherwise.
  * @static
  */
	isArray: function isArray(value) {
		return Object.prototype.toString.call(value) === '[object Array]';
	},

	/**
  * Check if the passed value is boolean.
  *
  * @memberof Lang
  * @method isBoolean
  * @param {Any} value The value which have to be checked.
  * @return {Boolean} True if the passed value is boolean, false otherwise.
  * @static
  */
	isBoolean: function isBoolean(value) {
		return typeof value === 'boolean';
	},

	/**
  * Check if the passed value is a function.
  *
  * @memberof Lang
  * @method isFunction
  * @param {Any} value The value which have to be checked.
  * @return {Boolean} True if the passed value is a function, false otherwise.
  * @static
  */
	isFunction: function isFunction(value) {
		return typeof value === 'function';
	},

	/**
  * Check if the passed value is NULL.
  *
  * @memberof Lang
  * @method isNull
  * @param {Any} value The value which have to be checked.
  * @return {Boolean} True if the passed value is NULL, false otherwise.
  * @static
  */
	isNull: function isNull(value) {
		return value === null;
	},

	/**
  * Check if the passed value is number.
  *
  * @memberof Lang
  * @method isNumber
  * @param {Any} value The value which have to be checked.
  * @return {Boolean} True if the passed value is number, false otherwise.
  * @static
  */
	isNumber: function isNumber(value) {
		return typeof value === 'number' && isFinite(value);
	},

	/**
  * Check if the passed value is an object
  *
  * @memberof Lang
  * @method isObject
  * @param {Any} value The value which have to be checked.
  * @return {Boolean} True if the passed value is an object, false otherwise.
  * @static
  */
	isObject: function isObject(value) {
		var valueType = typeof value === 'undefined' ? 'undefined' : _typeof(value);

		return value && (valueType === 'object' || Lang.isFunction(value));
	},

	/**
  * Check if the passed value is a string.
  *
  * @memberof Lang
  * @method isString
  * @param {Any} value The value which have to be checked.
  * @return {Boolean} True if the passed value is a string, false otherwise.
  * @static
  */
	isString: function isString(value) {
		return typeof value === 'string';
	},

	/**
  * Adds all properties from the supplier to the receiver.
  * The function will add all properties, not only these owned by the supplier.
  *
  * @memberof Lang
  * @method mix
  * @param {Object} receiver The object which will receive properties.
  * @param {Object} supplier The object which provides properties.
  * @return {Object} The modified receiver.
  * @static
  */
	mix: function mix(receiver, supplier) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;

		for (var key in supplier) {
			if (hasOwnProperty.call(supplier, key)) {
				receiver[key] = supplier[key];
			}
		}
	},

	/**
  * Converts value to Integer.
  *
  * @memberof Lang
  * @method toInt
  * @param {Any} value The value which have to be converted to Integer.
  * @return {Integer} The converted value.
  * @static
  */
	toInt: function toInt(value) {
		return parseInt(value, 10);
	}
};

exports.default = Lang;

/***/ }),

/***/ "./src/oop/oop.js":
/*!************************!*\
  !*** ./src/oop/oop.js ***!
  \************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _lang = __webpack_require__(/*! ./lang */ "./src/oop/lang.js");

var _lang2 = _interopRequireDefault(_lang);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * Sets the prototype, constructor and superclass properties to support an inheritance strategy
 * that can chain constructors and methods. Static members will not be inherited.
 *
 * @memberof OOP
 * @method extend
 * @param {Function} receiver The class which will extend another class.
 * @param {Function} supplier The class which will provide the properties the child class.
 * @param {Object} protoProps Prototype properties to add/override.
 * @param {Object} staticProps Static properties to add/overwrite.
 * @return {Function} The extended class.
 * @static
 */
var extend = function extend(receiver, supplier, protoProps, staticProps) {
	if (!supplier || !receiver) {
		throw new Error('extend failed, verify dependencies');
	}

	var supplierProto = supplier.prototype;

	var receiverProto = Object.create(supplierProto);
	receiver.prototype = receiverProto;

	receiverProto.constructor = receiver;
	receiver.superclass = supplierProto;

	// assign constructor property
	if (supplier !== Object && supplierProto.constructor === Object.prototype.constructor) {
		supplierProto.constructor = supplier;
	}

	// add prototype overrides
	if (protoProps) {
		_lang2.default.mix(receiverProto, protoProps);
	}

	// add object overrides
	if (staticProps) {
		_lang2.default.mix(receiver, staticProps);
	}

	return receiver;
};

exports.default = extend;

/***/ }),

/***/ "./src/plugins/DragEvent.es.js":
/*!*************************************!*\
  !*** ./src/plugins/DragEvent.es.js ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DragEvent = function () {
	function DragEvent(window, document) {
		_classCallCheck(this, DragEvent);

		this.document = document;
		this.window = window;

		this.events = {
			keydown: this.keydown.bind(this),
			mousemove: this.mousemove.bind(this),
			mouseup: this.mouseup.bind(this)
		};
	}

	_createClass(DragEvent, [{
		key: 'start',
		value: function start(event) {
			event.preventDefault();
			event.stopPropagation();

			this.target = event.target;

			this.className = this.target.className;

			this.startPos = {
				x: event.clientX,
				y: event.clientY
			};

			this.update(event);

			this.document.addEventListener('keydown', this.events.keydown, false);
			this.document.addEventListener('mousemove', this.events.mousemove, false);
			this.document.addEventListener('mouseup', this.events.mouseup, false);

			this.document.body.classList.add('dragging-' + this.className);

			if (typeof this.onStart === 'function') {
				this.onStart();
			}
		}
	}, {
		key: 'update',
		value: function update(event) {
			this.currentPos = {
				x: event.clientX,
				y: event.clientY
			};

			this.delta = {
				x: event.clientX - this.startPos.x,
				y: event.clientY - this.startPos.y
			};

			this.keys = {
				alt: event.altKey,
				ctrl: event.ctrlKey,
				shift: event.shiftKey
			};
		}
	}, {
		key: 'mousemove',
		value: function mousemove(event) {
			this.update(event);

			if (typeof this.onDrag === 'function') {
				this.onDrag();
			}

			if (event.which === 0) {
				this.mouseup(event);
			}
		}
	}, {
		key: 'keydown',
		value: function keydown(event) {
			if (event.keyCode === 27) {
				this.release();
			}
		}
	}, {
		key: 'mouseup',
		value: function mouseup(event) {
			this.update(event);

			this.release();

			if (typeof this.onComplete === 'function') {
				this.onComplete();
			}
		}
	}, {
		key: 'release',
		value: function release() {
			this.document.body.classList.remove('dragging-' + this.className);

			this.document.removeEventListener('keydown', this.events.keydown, false);
			this.document.removeEventListener('mousemove', this.events.mousemove, false);
			this.document.removeEventListener('mouseup', this.events.mouseup, false);

			if (typeof this.onRelease === 'function') {
				this.onRelease();
			}
		}
	}]);

	return DragEvent;
}();

exports.DragEvent = DragEvent;
exports.default = DragEvent;

/***/ }),

/***/ "./src/plugins/Resizer.es.js":
/*!***********************************!*\
  !*** ./src/plugins/Resizer.es.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.Resizer = undefined;

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _DragEvent = __webpack_require__(/*! ./DragEvent.es */ "./src/plugins/DragEvent.es.js");

var _DragEvent2 = _interopRequireDefault(_DragEvent);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IMAGE_HANDLES = ['tl', 'tr', 'bl', 'br'];

var POSITION_ELEMENT_FN = {
	bl: function bl(handle, left, top, box) {
		positionElement(handle, -3 + left, box.height - 4 + top);
	},
	br: function br(handle, left, top, box) {
		positionElement(handle, box.width - 4 + left, box.height - 4 + top);
	},
	rm: function rm(handle, left, top, box) {
		positionElement(handle, box.width - 4 + left, Math.round(box.height / 2) - 3 + top);
	},
	tl: function tl(handle, left, top, _box) {
		positionElement(handle, left - 3, top - 3);
	},
	tr: function tr(handle, left, top, box) {
		positionElement(handle, box.width - 4 + left, -3 + top);
	}
};

var positionElement = function positionElement(el, left, top) {
	el.style.left = left + 'px';
	el.style.top = top + 'px';
};

var getBoundingBox = function getBoundingBox(window, el) {
	var rect = el.getBoundingClientRect();

	return {
		height: rect.height,
		left: rect.left + window.pageXOffset,
		top: rect.top + window.pageYOffset,
		width: rect.width
	};
};

var Resizer = function () {
	function Resizer(editor) {
		var cfg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

		_classCallCheck(this, Resizer);

		this.cfg = cfg;
		this.editor = editor;

		this.document = editor.document ? editor.document.$ : document;
		this.window = editor.window ? editor.window.$ : window;

		this.box = null;
		this.container = null;
		this.handles = {};
		this.preview = null;
		this.previewBox = null;
		this.result = null;

		this.init();
	}

	_createClass(Resizer, [{
		key: 'init',
		value: function init() {
			var _this = this;

			this.container = this.document.createElement('div');
			this.container.id = 'ckimgrsz';

			this.preview = this.document.createElement('span');

			this.container.appendChild(this.preview);

			this.handles = {};

			IMAGE_HANDLES.forEach(function (handleName) {
				_this.handles[handleName] = _this.createHandle(handleName);
			});

			var keys = Object.keys(this.handles);

			for (var i = 0; i < keys.length; i++) {
				this.container.appendChild(this.handles[keys[i]]);
			}
		}
	}, {
		key: 'createHandle',
		value: function createHandle(name) {
			var el = this.document.createElement('i');

			el.classList.add(name);

			return el;
		}
	}, {
		key: 'isHandle',
		value: function isHandle(el) {
			var keys = Object.keys(this.handles);

			var result = false;

			for (var i = 0; i < keys.length; i++) {
				if (this.handles[keys[i]] === el) {
					result = true;
				}
			}

			return result;
		}
	}, {
		key: 'show',
		value: function show(el) {
			var uiNode = this.editor.config.uiNode || document.body;

			this.el = el;

			this.box = getBoundingBox(this.window, this.el);

			positionElement(this.container, this.box.left, this.box.top + uiNode.scrollTop);

			uiNode.appendChild(this.container);

			this.el.classList.add('ckimgrsz');

			this.showHandles();
		}
	}, {
		key: 'hide',
		value: function hide() {
			var elements = this.document.getElementsByClassName('ckimgrsz');

			for (var i = 0; i < elements.length; i++) {
				elements[i].classList.remove('ckimgrsz');
			}

			this.hideHandles();

			if (this.container.parentNode) {
				this.container.parentNode.removeChild(this.container);
			}
		}
	}, {
		key: 'initDrag',
		value: function initDrag(event) {
			var _this2 = this;

			if (event.button !== 0) {
				return;
			}

			var drag = new _DragEvent2.default(this.window, this.document);

			drag.onStart = function () {
				_this2.showPreview();

				_this2.isDragging = true;

				_this2.editor.getSelection().lock();
			};

			drag.onDrag = function () {
				_this2.calculateSize(drag);

				var editorBounds = _this2.editor.element.$.getBoundingClientRect();

				if (_this2.previewBox.width >= editorBounds.width) {
					return;
				}

				_this2.updatePreview();

				var box = _this2.previewBox;

				_this2.updateHandles(box, box.left, box.top);
			};

			drag.onRelease = function () {
				_this2.hidePreview();

				_this2.isDragging = false;

				_this2.hide();

				_this2.editor.getSelection().unlock();

				_this2.editor.fire('saveSnapshot');
			};

			drag.onComplete = function () {
				_this2.resizeComplete();

				_this2.editor.fire('saveSnapshot');
			};

			drag.start(event);
		}
	}, {
		key: 'updateHandles',
		value: function updateHandles(box) {
			var left = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
			var top = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

			var keys = Object.keys(this.handles);

			for (var i = 0; i < keys.length; i++) {
				POSITION_ELEMENT_FN[keys[i]](this.handles[keys[i]], left, top, box);
			}
		}
	}, {
		key: 'showHandles',
		value: function showHandles() {
			this.updateHandles(this.box);

			var keys = Object.keys(this.handles);

			for (var i = 0; i < keys.length; i++) {
				this.handles[keys[i]].style.display = 'block';
			}
		}
	}, {
		key: 'hideHandles',
		value: function hideHandles() {
			var keys = Object.keys(this.handles);

			for (var i = 0; i < keys.length; i++) {
				this.handles[keys[i]].style.display = 'none';
			}
		}
	}, {
		key: 'showPreview',
		value: function showPreview() {
			this.calculateSize();

			this.updatePreview();

			this.preview.style.display = 'block';
		}
	}, {
		key: 'updatePreview',
		value: function updatePreview() {
			positionElement(this.preview, this.previewBox.left, this.previewBox.top);

			this.preview.style.height = this.previewBox.height + 'px';
			this.preview.style.width = this.previewBox.width + 'px';
		}
	}, {
		key: 'hidePreview',
		value: function hidePreview() {
			var box = getBoundingBox(this.window, this.preview);

			this.result = {
				height: box.height,
				width: box.width
			};

			this.preview.style.display = 'none';
		}
	}, {
		key: 'calculateSize',
		value: function calculateSize(data) {
			this.previewBox = {
				height: this.box.height,
				left: 0,
				top: 0,
				width: this.box.width
			};

			if (!data) {
				return;
			}

			var className = data.target.className;

			if (className.indexOf('r') >= 0) {
				this.previewBox.width = Math.max(32, this.box.width + data.delta.x);
			}

			if (className.indexOf('b') >= 0) {
				this.previewBox.height = Math.max(32, this.box.height + data.delta.y);
			}

			if (className.indexOf('l') >= 0) {
				this.previewBox.width = Math.max(32, this.box.width - data.delta.x);
			}

			if (className.indexOf('t') >= 0) {
				this.previewBox.height = Math.max(32, this.box.height - data.delta.y);
			}

			if (className.indexOf('m') < 0 && !data.keys.shift) {
				var ratio = this.box.width / this.box.height;

				if (this.previewBox.width / this.previewBox.height > ratio) {
					this.previewBox.height = Math.round(this.previewBox.width / ratio);
				} else {
					this.previewBox.width = Math.round(this.previewBox.height * ratio);
				}
			}

			if (className.indexOf('l') >= 0) {
				this.previewBox.left = this.box.width - this.previewBox.width;
			}

			if (className.indexOf('t') >= 0) {
				this.previewBox.top = this.box.height - this.previewBox.height;
			}
		}
	}, {
		key: 'resizeComplete',
		value: function resizeComplete() {
			this.cfg.onComplete(this.el, this.result.width, this.result.height);
		}
	}]);

	return Resizer;
}();

exports.Resizer = Resizer;
exports.default = Resizer;

/***/ }),

/***/ "./src/plugins/addimages.js":
/*!**********************************!*\
  !*** ./src/plugins/addimages.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	var isIE = CKEDITOR.env.ie;

	if (CKEDITOR.plugins.get('ae_addimages')) {
		return;
	}

	/**
  * CKEditor plugin which allows Drag&Drop of images directly into the editable area. The image will be encoded
  * as Data URI. An event `beforeImageAdd` will be fired with the list of dropped images. If any of the listeners
  * returns `false` or cancels the event, the images won't be added to the content. Otherwise,
  * an event `imageAdd` will be fired with the inserted element into the editable area.
  *
  * @class CKEDITOR.plugins.ae_addimages
  */

	/**
  * Fired before adding images to the editor.
  *
  * @event CKEDITOR.plugins.ae_addimages#beforeImageAdd
  * @instance
  * @memberof CKEDITOR.plugins.ae_addimages
  * @param {Array} imageFiles Array of image files
  */

	/**
  * Fired when an image is being added to the editor successfully.
  *
  * @event CKEDITOR.plugins.ae_addimages#imageAdd
  * @instance
  * @memberof CKEDITOR.plugins.ae_addimages
  * @param {CKEDITOR.dom.element} el The created image with src as Data URI
  * @param {File} file The image file
  */

	CKEDITOR.plugins.add('ae_addimages', {
		/**
   * Initialization of the plugin, part of CKEditor plugin lifecycle.
   * The function registers a 'dragenter', 'dragover', 'drop' and `paste` events on the editing area.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method init
   * @param {Object} editor The current editor instance
   */
		init: function init(editor) {
			editor.once('contentDom', function () {
				var editable = editor.editable();

				editable.attachListener(editable, 'dragenter', this._onDragEnter, this, {
					editor: editor
				});

				editable.attachListener(editable, 'dragover', this._onDragOver, this, {
					editor: editor
				});

				editable.attachListener(editable, 'drop', this._onDragDrop, this, {
					editor: editor
				});

				editable.attachListener(editable, 'paste', this._onPaste, this, {
					editor: editor
				});
			}.bind(this));
		},

		/**
   * Accepts an array of dropped files to the editor. Then, it filters the images and sends them for further
   * processing to {{#crossLink "CKEDITOR.plugins.ae_addimages/_processFile:method"}}{{/crossLink}}
   *
   * @fires CKEDITOR.plugins.ae_addimages#beforeImageAdd
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method _handleFiles
   * @param {Array} files Array of dropped files. Only the images from this list will be processed.
   * @param {Object} editor The current editor instance
   * @protected
   */
		_handleFiles: function _handleFiles(files, editor) {
			var file = void 0;
			var i = void 0;

			var imageFiles = [];

			for (i = 0; i < files.length; i++) {
				file = files[i];

				if (file.type.indexOf('image') === 0) {
					imageFiles.push(file);
				}
			}

			var result = editor.fire('beforeImageAdd', {
				imageFiles: imageFiles
			});

			if (result) {
				for (i = 0; i < imageFiles.length; i++) {
					file = imageFiles[i];

					this._processFile(file, editor);
				}
			}

			return false;
		},

		/**
   * Handles drag drop event. The function will create a selection from the current
   * point and will send a list of files to be processed to
   * {{#crossLink "CKEDITOR.plugins.ae_addimages/_handleFiles:method"}}{{/crossLink}} method.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method _onDragDrop
   * @param {CKEDITOR.dom.event} event dragdrop event, as received natively from CKEditor
   * @protected
   */
		_onDragDrop: function _onDragDrop(event) {
			var nativeEvent = event.data.$;

			var transferFiles = nativeEvent.dataTransfer.files;

			if (transferFiles.length > 0) {
				new CKEDITOR.dom.event(nativeEvent).preventDefault();

				var editor = event.listenerData.editor;

				event.listenerData.editor.createSelectionFromPoint(nativeEvent.clientX, nativeEvent.clientY);

				this._handleFiles(transferFiles, editor);
			}
		},

		/**
   * Handles drag enter event. In case of IE, this function will prevent the event.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method _onDragEnter
   * @param {DOM event} event dragenter event, as received natively from CKEditor
   * @protected
   */
		_onDragEnter: function _onDragEnter(event) {
			if (isIE) {
				this._preventEvent(event);
			}
		},

		/**
   * Handles drag over event. In case of IE, this function will prevent the event.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method _onDragOver
   * @param {DOM event} event dragover event, as received natively from CKEditor
   * @protected
   */
		_onDragOver: function _onDragOver(event) {
			if (isIE) {
				this._preventEvent(event);
			}
		},

		/**
   * Checks if the pasted data is image and passes it to
   * {{#crossLink "CKEDITOR.plugins.ae_addimages/_processFile:method"}}{{/crossLink}} for processing.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method _onPaste
   * @param {CKEDITOR.dom.event} event A `paste` event, as received natively from CKEditor
   * @protected
   */
		_onPaste: function _onPaste(event) {
			if (event.data && event.data.$ && event.data.$.clipboardData && event.data.$.clipboardData.items && event.data.$.clipboardData.items.length > 0) {
				var pastedData = event.data.$.clipboardData.items[0];

				if (pastedData.type.indexOf('image') === 0) {
					var imageFile = pastedData.getAsFile();

					this._processFile(imageFile, event.listenerData.editor);
				}
			}
		},

		/**
   * Prevents a native event.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method _preventEvent
   * @param {DOM event} event The event to be prevented.
   * @protected
   */
		_preventEvent: function _preventEvent(event) {
			event = new CKEDITOR.dom.event(event.data.$);

			event.preventDefault();
			event.stopPropagation();
		},

		/**
   * Processes an image file. The function creates an img element and sets as source
   * a Data URI, then fires an 'imageAdd' event via CKEditor's event system.
   *
   * @fires CKEDITOR.plugins.ae_addimages#imageAdd
   * @instance
   * @memberof CKEDITOR.plugins.ae_addimages
   * @method _preventEvent
   * @param {DOM event} event The event to be prevented.
   * @protected
   */
		_processFile: function _processFile(file, editor) {
			var reader = new FileReader();

			reader.addEventListener('loadend', function () {
				var bin = reader.result;

				var el = CKEDITOR.dom.element.createFromHtml('<img src="' + bin + '">');

				editor.insertElement(el);

				var imageData = {
					el: el,
					file: file
				};

				editor.fire('imageAdd', imageData);
			});

			reader.readAsDataURL(file);
		}
	});
})();

/***/ }),

/***/ "./src/plugins/autolink.js":
/*!*********************************!*\
  !*** ./src/plugins/autolink.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_autolink')) {
		return;
	}

	// Disables the auto URL detection feature in IE, their lacks functionality:
	// They convert the links only on space. We do on space, comma, semicolon and Enter.
	if (/MSIE ([^;]*)|Trident.*; rv:([0-9.]+)/.test(navigator.userAgent)) {
		document.execCommand('AutoUrlDetect', false, false);
	}

	var KEY_BACK = 8;

	var KEY_COMMA = 188;

	var KEY_ENTER = 13;

	var KEY_SEMICOLON = 186;

	var KEY_SPACE = 32;

	var DELIMITERS = [KEY_COMMA, KEY_ENTER, KEY_SEMICOLON, KEY_SPACE];

	var REGEX_LAST_WORD = /[^\s]+/gim;

	var REGEX_URL = '((([A - Za - z]{ 3, 9}: (?: \\/\\/)?)(?:[-;:&=\\+\\$,\\w]+@)?[A-Za-z0-9.-]+|(https?\\:\\/\\/|www.|[-;:&=.\\+\\$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[\\+~%\\/.\\w-_]*)?\\??(?:[-\\+=&;%@.\\w_]*)#?(?:[\\w]*))((.*):(\\d*)\\/?(.*))?)';

	var REGEX_EMAIL = /[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}/i;

	/**
  * CKEditor plugin which automatically generates links when user types text which looks like URL.
  *
  * @class CKEDITOR.plugins.ae_autolink
  * @constructor
  */
	CKEDITOR.plugins.add('ae_autolink', {
		/**
   * Initialization of the plugin, part of CKEditor plugin lifecycle.
   * The function registers the `keyup` event on the editing area.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method init
   * @param {Object} editor The current editor instance
   */
		init: function init(editor) {
			editor.once('contentDom', function () {
				var editable = editor.editable();

				editable.attachListener(editable, 'keyup', this._onKeyUp, this, {
					editor: editor
				});
			}.bind(this));

			editor.on('paste', function (event) {
				if (event.data.method === 'paste') {
					if (event.data.dataValue.indexOf('<') > -1 || event.data.dataValue.indexOf('&lt;') > -1) {
						if (event.data.dataValue.indexOf('<u><font color="') > -1) {
							event.data.dataValue = event.data.dataValue.replace(/<u><font color="#(.*?)">|<\/font><\/u>/g, '');
						}
						return;
					}

					var instance = this;

					event.data.dataValue = event.data.dataValue.replace(RegExp(REGEX_URL, 'gim'), function (url) {
						if (instance._isValidURL(url)) {
							if (instance._isValidEmail(url)) {
								return '<a href="mailto:' + url + '">' + url + '</a>';
							} else {
								return '<a href="' + url + '">' + url + '</a>';
							}
						}
					});
				}
			}.bind(this));
		},

		/**
   * Retrieves the last word introduced by the user. Reads from the current
   * caret position backwards until it finds the first white space.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method _getLastWord
   * @protected
   * @return {String} The last word introduced by user
   */
		_getLastWord: function _getLastWord(editor) {
			var range = editor.getSelection().getRanges()[0];

			var offset = range.startOffset;

			var previousText = '';

			// The user pressed Enter, so we have to look on the previous node
			if (this._currentKeyCode === KEY_ENTER) {
				var previousNode = range.startContainer.getPrevious();

				var lastChild = void 0;

				if (previousNode) {
					// If previous node is a SPACE, (it does not have 'getLast' method),
					// ignore it and find the previous text node
					while (!previousNode.getLast) {
						previousNode = previousNode.getPrevious();
					}

					lastChild = previousNode.getLast();

					// Depending on the browser, the last child node may be a <BR>
					// (which does not have 'getText' method),
					// so ignore it and find the previous text node
					while (lastChild && !lastChild.getText()) {
						lastChild = lastChild.getPrevious();
					}
				}

				// Check if the lastChild is already a link
				if (!(lastChild && lastChild.$.href)) {
					this._startContainer = lastChild;
					previousText = lastChild ? lastChild.getText() : '';
					this._offset = previousText.length;
				}
			} else {
				this._startContainer = range.startContainer;

				// Last character is the delimiter, ignore it
				previousText = this._startContainer.getText().substring(0, offset - 1);

				this._offset = offset - 1;
			}

			var lastWord = '';

			var match = previousText.match(REGEX_LAST_WORD);

			if (match) {
				lastWord = match.pop();
			}

			return lastWord;
		},

		/**
   * Checks if the given link is a valid Email.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method isValidEmail
   * @param {String} link The email we want to know if it is a valid Email
   * @protected
   * @return {Boolean} Returns true if the email is a valid Email, false otherwise
   */
		_isValidEmail: function _isValidEmail(email) {
			return REGEX_EMAIL.test(email);
		},

		/**
   * Checks if the given link is a valid URL.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method isValidURL
   * @param {String} link The link we want to know if it is a valid URL
   * @protected
   * @return {Boolean} Returns true if the link is a valid URL, false otherwise
   */
		_isValidURL: function _isValidURL(link) {
			return RegExp(REGEX_URL, 'i').test(link);
		},

		/**
   * Listens to the `keydown` event and if the keycode is `Backspace`, removes the previously
   * created link.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method _onKeyDown
   * @param {EventFacade} event EventFacade object
   * @protected
   */
		_onKeyDown: function _onKeyDown(event) {
			var nativeEvent = event.data.$;

			var editor = event.listenerData.editor;

			var editable = editor.editable();

			editable.removeListener('keydown', this._onKeyDown);

			if (nativeEvent.keyCode === KEY_BACK) {
				event.cancel();
				event.data.preventDefault();

				this._removeLink(editor);
			}

			this._ckLink = null;
		},

		/**
   * Listens to the `Enter` and `Space` key events in order to check if the last word
   * introduced by the user should be replaced by a link element.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method _onKeyUp
   * @param {EventFacade} event EventFacade object
   * @protected
   */
		_onKeyUp: function _onKeyUp(event) {
			var nativeEvent = event.data.$;

			this._currentKeyCode = nativeEvent.keyCode;

			if (DELIMITERS.indexOf(this._currentKeyCode) !== -1) {
				var editor = event.listenerData.editor;

				var lastWord = this._getLastWord(editor);

				if (this._isValidURL(lastWord)) {
					this._replaceContentByLink(editor, lastWord);
				}
			}
		},

		/**
   * Replaces content by a link element.
   *
   * @fires CKEDITOR.plugins.ae_autolink#autolinkAdd
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method _replaceContentByLink
   * @param {String} content The text that has to be replaced by an link element
   * @protected
   */
		_replaceContentByLink: function _replaceContentByLink(editor, content) {
			var range = editor.createRange();
			var node = CKEDITOR.dom.element.get(this._startContainer);
			var offset = this._offset;

			// Select the content, so CKEDITOR.Link can properly replace it
			range.setStart(node, offset - content.length);
			range.setEnd(node, offset);
			range.select();

			var ckLink = new CKEDITOR.Link(editor);
			ckLink.create(content);
			this._ckLink = ckLink;

			var linkNode = ckLink.getFromSelection();
			editor.fire('autolinkAdd', linkNode);

			this._subscribeToKeyEvent(editor);

			// Now range is on the link and it is selected. We have to
			// return focus to the caret position.
			range = editor.getSelection().getRanges()[0];

			// If user pressed `Enter`, get the next editable node at position 0,
			// otherwise set the cursor at the next character of the link (the white space)
			if (this._currentKeyCode === KEY_ENTER) {
				var nextEditableNode = range.getNextEditableNode();

				range.setStart(nextEditableNode, 0);
				range.setEnd(nextEditableNode, 0);
			} else {
				var nextNode = range.getNextNode();

				range.setStart(nextNode, 1);
				range.setEnd(nextNode, 1);
			}

			range.select();
		},

		/**
   * Fired when a URL is detected in text and converted to a link.
   *
   * @event CKEDITOR.plugins.ae_autolink#autolinkAdd
   * @memberof CKEDITOR.plugins.ae_autolink
   * @param {CKEDITOR.dom.element} el Node of the created link.
   */

		/**
   * Removes the created link element, and replaces it by its text.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method _removeLink
   * @protected
   */
		_removeLink: function _removeLink(editor) {
			var range = editor.getSelection().getRanges()[0];
			var caretOffset = range.startOffset;

			// Select the link, so CKEDITOR.Link can properly remove it
			var linkNode = this._startContainer.getNext() || this._startContainer;

			var newRange = editor.createRange();
			newRange.setStart(linkNode, 0);
			newRange.setEndAfter(linkNode);
			newRange.select();

			this._ckLink.remove();

			// Return focus to the caret position
			range.setEnd(range.startContainer, caretOffset);
			range.setStart(range.startContainer, caretOffset);

			range.select();
		},

		/**
   * Subscribe to a key event of the editable aria.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolink
   * @method _subscribeToKeyEvent
   * @protected
   */
		_subscribeToKeyEvent: function _subscribeToKeyEvent(editor) {
			var editable = editor.editable();

			// Change the priority of keydown listener - 1 means the highest priority.
			// In Chrome on pressing `Enter` the listener is not being invoked.
			// See http://dev.ckeditor.com/ticket/11861 for more information.
			editable.attachListener(editable, 'keydown', this._onKeyDown, this, {
				editor: editor
			}, 1);
		}
	});
})();

/***/ }),

/***/ "./src/plugins/autolist.js":
/*!*********************************!*\
  !*** ./src/plugins/autolist.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_autolist')) {
		return;
	}

	var KEY_BACK = 8;

	var KEY_SPACE = 32;

	var DEFAULT_CONFIG = [{
		regex: /^\*$/,
		type: 'bulletedlist'
	}, {
		regex: /^1\.$/,
		type: 'numberedlist'
	}];

	/**
  * CKEditor plugin which automatically generates ordered/unordered list when user types text which looks like a list.
  *
  * @class CKEDITOR.plugins.ae_autolist
  * @constructor
  */
	CKEDITOR.plugins.add('ae_autolist', {
		/**
   * Initialization of the plugin, part of CKeditor plugin lifecycle.
   * The function registers the `keydown` event on the content editing area.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolist
   * @method init
   * @param {Object} editor The current editor instance
   */
		init: function init(editor) {
			editor.once('contentDom', function () {
				var editable = editor.editable();

				editable.attachListener(editable, 'keydown', this._onKeyDown, this, {
					editor: editor
				});
			}.bind(this));
		},

		/**
   * Checks for pressing the `Backspace` key in order to undo the list creation.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolist
   * @method _checkForBackspaceAndUndo
   * @param {Event} event Event object
   * @protected
   */
		_checkForBackspaceAndUndo: function _checkForBackspaceAndUndo(event) {
			var editor = event.listenerData.editor;

			var nativeEvent = event.data.$;

			var editable = editor.editable();

			editable.removeListener('keydown', this._checkForBackspaceAndUndo);

			if (nativeEvent.keyCode === KEY_BACK) {
				editor.execCommand('undo');
				editor.insertHtml(event.listenerData.bullet + '&nbsp;');
				event.data.preventDefault();
			}
		},

		/**
   * Checks current line to find match with MATCHES object to create OL or UL.
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolist
   * @method _checkLine
   * @param {editor} Editor object
   * @protected
   * @return {Object|null} Returns an object which contains the detected list config if any
   */
		_getListConfig: function _getListConfig(editor) {
			var configRegex = editor.config.autolist || DEFAULT_CONFIG;

			var range = editor.getSelection().getRanges()[0];

			var textContainer = range.endContainer.getText();

			var bullet = textContainer.substring(0, range.startOffset);

			var text = textContainer.substring(range.startOffset, textContainer.length);

			var index = 0;

			var regexLen = configRegex.length;

			var autolistCfg = null;

			while (!autolistCfg && regexLen > index) {
				var regexItem = configRegex[index];

				if (regexItem.regex.test(bullet)) {
					autolistCfg = {
						bullet: bullet,
						editor: editor,
						text: text,
						type: regexItem.type
					};

					break;
				}

				index++;
			}

			return autolistCfg;
		},

		/**
   * Create list with different types: Bulleted or Numbered list
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolist
   * @method _createList
   * @param {Object} listConfig Object that contains bullet, text and type for creating the list
   * @protected
   */
		_createList: function _createList(listConfig) {
			var editor = listConfig.editor;

			var range = editor.getSelection().getRanges()[0];

			range.endContainer.setText(listConfig.text);
			editor.execCommand(listConfig.type);

			var editable = editor.editable();

			// Subscribe to keydown in order to check if the next key press is `Backspace`.
			// If so, the creation of the list will be discarded.
			editable.attachListener(editable, 'keydown', this._checkForBackspaceAndUndo, this, {
				editor: editor,
				bullet: listConfig.bullet
			}, 1);
		},

		/**
   * Listens to the `Space` key events to check if the last word
   * introduced by the user should be replaced by a list (OL or UL)
   *
   * @instance
   * @memberof CKEDITOR.plugins.ae_autolist
   * @method _onKeyDown
   * @param {Event} event Event object
   * @protected
   */
		_onKeyDown: function _onKeyDown(event) {
			var nativeEvent = event.data.$;

			if (nativeEvent.keyCode === KEY_SPACE) {
				var listConfig = this._getListConfig(event.listenerData.editor);

				if (listConfig) {
					event.data.preventDefault();
					this._createList(listConfig);
				}
			}
		}
	});
})();

/***/ }),

/***/ "./src/plugins/dragresize.js":
/*!***********************************!*\
  !*** ./src/plugins/dragresize.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * CKEditor plugin: Dragable image resizing
 * https://github.com/sstur/ck-dragresize
 * - Shows semi-transparent overlay while resizing
 * - Enforces Aspect Ratio (unless holding shift)
 * - Snap to size of other images in editor
 * - Escape while dragging cancels resize
 */
(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_dragresize')) {
		return;
	}

	var IMAGE_HANDLES = {
		both: ['tl', 'tm', 'tr', 'lm', 'rm', 'bl', 'bm', 'br'],
		height: ['tl', 'tm', 'tr', 'bl', 'bm', 'br'],
		scale: ['tl', 'tr', 'bl', 'br'],
		width: ['tl', 'tr', 'lm', 'rm', 'bl', 'br']
	};

	var POSITION_ELEMENT_FN = {
		bl: function bl(handle, left, top, box) {
			positionElement(handle, -3 + left, box.height - 4 + top);
		},
		bm: function bm(handle, left, top, box) {
			positionElement(handle, Math.round(box.width / 2) - 3 + left, box.height - 4 + top);
		},
		br: function br(handle, left, top, box) {
			positionElement(handle, box.width - 4 + left, box.height - 4 + top);
		},
		lm: function lm(handle, left, top, box) {
			positionElement(handle, -3 + left, Math.round(box.height / 2) - 3 + top);
		},
		tl: function tl(handle, left, top, _box) {
			positionElement(handle, left - 3, top - 3);
		},
		tm: function tm(handle, left, top, box) {
			positionElement(handle, Math.round(box.width / 2) - 3 + left, -3 + top);
		},
		tr: function tr(handle, left, top, box) {
			positionElement(handle, box.width - 4 + left, -3 + top);
		},
		rm: function rm(handle, left, top, box) {
			positionElement(handle, box.width - 4 + left, Math.round(box.height / 2) - 3 + top);
		}
	};

	var IMAGE_SNAP_TO_SIZE = 7;

	var isFirefox = 'MozAppearance' in document.documentElement.style;

	var isWebKit = 'WebkitAppearance' in document.documentElement.style;

	var enablePlugin = isWebKit || isFirefox;

	if (enablePlugin) {
		// CSS is added in a compressed form
		CKEDITOR.addCss('img::selection{color:rgba(0,0,0,0)}img.ckimgrsz{outline:1px dashed #000}#ckimgrsz{position:absolute;width:0;height:0;cursor:default;z-index:10001}#ckimgrsz span{display:none;position:absolute;top:0;left:0;width:0;height:0;background-size:100% 100%;opacity:.65;outline:1px dashed #000}#ckimgrsz i{position:absolute;display:block;width:5px;height:5px;background:#fff;border:1px solid #000}#ckimgrsz i.active,#ckimgrsz i:hover{background:#000}#ckimgrsz i.br,#ckimgrsz i.tl{cursor:nwse-resize}#ckimgrsz i.bm,#ckimgrsz i.tm{cursor:ns-resize}#ckimgrsz i.bl,#ckimgrsz i.tr{cursor:nesw-resize}#ckimgrsz i.lm,#ckimgrsz i.rm{cursor:ew-resize}body.dragging-br,body.dragging-br *,body.dragging-tl,body.dragging-tl *{cursor:nwse-resize!important}body.dragging-bm,body.dragging-bm *,body.dragging-tm,body.dragging-tm *{cursor:ns-resize!important}body.dragging-bl,body.dragging-bl *,body.dragging-tr,body.dragging-tr *{cursor:nesw-resize!important}body.dragging-lm,body.dragging-lm *,body.dragging-rm,body.dragging-rm *{cursor:ew-resize!important}');
	}

	/**
  * Initializes the plugin
  */
	CKEDITOR.plugins.add('ae_dragresize', {
		onLoad: function onLoad() {
			if (!enablePlugin) {
				return;
			}
		},
		init: function init(editor) {
			if (!enablePlugin) {
				return;
			}

			editor.once('contentDom', function (_evt) {
				_init(editor);
			});
		}
	});

	function _init(editor) {
		var window = editor.window.$;

		var document = editor.document.$;

		if (isFirefox) {
			// Disable the native image resizing
			document.execCommand('enableObjectResizing', false, false);
		}

		var snapToSize = typeof IMAGE_SNAP_TO_SIZE === 'undefined' ? null : IMAGE_SNAP_TO_SIZE;

		editor.config.imageScaleResize = editor.config.imageScaleResize || 'both';

		var resizer = new Resizer(editor, {
			imageScaleResize: editor.config.imageScaleResize,
			snapToSize: snapToSize
		});

		var mouseDownListener = function mouseDownListener(e) {
			if (resizer.isHandle(e.target)) {
				resizer.initDrag(e);
			}
		};

		document.addEventListener('mousedown', mouseDownListener, false);

		function selectionChange() {
			var selection = editor.getSelection();

			if (!selection) return;
			// If an element is selected and that element is an IMG
			if (selection.getType() !== CKEDITOR.SELECTION_NONE && selection.getStartElement().is('img')) {
				// And we're not right or middle clicking on the image
				if (!window.event || !window.event.button || window.event.button === 0) {
					resizer.show(selection.getStartElement().$);
				}
			} else {
				resizer.hide();
			}
		}

		editor.on('selectionChange', selectionChange);

		editor.on('getData', function (e) {
			var html = e.data.dataValue || '';
			html = html.replace(/<div id="ckimgrsz"([\s\S]*?)<\/div>/i, '');
			html = html.replace(/\b(ckimgrsz)\b/g, '');
			e.data.dataValue = html;
		});

		editor.on('beforeUndoImage', function () {
			// Remove the handles before undo images are saved
			resizer.hide();
		});

		editor.on('afterUndoImage', function () {
			// Restore the handles after undo images are saved
			selectionChange();
		});

		editor.on('blur', function () {
			// Remove the handles when editor loses focus
			resizer.hide();
		});

		editor.on('beforeModeUnload', function self() {
			editor.removeListener('beforeModeUnload', self);
			resizer.hide();
		});

		editor.on('destroy', function () {
			var resizeElement = document.getElementById('ckimgrsz');

			if (resizeElement) {
				resizeElement.remove();
			}

			if (isFirefox) {
				document.execCommand('enableObjectResizing', false, true);
			}

			document.removeEventListener('mousedown', mouseDownListener);
		});

		// Update the selection when the browser window is resized
		var resizeTimeout = void 0;
		editor.window.on('resize', function () {
			// Cancel any resize waiting to happen
			clearTimeout(resizeTimeout);
			// Delay resize to "debounce"
			resizeTimeout = setTimeout(selectionChange, 50);
		});
	}

	function Resizer(editor, cfg) {
		this.editor = editor;
		this.window = editor.window.$;
		this.document = editor.document.$;
		this.cfg = cfg || {};
		this.init();
	}

	Resizer.prototype = {
		init: function init() {
			var instance = this;

			var container = this.container = this.document.createElement('div');

			container.id = 'ckimgrsz';
			this.preview = this.document.createElement('span');
			container.appendChild(this.preview);

			var handles = this.handles = {};

			IMAGE_HANDLES[this.cfg.imageScaleResize].forEach(function (handleName) {
				handles[handleName] = instance.handles[handleName] = instance.createHandle(handleName);
			});

			for (var n in handles) {
				if (handles.hasOwnProperty(n)) {
					container.appendChild(handles[n]);
				}
			}
		},
		createHandle: function createHandle(name) {
			var el = this.document.createElement('i');
			el.classList.add(name);
			return el;
		},
		isHandle: function isHandle(el) {
			var handles = this.handles;
			for (var n in handles) {
				if (handles[n] === el) {
					return true;
				}
			}
			return false;
		},
		show: function show(el) {
			var uiNode = this.editor.config.uiNode;

			var scrollTop = uiNode ? uiNode.scrollTop : 0;

			this.el = el;
			if (this.cfg.snapToSize) {
				this.otherImages = toArray(this.document.getElementsByTagName('img'));
				this.otherImages.splice(this.otherImages.indexOf(el), 1);
			}
			var box = this.box = getBoundingBox(this.window, el);
			positionElement(this.container, box.left, box.top + scrollTop);

			uiNode = uiNode || document.body;

			uiNode.appendChild(this.container);

			this.el.classList.add('ckimgrsz');
			this.showHandles();
		},
		hide: function hide() {
			// Remove class from all img.ckimgrsz
			var elements = this.document.getElementsByClassName('ckimgrsz');
			for (var i = 0; i < elements.length; ++i) {
				elements[i].classList.remove('ckimgrsz');
			}
			this.hideHandles();
			if (this.container.parentNode) {
				this.container.parentNode.removeChild(this.container);
			}
		},
		initDrag: function initDrag(e) {
			if (e.button !== 0) {
				// right-click or middle-click
				return;
			}
			var resizer = this;
			var drag = new DragEvent(this.window, this.document);
			drag.onStart = function () {
				resizer.showPreview();
				resizer.isDragging = true;
				resizer.editor.getSelection().lock();
			};
			drag.onDrag = function () {
				resizer.calculateSize(this);
				resizer.updatePreview();
				var box = resizer.previewBox;
				resizer.updateHandles(box, box.left, box.top);
			};
			drag.onRelease = function () {
				resizer.isDragging = false;
				resizer.hidePreview();
				resizer.hide();
				resizer.editor.getSelection().unlock();
				// Save an undo snapshot before the image is permanently changed
				resizer.editor.fire('saveSnapshot');
			};
			drag.onComplete = function () {
				resizer.resizeComplete();
				// Save another snapshot after the image is changed
				resizer.editor.fire('saveSnapshot');
			};
			drag.start(e);
		},
		updateHandles: function updateHandles(box, left, top) {
			left = left || 0;
			top = top || 0;
			var handles = this.handles;

			for (var handle in handles) {
				if (handles.hasOwnProperty(handle)) {
					POSITION_ELEMENT_FN[handle](handles[handle], left, top, box);
				}
			}
		},
		showHandles: function showHandles() {
			var handles = this.handles;
			this.updateHandles(this.box);
			for (var n in handles) {
				if (handles.hasOwnProperty(n)) {
					handles[n].style.display = 'block';
				}
			}
		},
		hideHandles: function hideHandles() {
			var handles = this.handles;
			for (var n in handles) {
				if (handles.hasOwnProperty(n)) {
					handles[n].style.display = 'none';
				}
			}
		},
		showPreview: function showPreview() {
			this.preview.style.backgroundImage = 'url("' + this.el.src + '")';
			this.calculateSize();
			this.updatePreview();
			this.preview.style.display = 'block';
		},
		updatePreview: function updatePreview() {
			var box = this.previewBox;
			positionElement(this.preview, box.left, box.top);
			this.preview.style.width = this.previewBox.width + 'px';
			this.preview.style.height = this.previewBox.height + 'px';
		},
		hidePreview: function hidePreview() {
			var box = getBoundingBox(this.window, this.preview);
			this.result = {
				width: box.width,
				height: box.height
			};
			this.preview.style.display = 'none';
		},
		calculateSize: function calculateSize(data) {
			var box = this.previewBox = {
				top: 0,
				left: 0,
				width: this.box.width,
				height: this.box.height
			};

			if (!data) return;

			var attr = data.target.className;

			if (~attr.indexOf('r')) {
				box.width = Math.max(32, this.box.width + data.delta.x);
			}
			if (~attr.indexOf('b')) {
				box.height = Math.max(32, this.box.height + data.delta.y);
			}
			if (~attr.indexOf('l')) {
				box.width = Math.max(32, this.box.width - data.delta.x);
			}
			if (~attr.indexOf('t')) {
				box.height = Math.max(32, this.box.height - data.delta.y);
			}
			// if dragging corner, enforce aspect ratio (unless shift key is being held)
			if (attr.indexOf('m') < 0 && !data.keys.shift) {
				var ratio = this.box.width / this.box.height;
				if (box.width / box.height > ratio) {
					box.height = Math.round(box.width / ratio);
				} else {
					box.width = Math.round(box.height * ratio);
				}
			}

			var snapToSize = this.cfg.snapToSize;

			if (snapToSize) {
				var others = this.otherImages;
				for (var i = 0; i < others.length; i++) {
					var other = getBoundingBox(this.window, others[i]);
					if (Math.abs(box.width - other.width) <= snapToSize && Math.abs(box.height - other.height) <= snapToSize) {
						box.width = other.width;
						box.height = other.height;
						break;
					}
				}
			}

			// recalculate left or top position
			if (~attr.indexOf('l')) {
				box.left = this.box.width - box.width;
			}
			if (~attr.indexOf('t')) {
				box.top = this.box.height - box.height;
			}
		},
		resizeComplete: function resizeComplete() {
			resizeElement.call(this, this.el, this.result.width, this.result.height);
		}
	};

	function DragEvent(window, document) {
		this.window = window;
		this.document = document;
		this.events = {
			mousemove: bind(this.mousemove, this),
			keydown: bind(this.keydown, this),
			mouseup: bind(this.mouseup, this)
		};
	}

	DragEvent.prototype = {
		start: function start(e) {
			e.preventDefault();
			e.stopPropagation();
			this.target = e.target;
			this.attr = e.target.className;
			this.startPos = {
				x: e.clientX,
				y: e.clientY
			};
			this.update(e);
			var events = this.events;
			this.document.addEventListener('mousemove', events.mousemove, false);
			this.document.addEventListener('keydown', events.keydown, false);
			this.document.addEventListener('mouseup', events.mouseup, false);
			this.document.body.classList.add('dragging-' + this.attr);
			this.onStart && this.onStart();
		},
		update: function update(e) {
			this.currentPos = {
				x: e.clientX,
				y: e.clientY
			};
			this.delta = {
				x: e.clientX - this.startPos.x,
				y: e.clientY - this.startPos.y
			};
			this.keys = {
				shift: e.shiftKey,
				ctrl: e.ctrlKey,
				alt: e.altKey
			};
		},
		mousemove: function mousemove(e) {
			this.update(e);
			this.onDrag && this.onDrag();
			if (e.which === 0) {
				// mouse button released outside window; mouseup wasn't fired (Chrome)
				this.mouseup(e);
			}
		},
		keydown: function keydown(e) {
			// escape key cancels dragging
			if (e.keyCode === 27) {
				this.release();
			}
		},
		mouseup: function mouseup(e) {
			this.update(e);
			this.release();
			this.onComplete && this.onComplete();
		},
		release: function release() {
			this.document.body.classList.remove('dragging-' + this.attr);
			var events = this.events;
			this.document.removeEventListener('mousemove', events.mousemove, false);
			this.document.removeEventListener('keydown', events.keydown, false);
			this.document.removeEventListener('mouseup', events.mouseup, false);
			this.onRelease && this.onRelease();
		}
	};

	// helper functions
	function toArray(obj) {
		var len = obj.length;

		var arr = new Array(len);
		for (var i = 0; i < len; i++) {
			arr[i] = obj[i];
		}
		return arr;
	}

	function bind(fn, ctx) {
		if (fn.bind) {
			return fn.bind(ctx);
		}
		return function () {
			for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
				args[_key] = arguments[_key];
			}

			fn.apply(ctx, args);
		};
	}

	function positionElement(el, left, top) {
		el.style.left = String(left) + 'px';
		el.style.top = String(top) + 'px';
	}

	function resizeElement(el, width, height) {
		var imageScaleResize = this.editor.config.imageScaleResize;
		if (imageScaleResize === 'both') {
			el.style.width = String(width) + 'px';
			el.style.height = String(height) + 'px';
		} else if (imageScaleResize === 'width' || imageScaleResize === 'scale') {
			el.style.height = 'auto';
			el.style.width = String(width) + 'px';
		} else if (imageScaleResize === 'height') {
			el.style.height = String(height) + 'px';
			el.style.width = 'auto';
		}
	}

	function getBoundingBox(window, el) {
		var rect = el.getBoundingClientRect();
		return {
			left: rect.left + window.pageXOffset,
			top: rect.top + window.pageYOffset,
			width: rect.width,
			height: rect.height
		};
	}
})();

/***/ }),

/***/ "./src/plugins/dragresize_ie.js":
/*!**************************************!*\
  !*** ./src/plugins/dragresize_ie.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * CKEditor plugin: Image2
 * - Show gripper to resize images on IE
 */
(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_dragresize_ie')) {
		return;
	}

	var alignmentsObj = {
		center: 1,
		left: 0,
		right: 2
	};

	/*
  * Set cursor css depend on imageScaleResize config
  **/

	var cursor = {
		both: 'nwse-resize',
		height: 'ns-resize',
		scale: 'nwse-resize',
		width: 'ew-resize'
	};

	var regexPercent = /^\s*(\d+%)\s*$/i;

	var template = '<img alt="" src="" />';

	CKEDITOR.plugins.add('ae_dragresize_ie', {
		hidpi: true,

		icons: 'image',

		init: function init(editor) {
			var image = widgetDef(editor);

			// Register the widget.
			editor.widgets.add('image', image);
		},

		onLoad: function onLoad() {
			CKEDITOR.addCss('.cke_image_resizer_nwse-resize{' + 'cursor: nwse-resize;' + '}' + '.cke_image_resizer_ns-resize{' + 'cursor: ns-resize;' + '}' + '.cke_image_resizer_nwse-resize{' + 'cursor: nwse-resize;' + '}' + '.cke_image_resizer_ew-resize{' + 'cursor: ew-resize;' + '}' + '.cke_image_nocaption{' +
			// This is to remove unwanted space so resize
			// wrapper is displayed property.
			'line-height:0' + '}' + '.cke_image_resizer{' + 'display:none;' + 'position:absolute;' + 'width:10px;' + 'height:10px;' + 'bottom:-5px;' + 'right:-5px;' + 'background:#000;' + 'outline:1px solid #fff;' +
			// Prevent drag handler from being misplaced (#11207).
			'line-height:0;' + 'cursor:nwse-resize;' + '}' + '.cke_image_resizer_wrapper{' + 'position:relative;' + 'display:inline-block;' + 'line-height:0;' + '}' + '.cke_widget_wrapper:hover .cke_image_resizer,' + '.cke_image_resizer.cke_image_resizing{' + 'display:block' + '}');
		},

		requires: 'widget'
	});

	// Widget states (forms) depending on alignment and configuration.
	//
	// Non-captioned widget (inline styles)
	// 		┌──────┬───────────────────────────────┬─────────────────────────────┐
	// 		│Align │Internal form                  │Data                         │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│none  │<wrapper>                      │<img />                      │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│left  │<wrapper style=”float:left”>   │<img style=”float:left” />   │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│center│<wrapper>                      │<p style=”text-align:center”>│
	// 		│      │ <p style=”text-align:center”> │  <img />                    │
	// 		│      │   <img />                     │</p>                         │
	// 		│      │ </p>                          │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│right │<wrapper style=”float:right”>  │<img style=”float:right” />  │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		└──────┴───────────────────────────────┴─────────────────────────────┘
	//
	// Non-captioned widget (config.image2_alignClasses defined)
	// 		┌──────┬───────────────────────────────┬─────────────────────────────┐
	// 		│Align │Internal form                  │Data                         │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│none  │<wrapper>                      │<img />                      │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│left  │<wrapper class=”left”>         │<img class=”left” />         │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│center│<wrapper>                      │<p class=”center”>           │
	// 		│      │ <p class=”center”>            │ <img />                     │
	// 		│      │   <img />                     │</p>                         │
	// 		│      │ </p>                          │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│right │<wrapper class=”right”>        │<img class=”right” />        │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		└──────┴───────────────────────────────┴─────────────────────────────┘
	//
	// Captioned widget (inline styles)
	// 		┌──────┬────────────────────────────────────────┬────────────────────────────────────────┐
	// 		│Align │Internal form                           │Data                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│none  │<wrapper>                               │<figure />                              │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│left  │<wrapper style=”float:left”>            │<figure style=”float:left” />           │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│center│<wrapper style=”text-align:center”>     │<div style=”text-align:center”>         │
	// 		│      │ <figure style=”display:inline-block” />│ <figure style=”display:inline-block” />│
	// 		│      │</wrapper>                              │</p>                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│right │<wrapper style=”float:right”>           │<figure style=”float:right” />          │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		└──────┴────────────────────────────────────────┴────────────────────────────────────────┘
	//
	// Captioned widget (config.image2_alignClasses defined)
	// 		┌──────┬────────────────────────────────────────┬────────────────────────────────────────┐
	// 		│Align │Internal form                           │Data                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│none  │<wrapper>                               │<figure />                              │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│left  │<wrapper class=”left”>                  │<figure class=”left” />                 │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│center│<wrapper class=”center”>                │<div class=”center”>                    │
	// 		│      │ <figure />                             │ <figure />                             │
	// 		│      │</wrapper>                              │</p>                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│right │<wrapper class=”right”>                 │<figure class=”right” />                │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		└──────┴────────────────────────────────────────┴────────────────────────────────────────┘
	//
	// @param {CKEDITOR.editor}
	// @returns {Object}
	function widgetDef(editor) {
		editor.config.imageScaleResize = editor.config.imageScaleResize || 'both';

		editor.on('imageAdd', function (imageData) {
			editor.widgets.initOn(imageData.data.el, 'image');
		});

		var alignClasses = editor.config.image2_alignClasses;

		var captionedClass = editor.config.image2_captionedClass;

		return {
			init: function init() {
				var helpers = CKEDITOR.plugins.image2;

				var image = this.parts.image;

				var data = {
					alt: image.getAttribute('alt') || '',
					hasCaption: !!this.parts.caption,
					height: image.getAttribute('height') || '',
					// Lock ratio is on by default (#10833).
					lock: this.ready ? helpers.checkHasNaturalRatio(image) : true,
					src: image.getAttribute('src'),
					width: image.getAttribute('width') || ''
				};

				// If we used 'a' in widget#parts definition, it could happen that
				// selected element is a child of widget.parts#caption. Since there's no clever
				// way to solve it with CSS selectors, it's done like that. (#11783).
				var link = image.getAscendant('a');

				if (link && this.wrapper.contains(link)) {
					this.parts.link = link;
				}

				// Depending on configuration, read style/class from element and
				// then remove it. Removed style/class will be set on wrapper in #data listener.
				// Note: Center alignment is detected during upcast, so only left/right cases
				// are checked below.
				if (!data.align) {
					var alignElement = data.hasCaption ? this.element : image;

					// Read the initial left/right alignment from the class set on element.
					if (alignClasses) {
						if (alignElement.hasClass(alignClasses[0])) {
							data.align = 'left';
						} else if (alignElement.hasClass(alignClasses[2])) {
							data.align = 'right';
						}

						if (data.align) {
							alignElement.removeClass(alignClasses[alignmentsObj[data.align]]);
						} else {
							data.align = 'none';
						}
					}
					// Read initial float style from figure/image and then remove it.
					else {
							data.align = alignElement.getStyle('float') || 'none';
							alignElement.removeStyle('float');
						}
				}

				// Get rid of extra vertical space when there's no caption.
				// It will improve the look of the resizer.
				this.wrapper[(data.hasCaption ? 'remove' : 'add') + 'Class']('cke_image_nocaption');

				this.setData(data);

				if (editor.config.image2_disableResizer !== true) {
					setupResizer(this);
				}
			},

			// Overrides default method to handle internal mutability of Image2.
			// @see CKEDITOR.plugins.widget#addClass
			addClass: function addClass(className) {
				getStyleableElement(this).addClass(className);
			},

			allowedContent: getWidgetAllowedContent(editor),

			// This widget converts style-driven dimensions to attributes.
			contentTransformations: [['img[width]: sizeToAttribute']],

			data: function data() {
				var features = this.features;

				// Image can't be captioned when figcaption is disallowed (#11004).
				if (this.data.hasCaption && !editor.filter.checkFeature(features.caption)) {
					this.data.hasCaption = false;
				}

				// Image can't be aligned when floating is disallowed (#11004).
				if (this.data.align != 'none' && !editor.filter.checkFeature(features.align)) {
					this.data.align = 'none';
				}

				// Update widget.parts.link since it will not auto-update unless widget
				// is destroyed and re-inited.
				if (!this.data.link) {
					if (this.parts.link) {
						delete this.parts.link;
					}
				} else {
					if (!this.parts.link) {
						this.parts.link = this.parts.image.getParent();
					}
				}

				this.parts.image.setAttributes({
					alt: this.data.alt,

					contenteditable: this.parts.image.getAttribute('contenteditable') ? this.parts.image.getAttribute('contenteditable') : true,

					// This internal is required by the editor.
					'data-cke-saved-src': this.data.src,

					src: this.data.src
				});

				// If shifting non-captioned -> captioned, remove classes
				// related to styles from <img/>.
				if (this.oldData && !this.oldData.hasCaption && this.data.hasCaption) {
					for (var c in this.data.classes) {
						if (this.data.classes.hasOwnProperty(c)) {
							this.parts.image.removeClass(c);
						}
					}
				}

				// Set dimensions of the image according to gathered data.
				// Do it only when the attributes are allowed (#11004).
				if (editor.filter.checkFeature(features.dimension)) {
					setDimensions(this);
				}

				// Cache current data.
				this.oldData = CKEDITOR.tools.extend({}, this.data);
			},

			downcast: downcastWidgetElement(editor),

			draggable: false,

			// This widget has an editable caption.
			editables: {
				caption: {
					selector: 'figcaption',
					allowedContent: 'br em strong sub sup u s; a[!href,target]'
				}
			},

			features: getWidgetFeatures(editor),

			// Overrides default method to handle internal mutability of Image2.
			// @see CKEDITOR.plugins.widget#getClasses
			getClasses: function () {
				var classRegex = new RegExp('^(' + [].concat(captionedClass, alignClasses).join('|') + ')$');

				return function () {
					var classes = this.repository.parseElementClasses(getStyleableElement(this).getAttribute('class'));

					// Neither config.image2_captionedClass nor config.image2_alignClasses
					// do not belong to style classes.
					for (var c in classes) {
						if (classRegex.test(c)) {
							delete classes[c];
						}
					}

					return classes;
				};
			}(),

			getLabel: function getLabel() {
				var label = (this.data.alt || '') + ' ' + this.pathName;

				return label;
			},

			// Overrides default method to handle internal mutability of Image2.
			// @see CKEDITOR.plugins.widget#hasClass
			hasClass: function hasClass(className) {
				return getStyleableElement(this).hasClass(className);
			},

			parts: {
				caption: 'figcaption',
				image: 'img'
			},

			// Overrides default method to handle internal mutability of Image2.
			// @see CKEDITOR.plugins.widget#removeClass
			removeClass: function removeClass(className) {
				getStyleableElement(this).removeClass(className);
			},

			requiredContent: 'img[src,alt]',

			styleableElements: 'img figure',

			// Template of the widget: plain image.
			template: template,

			upcast: upcastWidgetElement(editor)
		};
	}

	/**
  * A set of Enhanced Image (image2) plugin helpers.
  *
  * @class
  * @singleton
  */
	CKEDITOR.plugins.image2 = {
		/**
   * Checks whether the current image ratio matches the natural one
   * by comparing dimensions.
   *
   * @param {CKEDITOR.dom.element} image
   * @return {Boolean}
   */
		checkHasNaturalRatio: function checkHasNaturalRatio(image) {
			var $ = image.$;

			var natural = this.getNatural(image);

			// The reason for two alternative comparisons is that the rounding can come from
			// both dimensions, e.g. there are two cases:
			// 	1. height is computed as a rounded relation of the real height and the value of width,
			//	2. width is computed as a rounded relation of the real width and the value of heigh.
			return Math.round($.clientWidth / natural.width * natural.height) == $.clientHeight || Math.round($.clientHeight / natural.height * natural.width) == $.clientWidth;
		},

		/**
   * Returns natural dimensions of the image. For modern browsers
   * it uses natural(Width|Height). For old ones (IE8) it creates
   * a new image and reads the dimensions.
   *
   * @param {CKEDITOR.dom.element} image
   * @return {Object}
   */
		getNatural: function getNatural(image) {
			var dimensions = void 0;

			if (image.$.naturalWidth) {
				dimensions = {
					height: image.$.naturalHeigh,
					width: image.$.naturalWidth
				};
			} else {
				var img = new Image();

				img.src = image.getAttribute('src');

				dimensions = {
					height: img.heigh,
					width: img.width
				};
			}

			return dimensions;
		}
	};

	// Returns a function that creates widgets from all <img> and
	// <figure class="{config.image2_captionedClass}"> elements.
	//
	// @param {CKEDITOR.editor} editor
	// @returns {Function}
	function upcastWidgetElement(editor) {
		var isCenterWrapper = centerWrapperChecker(editor);

		var captionedClass = editor.config.image2_captionedClass;

		// @param {CKEDITOR.htmlParser.element} el
		// @param {Object} data
		return function (el, data) {
			var dimensions = {
				height: 1,
				width: 1
			};

			var name = el.name;

			var image = void 0;

			// #11110 Don't initialize on pasted fake objects.
			if (el.attributes['data-cke-realelement']) {
				return;
			}

			// If a center wrapper is found, there are 3 possible cases:
			//
			// 1. <div style="text-align:center"><figure>...</figure></div>.
			//    In this case centering is done with a class set on widget.wrapper.
			//    Simply replace centering wrapper with figure (it's no longer necessary).
			//
			// 2. <p style="text-align:center"><img/></p>.
			//    Nothing to do here: <p> remains for styling purposes.
			//
			// 3. <div style="text-align:center"><img/></div>.
			//    Nothing to do here (2.) but that case is only possible in enterMode different
			//    than ENTER_P.
			if (isCenterWrapper(el)) {
				if (name == 'div') {
					var figure = el.getFirst('figure');

					// Case #1.
					if (figure) {
						el.replaceWith(figure);
						el = figure;
					}
				}
				// Cases #2 and #3 (handled transparently)

				// If there's a centering wrapper, save it in data.
				data.align = 'center';

				// Image can be wrapped in link <a><img/></a>.
				image = el.getFirst('img') || el.getFirst('a').getFirst('img');
			}

			// No center wrapper has been found.
			else if (name == 'figure' && el.hasClass(captionedClass)) {
					image = el.getFirst('img') || el.getFirst('a').getFirst('img');

					// Upcast linked image like <a><img/></a>.
				} else if (isLinkedOrStandaloneImage(el)) {
					image = el.name == 'a' ? el.children[0] : el;
				}

			if (!image) {
				return;
			}

			// If there's an image, then cool, we got a widget.
			// Now just remove dimension attributes expressed with %.
			for (var d in dimensions) {
				if (dimensions.hasOwnProperty(d)) {
					var dimension = image.attributes[d];

					if (dimension && dimension.match(regexPercent)) {
						delete image.attributes[d];
					}
				}
			}

			return el;
		};
	}

	// Returns a function which transforms the widget to the external format
	// according to the current configuration.
	//
	// @param {CKEDITOR.editor}
	function downcastWidgetElement(editor) {
		var alignClasses = editor.config.image2_alignClasses;

		// @param {CKEDITOR.htmlParser.element} el
		return function (el) {
			// In case of <a><img/></a>, <img/> is the element to hold
			// inline styles or classes (image2_alignClasses).
			var attrsHolder = el.name == 'a' ? el.getFirst() : el;

			delete attrsHolder.attributes.contenteditable;

			var attrs = attrsHolder.attributes;

			var align = this.data.align;

			// De-wrap the image from resize handle wrapper.
			// Only block widgets have one.
			if (!this.inline) {
				var resizeWrapper = el.getFirst('span');

				if (resizeWrapper) {
					resizeWrapper.replaceWith(resizeWrapper.getFirst({
						a: 1,
						img: 1
					}));
				}
			}

			if (align && align != 'none') {
				var styles = CKEDITOR.tools.parseCssText(attrs.style || '');

				// When the widget is captioned (<figure>) and internally centering is done
				// with widget's wrapper style/class, in the external data representation,
				// <figure> must be wrapped with an element holding an style/class:
				//
				// 	<div style="text-align:center">
				// 		<figure class="image" style="display:inline-block">...</figure>
				// 	</div>
				// or
				// 	<div class="some-center-class">
				// 		<figure class="image">...</figure>
				// 	</div>
				//
				if (align == 'center' && el.name == 'figure') {
					el = el.wrapWith(new CKEDITOR.htmlParser.element('div', alignClasses ? {
						class: alignClasses[1]
					} : {
						style: 'text-align:center'
					}));
				}

				// If left/right, add float style to the downcasted element.
				else if (align in {
						left: 1,
						right: 1
					}) {
						if (alignClasses) {
							attrsHolder.addClass(alignClasses[alignmentsObj[align]]);
						} else {
							styles['float'] = align;
						}
					}

				// Update element styles.
				if (!alignClasses && !CKEDITOR.tools.isEmpty(styles)) {
					attrs.style = CKEDITOR.tools.writeCssText(styles);
				}
			}

			return el;
		};
	}

	// Returns a function that checks if an element is a centering wrapper.
	//
	// @param {CKEDITOR.editor} editor
	// @returns {Function}
	function centerWrapperChecker(editor) {
		var captionedClass = editor.config.image2_captionedClass;

		var alignClasses = editor.config.image2_alignClasses;

		var validChildren = {
			a: 1,
			figure: 1,
			img: 1
		};

		return function (el) {
			// Wrapper must be either <div> or <p>.
			if (!(el.name in {
				div: 1,
				p: 1
			})) {
				return false;
			}

			var children = el.children;

			// Centering wrapper can have only one child.
			if (children.length !== 1) {
				return false;
			}

			var child = children[0];

			// Only <figure> or <img /> can be first (only) child of centering wrapper,
			// regardless of its type.
			if (!(child.name in validChildren)) {
				return false;
			}

			// If centering wrapper is <p>, only <img /> can be the child.
			//   <p style="text-align:center"><img /></p>
			if (el.name == 'p') {
				if (!isLinkedOrStandaloneImage(child)) {
					return false;
				}
			}
			// Centering <div> can hold <img/> or <figure>, depending on enterMode.
			else {
					// If a <figure> is the first (only) child, it must have a class.
					//   <div style="text-align:center"><figure>...</figure><div>
					if (child.name == 'figure') {
						if (!child.hasClass(captionedClass)) {
							return false;
						}
					} else {
						// Centering <div> can hold <img/> or <a><img/></a> only when enterMode
						// is ENTER_(BR|DIV).
						//   <div style="text-align:center"><img /></div>
						//   <div style="text-align:center"><a><img /></a></div>
						if (editor.enterMode == CKEDITOR.ENTER_P) {
							return false;
						}

						// Regardless of enterMode, a child which is not <figure> must be
						// either <img/> or <a><img/></a>.
						if (!isLinkedOrStandaloneImage(child)) {
							return false;
						}
					}
				}

			// Centering wrapper got to be... centering. If image2_alignClasses are defined,
			// check for centering class. Otherwise, check the style.
			if (alignClasses ? el.hasClass(alignClasses[1]) : CKEDITOR.tools.parseCssText(el.attributes.style || '', true)['text-align'] == 'center') {
				return true;
			}

			return false;
		};
	}

	// Checks whether element is <img/> or <a><img/></a>.
	//
	// @param {CKEDITOR.htmlParser.element}
	function isLinkedOrStandaloneImage(el) {
		if (el.name == 'img') {
			return true;
		} else if (el.name == 'a') {
			return el.children.length == 1 && el.getFirst('img');
		}

		return false;
	}

	// Sets width and height of the widget image according to current widget data.
	//
	// @param {CKEDITOR.plugins.widget} widget
	function setDimensions(widget) {
		var data = widget.data;

		var dimensions = {
			height: data.height,
			width: data.width
		};

		var image = widget.parts.image;

		for (var d in dimensions) {
			if (dimensions[d]) {
				image.setAttribute(d, dimensions[d]);
			} else {
				image.removeAttribute(d);
			}
		}
	}

	// Defines all features related to drag-driven image resizing.
	//
	// @param {CKEDITOR.plugins.widget} widget
	function setupResizer(widget) {
		var editor = widget.editor;

		var editable = editor.editable();

		var doc = editor.document;

		// Store the resizer in a widget for testing (#11004).
		var resizer = widget.resizer = doc.createElement('span');

		resizer.addClass('cke_image_resizer');
		resizer.addClass('cke_image_resizer_' + cursor[editor.config.imageScaleResize]);
		resizer.append(new CKEDITOR.dom.text('\u200B', doc));

		// Inline widgets don't need a resizer wrapper as an image spans the entire widget.
		if (!widget.inline) {
			var imageOrLink = widget.parts.link || widget.parts.image;

			var oldResizeWrapper = imageOrLink.getParent();

			var resizeWrapper = doc.createElement('span');

			resizeWrapper.addClass('cke_image_resizer_wrapper');
			resizeWrapper.append(imageOrLink);
			resizeWrapper.append(resizer);
			widget.element.append(resizeWrapper, true);

			// Remove the old wrapper which could came from e.g. pasted HTML
			// and which could be corrupted (e.g. resizer span has been lost).
			if (oldResizeWrapper.is('span')) {
				oldResizeWrapper.remove();
			}
		} else {
			widget.wrapper.append(resizer);
		}

		// Calculate values of size variables and mouse offsets.
		resizer.on('mousedown', function (evt) {
			var image = widget.parts.image;

			// "factor" can be either 1 or -1. I.e.: For right-aligned images, we need to
			// subtract the difference to get proper width, etc. Without "factor",
			// resizer starts working the opposite way.
			var factor = widget.data.align == 'right' ? -1 : 1;

			// The x-coordinate of the mouse relative to the screen
			// when button gets pressed.
			var startX = evt.data.$.screenX;

			var startY = evt.data.$.screenY;

			// The initial dimensions and aspect ratio of the image.
			var startWidth = image.$.clientWidth;

			var startHeight = image.$.clientHeight;

			var listeners = [];

			// A class applied to editable during resizing.
			var cursorClass = 'cke_image_s' + (!~factor ? 'w' : 'e');

			var nativeEvt = void 0;
			var newWidth = void 0;
			var newHeight = void 0;
			var updateData = void 0;

			var moveDiffX = void 0;
			var moveDiffY = void 0;

			// Save the undo snapshot first: before resizing.
			editor.fire('saveSnapshot');

			// Mousemove listeners are removed on mouseup.
			attachToDocuments('mousemove', onMouseMove, listeners);

			// Clean up the mousemove listener. Update widget data if valid.
			attachToDocuments('mouseup', onMouseUp, listeners);

			// The entire editable will have the special cursor while resizing goes on.
			editable.addClass(cursorClass);

			// This is to always keep the resizer element visible while resizing.
			resizer.addClass('cke_image_resizing');

			// Attaches an event to a global document if inline editor.
			// Additionally, if classic (`iframe`-based) editor, also attaches the same event to `iframe`'s document.
			function attachToDocuments(name, callback, collection) {
				var globalDoc = CKEDITOR.document;

				var listeners = [];

				if (!doc.equals(globalDoc)) {
					listeners.push(globalDoc.on(name, callback));
				}

				listeners.push(doc.on(name, callback));

				if (collection) {
					for (var i = listeners.length; i--;) {
						collection.push(listeners.pop());
					}
				}
			}

			// This is how variables refer to the geometry.
			// Note: x corresponds to moveOffset, this is the position of mouse
			// Note: o corresponds to [startX, startY].
			//
			// 	+--------------+--------------+
			// 	|              |              |
			// 	|      I       |      II      |
			// 	|              |              |
			// 	+------------- o -------------+ _ _ _
			// 	|              |              |      ^

			// 	|      VI      |     III      |      | moveDiffY
			// 	|              |         x _ _ _ _ _ v
			// 	+--------------+---------|----+
			// 	               |         |
			// 	                <------->
			// 	                moveDiffX
			function onMouseMove(evt) {
				var imageScaleResize = editor.config.imageScaleResize;

				nativeEvt = evt.data.$;

				// This is how far the mouse is from the point the button was pressed.
				moveDiffX = nativeEvt.screenX - startX;
				moveDiffY = startY - nativeEvt.screenY;

				if (imageScaleResize === 'width' || imageScaleResize === 'both' || imageScaleResize === 'scale') {
					newWidth = startWidth + factor * moveDiffX;
				}

				if (imageScaleResize === 'height' || imageScaleResize === 'both') {
					newHeight = startHeight - moveDiffY;
				}

				if (imageScaleResize === 'scale') {
					newHeight = 'auto';
				}

				newWidth = newWidth || startWidth;
				newHeight = newHeight || startHeight;

				// Don't update attributes if less than 10.
				// This is to prevent images to visually disappear.
				if (newWidth >= 15 && (newHeight >= 15 || newHeight === 'auto')) {
					image.$.style.width = newWidth + 'px';
					image.$.style.height = newHeight + 'px';

					updateData = true;
				} else {
					updateData = false;
				}
			}

			function onMouseUp() {
				var l = void 0;

				while (l = listeners.pop()) {
					l.removeListener();
				}

				// Restore default cursor by removing special class.
				editable.removeClass(cursorClass);

				// This is to bring back the regular behaviour of the resizer.
				resizer.removeClass('cke_image_resizing');

				if (updateData) {
					widget.setData({
						height: newHeight,
						width: newWidth
					});

					// Save another undo snapshot: after resizing.
					editor.fire('saveSnapshot');
				}

				// Don't update data twice or more.
				updateData = false;
			}
		});

		// Change the position of the widget resizer when data changes.
		widget.on('data', function () {
			resizer[widget.data.align == 'right' ? 'addClass' : 'removeClass']('cke_image_resizer_left');
		});

		widget.parts.image.on('click', function () {
			var selection = editor.getSelection();

			if (selection) {
				var element = selection.getStartElement();

				if (element) {
					var widgetElement = element.findOne('img');

					if (widgetElement) {
						var region = element.getClientRect();

						var scrollPosition = new CKEDITOR.dom.window(window).getScrollPosition();
						region.left -= scrollPosition.x;
						region.top += scrollPosition.y;

						region.direction = CKEDITOR.SELECTION_BOTTOM_TO_TOP;

						editor.fire('editorInteraction', {
							nativeEvent: event,
							selectionData: {
								element: widgetElement,
								region: region
							}
						});
					}
				}
			}
		});
	}

	// Returns a set of widget allowedContent rules, depending
	// on configurations like config#image2_alignClasses or
	// config#image2_captionedClass.
	//
	// @param {CKEDITOR.editor}
	// @returns {Object}
	function getWidgetAllowedContent(editor) {
		var rules = {
			figcaption: true,
			figure: {
				classes: '!' + editor.config.image2_captionedClass
			},
			img: {
				attributes: '!src,alt,width,height'
			}
		};

		return rules;
	}

	// Returns a set of widget feature rules, depending
	// on editor configuration. Note that the following may not cover
	// all the possible cases since requiredContent supports a single
	// tag only.
	//
	// @param {CKEDITOR.editor}
	// @returns {Object}
	function getWidgetFeatures(editor) {
		var alignClasses = editor.config.image2_alignClasses;

		var features = {
			align: {
				requiredContent: 'img' + (alignClasses ? '(' + alignClasses[0] + ')' : '{float}')
			},
			caption: {
				requiredContent: 'figcaption'
			},
			dimension: {
				requiredContent: 'img[width,height]'
			}
		};

		return features;
	}

	// Returns element which is styled, considering current
	// state of the widget.
	//
	// @see CKEDITOR.plugins.widget#applyStyle
	// @param {CKEDITOR.plugins.widget} widget
	// @returns {CKEDITOR.dom.element}
	function getStyleableElement(widget) {
		return widget.data.hasCaption ? widget.element : widget.parts.image;
	}
})();

CKEDITOR.config.image2_captionedClass = 'image';

/***/ }),

/***/ "./src/plugins/dragresize_ie11.js":
/*!****************************************!*\
  !*** ./src/plugins/dragresize_ie11.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @license Copyright (c) 2003-2017, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or http://ckeditor.com/license
 */

(function () {
	if (CKEDITOR.plugins.get('ae_dragresize_ie11')) {
		return;
	}

	var template = '<img alt="" src="" />';

	var templateBlock = new CKEDITOR.template('<figure class="{captionedClass}">' + template + '<figcaption>{captionPlaceholder}</figcaption>' + '</figure>');

	var alignmentsObj = { left: 0, center: 1, right: 2 };

	var regexPercent = /^\s*(\d+%)\s*$/i;

	CKEDITOR.plugins.add('ae_dragresize_ie11', {
		requires: 'widget',
		onLoad: function onLoad() {
			CKEDITOR.addCss('.cke_image_nocaption{' +
			// This is to remove unwanted space so resize
			// wrapper is displayed property.
			'line-height:0' + '}' + '.cke_editable.cke_image_ne, .cke_editable.cke_image_ne *{cursor:ne-resize !important}' + '.cke_editable.cke_image_nw, .cke_editable.cke_image_nw *{cursor:nw-resize !important}' + '.cke_editable.cke_image_sw, .cke_editable.cke_image_sw *{cursor:sw-resize !important}' + '.cke_editable.cke_image_se, .cke_editable.cke_image_se *{cursor:se-resize !important}' + '.cke_image_resizer{' + 'display:none;' + 'position:absolute;' + 'width:10px;' + 'height:10px;' + 'background:#000;' + 'outline:1px solid #fff;' +
			// Prevent drag handler from being misplaced (#11207).
			'line-height:0;' + 'cursor:se-resize;' + '}' + '.cke_image_resizer_wrapper{' + 'position:relative;' + 'display:inline-block;' + 'line-height:0;' + '}' +
			// Top-right corner style of the resizer.
			'.cke_image_resizer.cke_image_resizer_ne{' + 'cursor:ne-resize;' + 'left:auto;' + 'right:-5px;' + 'top:-5px;' + '}' +
			// Top-left corner style of the resizer.
			'.cke_image_resizer.cke_image_resizer_nw{' + 'cursor:nw-resize;' + 'left:-5px;' + 'right:auto;' + 'top:-5px;' + '}' +
			// Bottom-right corner style of the resizer.
			'.cke_image_resizer.cke_image_resizer_se{' + 'bottom:-5px;' + 'cursor:se-resize;' + 'left:auto;' + 'right:-5px;' + '}' +
			// Bottom-left corner style of the resizer.
			'.cke_image_resizer.cke_image_resizer_sw{' + 'bottom:-5px;' + 'cursor:sw-resize;' + 'left:-5px;' + 'right:auto;' + '}' + '.cke_widget_wrapper:hover .cke_image_resizer,' + '.cke_image_resizer.cke_image_resizing{' + 'display:block' + '}' +
			// Expand widget wrapper when linked inline image.
			'.cke_widget_wrapper>a{' + 'display:inline-block' + '}');
		},

		init: function init(editor) {
			// Adapts configuration from original image plugin. Should be removed
			// when we'll rename ae_dragresize_ie11 to image.

			var image = widgetDef(editor);

			// Register the widget.
			editor.widgets.add('image', image);

			// Add a listener to handle selection change events and properly detect editor
			// interactions on the widgets without messing with widget native selection
			editor.on('selectionChange', function (_event) {
				var selection = editor.getSelection();

				if (selection) {
					var element = selection.getSelectedElement();

					if (element) {
						var widgetElement = element.findOne('img');

						if (widgetElement) {
							var region = element.getClientRect();

							var scrollPosition = new CKEDITOR.dom.window(window).getScrollPosition();
							region.left -= scrollPosition.x;
							region.top += scrollPosition.y;

							region.direction = CKEDITOR.SELECTION_BOTTOM_TO_TOP;

							editor.fire('editorInteraction', {
								nativeEvent: {},
								selectionData: {
									element: widgetElement,
									region: region
								}
							});
						}
					}
				}
			});
		},

		afterInit: function afterInit(editor) {
			// Integrate with align commands (justify plugin).
			var align = { left: 1, right: 1, center: 1, block: 1 };

			var integrate = alignCommandIntegrator(editor);

			for (var value in align) {
				if (align.hasOwnProperty(value)) {
					integrate(value);
				}
			}
		}
	});

	// Widget states (forms) depending on alignment and configuration.
	//
	// Non-captioned widget (inline styles)
	// 		┌──────┬───────────────────────────────┬─────────────────────────────┐
	// 		│Align │Internal form                  │Data                         │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│none  │<wrapper>                      │<img />                      │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│left  │<wrapper style=”float:left”>   │<img style=”float:left” />   │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│center│<wrapper>                      │<p style=”text-align:center”>│
	// 		│      │ <p style=”text-align:center”> │  <img />                    │
	// 		│      │   <img />                     │</p>                         │
	// 		│      │ </p>                          │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│right │<wrapper style=”float:right”>  │<img style=”float:right” />  │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		└──────┴───────────────────────────────┴─────────────────────────────┘
	//
	// Non-captioned widget (config.ae_dragresize_ie11_alignClasses defined)
	// 		┌──────┬───────────────────────────────┬─────────────────────────────┐
	// 		│Align │Internal form                  │Data                         │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│none  │<wrapper>                      │<img />                      │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│left  │<wrapper class=”left”>         │<img class=”left” />         │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│center│<wrapper>                      │<p class=”center”>           │
	// 		│      │ <p class=”center”>            │ <img />                     │
	// 		│      │   <img />                     │</p>                         │
	// 		│      │ </p>                          │                             │
	// 		│      │</wrapper>                     │                             │
	// 		├──────┼───────────────────────────────┼─────────────────────────────┤
	// 		│right │<wrapper class=”right”>        │<img class=”right” />        │
	// 		│      │ <img />                       │                             │
	// 		│      │</wrapper>                     │                             │
	// 		└──────┴───────────────────────────────┴─────────────────────────────┘
	//
	// Captioned widget (inline styles)
	// 		┌──────┬────────────────────────────────────────┬────────────────────────────────────────┐
	// 		│Align │Internal form                           │Data                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│none  │<wrapper>                               │<figure />                              │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│left  │<wrapper style=”float:left”>            │<figure style=”float:left” />           │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│center│<wrapper style=”text-align:center”>     │<div style=”text-align:center”>         │
	// 		│      │ <figure style=”display:inline-block” />│ <figure style=”display:inline-block” />│
	// 		│      │</wrapper>                              │</p>                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│right │<wrapper style=”float:right”>           │<figure style=”float:right” />          │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		└──────┴────────────────────────────────────────┴────────────────────────────────────────┘
	//
	// Captioned widget (config.ae_dragresize_ie11_alignClasses defined)
	// 		┌──────┬────────────────────────────────────────┬────────────────────────────────────────┐
	// 		│Align │Internal form                           │Data                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│none  │<wrapper>                               │<figure />                              │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│left  │<wrapper class=”left”>                  │<figure class=”left” />                 │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│center│<wrapper class=”center”>                │<div class=”center”>                    │
	// 		│      │ <figure />                             │ <figure />                             │
	// 		│      │</wrapper>                              │</p>                                    │
	// 		├──────┼────────────────────────────────────────┼────────────────────────────────────────┤
	// 		│right │<wrapper class=”right”>                 │<figure class=”right” />                │
	// 		│      │ <figure />                             │                                        │
	// 		│      │</wrapper>                              │                                        │
	// 		└──────┴────────────────────────────────────────┴────────────────────────────────────────┘
	//
	// @param {CKEDITOR.editor}
	// @returns {Object}
	function widgetDef(editor) {
		var alignClasses = editor.config.ae_dragresize_ie11_alignClasses;

		var captionedClass = editor.config.ae_dragresize_ie11_captionedClass;

		function deflate() {
			if (this.deflated) return;

			// Remember whether widget was focused before destroyed.
			if (editor.widgets.focused == this.widget) this.focused = true;

			editor.widgets.destroy(this.widget);

			// Mark widget was destroyed.
			this.deflated = true;
		}

		function inflate() {
			var editable = editor.editable();

			var doc = editor.document;

			// Create a new widget. This widget will be either captioned
			// non-captioned, block or inline according to what is the
			// new state of the widget.
			if (this.deflated) {
				this.widget = editor.widgets.initOn(this.element, 'image', this.widget.data);

				// Once widget was re-created, it may become an inline element without
				// block wrapper (i.e. when unaligned, end not captioned). Let's do some
				// sort of autoparagraphing here (#10853).
				if (this.widget.inline && !new CKEDITOR.dom.elementPath(this.widget.wrapper, editable).block) {
					var block = doc.createElement(editor.activeEnterMode == CKEDITOR.ENTER_P ? 'p' : 'div');
					block.replace(this.widget.wrapper);
					this.widget.wrapper.move(block);
				}

				// The focus must be transferred from the old one (destroyed)
				// to the new one (just created).
				if (this.focused) {
					this.widget.focus();
					delete this.focused;
				}

				delete this.deflated;
			}

			// If now widget was destroyed just update wrapper's alignment.
			// According to the new state.
			else {
					setWrapperAlign(this.widget, alignClasses);
				}
		}

		return {
			allowedContent: getWidgetAllowedContent(editor),

			requiredContent: 'img[src,alt]',

			features: getWidgetFeatures(editor),

			styleableElements: 'img figure',

			// This widget converts style-driven dimensions to attributes.
			contentTransformations: [['img[width]: sizeToAttribute']],

			// This widget has an editable caption.
			editables: {
				caption: {
					selector: 'figcaption',
					allowedContent: 'br em strong sub sup u s; a[!href,target]'
				}
			},

			parts: {
				image: 'img',
				caption: 'figcaption'
				// parts#link defined in widget#init
			},

			// Template of the widget: plain image.
			template: template,

			data: function data() {
				var features = this.features;

				// Image can't be captioned when figcaption is disallowed (#11004).
				if (this.data.hasCaption && !editor.filter.checkFeature(features.caption)) this.data.hasCaption = false;

				// Image can't be aligned when floating is disallowed (#11004).
				if (this.data.align != 'none' && !editor.filter.checkFeature(features.align)) this.data.align = 'none';

				// Convert the internal form of the widget from the old state to the new one.
				this.shiftState({
					widget: this,
					element: this.element,
					oldData: this.oldData,
					newData: this.data,
					deflate: deflate,
					inflate: inflate
				});

				// Update widget.parts.link since it will not auto-update unless widget
				// is destroyed and re-inited.
				if (!this.data.link) {
					if (this.parts.link) delete this.parts.link;
				} else {
					if (!this.parts.link) this.parts.link = this.parts.image.getParent();
				}

				this.parts.image.setAttributes({
					src: this.data.src,

					// This internal is required by the editor.
					'data-cke-saved-src': this.data.src,

					alt: this.data.alt
				});

				// If shifting non-captioned -> captioned, remove classes
				// related to styles from <img/>.
				if (this.oldData && !this.oldData.hasCaption && this.data.hasCaption) {
					for (var c in this.data.classes) {
						if (this.data.classes.hasOwnProperty(c)) {
							this.parts.image.removeClass(c);
						}
					}
				}

				// Set dimensions of the image according to gathered data.
				// Do it only when the attributes are allowed (#11004).
				if (editor.filter.checkFeature(features.dimension)) setDimensions(this);

				// Cache current data.
				this.oldData = CKEDITOR.tools.extend({}, this.data);
			},

			init: function init() {
				var helpers = CKEDITOR.plugins.ae_dragresize_ie11;

				var image = this.parts.image;

				var data = {
					hasCaption: !!this.parts.caption,
					src: image.getAttribute('src'),
					alt: image.getAttribute('alt') || '',
					width: image.getAttribute('width') || '',
					height: image.getAttribute('height') || '',

					// Lock ratio is on by default (#10833).
					lock: this.ready ? helpers.checkHasNaturalRatio(image) : true
				};

				// If we used 'a' in widget#parts definition, it could happen that
				// selected element is a child of widget.parts#caption. Since there's no clever
				// way to solve it with CSS selectors, it's done like that. (#11783).
				var link = image.getAscendant('a');

				if (link && this.wrapper.contains(link)) this.parts.link = link;

				// Depending on configuration, read style/class from element and
				// then remove it. Removed style/class will be set on wrapper in #data listener.
				// Note: Center alignment is detected during upcast, so only left/right cases
				// are checked below.
				if (!data.align) {
					var alignElement = data.hasCaption ? this.element : image;

					// Read the initial left/right alignment from the class set on element.
					if (alignClasses) {
						if (alignElement.hasClass(alignClasses[0])) {
							data.align = 'left';
						} else if (alignElement.hasClass(alignClasses[2])) {
							data.align = 'right';
						}

						if (data.align) {
							alignElement.removeClass(alignClasses[alignmentsObj[data.align]]);
						} else {
							data.align = 'none';
						}
					}
					// Read initial float style from figure/image and then remove it.
					else {
							data.align = alignElement.getStyle('float') || 'none';
							alignElement.removeStyle('float');
						}
				}

				// Update data.link object with attributes if the link has been discovered.
				if (editor.plugins.link && this.parts.link) {
					data.link = helpers.getLinkAttributesParser()(editor, this.parts.link);

					// Get rid of cke_widget_* classes in data. Otherwise
					// they might appear in link dialog.
					var advanced = data.link.advanced;
					if (advanced && advanced.advCSSClasses) {
						advanced.advCSSClasses = CKEDITOR.tools.trim(advanced.advCSSClasses.replace(/cke_\S+/, ''));
					}
				}

				// Get rid of extra vertical space when there's no caption.
				// It will improve the look of the resizer.
				this.wrapper[(data.hasCaption ? 'remove' : 'add') + 'Class']('cke_image_nocaption');

				this.setData(data);

				// Setup dynamic image resizing with mouse.
				// Don't initialize resizer when dimensions are disallowed (#11004).
				if (editor.filter.checkFeature(this.features.dimension) && editor.config.ae_dragresize_ie11_disableResizer !== true) setupResizer(this);

				this.shiftState = helpers.stateShifter(this.editor);

				// Add widget editing option to its context menu.
				this.on('contextMenu', function (evt) {
					evt.data.image = CKEDITOR.TRISTATE_OFF;

					// Integrate context menu items for link.
					// Note that widget may be wrapped in a link, which
					// does not belong to that widget (#11814).
					if (this.parts.link || this.wrapper.getAscendant('a')) evt.data.link = evt.data.unlink = CKEDITOR.TRISTATE_OFF;
				});
			},

			// Overrides default method to handle internal mutability of ae_dragresize_ie11.
			// @see CKEDITOR.plugins.widget#addClass
			addClass: function addClass(className) {
				getStyleableElement(this).addClass(className);
			},

			// Overrides default method to handle internal mutability of ae_dragresize_ie11.
			// @see CKEDITOR.plugins.widget#hasClass
			hasClass: function hasClass(className) {
				return getStyleableElement(this).hasClass(className);
			},

			// Overrides default method to handle internal mutability of ae_dragresize_ie11.
			// @see CKEDITOR.plugins.widget#removeClass
			removeClass: function removeClass(className) {
				getStyleableElement(this).removeClass(className);
			},

			// Overrides default method to handle internal mutability of ae_dragresize_ie11.
			// @see CKEDITOR.plugins.widget#getClasses
			getClasses: function () {
				var classRegex = new RegExp('^(' + [].concat(captionedClass, alignClasses).join('|') + ')$');

				return function () {
					var classes = this.repository.parseElementClasses(getStyleableElement(this).getAttribute('class'));

					// Neither config.ae_dragresize_ie11_captionedClass nor config.ae_dragresize_ie11_alignClasses
					// do not belong to style classes.
					for (var c in classes) {
						if (classRegex.test(c)) delete classes[c];
					}

					return classes;
				};
			}(),

			upcast: upcastWidgetElement(editor),
			downcast: downcastWidgetElement(editor),

			getLabel: function getLabel() {
				var label = (this.data.alt || '') + ' ' + this.pathName;

				return this.editor.lang.widget.label.replace(/%1/, label);
			}
		};
	}

	/**
  * A set of Enhanced Image (ae_dragresize_ie11) plugin helpers.
  *
  * @class
  * @singleton
  */
	CKEDITOR.plugins.ae_dragresize_ie11 = {
		stateShifter: function stateShifter(editor) {
			// Tag name used for centering non-captioned widgets.
			var doc = editor.document;

			var alignClasses = editor.config.ae_dragresize_ie11_alignClasses;

			var captionedClass = editor.config.ae_dragresize_ie11_captionedClass;

			var editable = editor.editable();

			// The order that stateActions get executed. It matters!

			var shiftables = ['hasCaption', 'align', 'link'];

			// Atomic procedures, one per state variable.
			var stateActions = {
				align: function align(shift, oldValue, newValue) {
					var el = shift.element;

					// Alignment changed.
					if (shift.changed.align) {
						// No caption in the new state.
						if (!shift.newData.hasCaption) {
							// Changed to "center" (non-captioned).
							if (newValue == 'center') {
								shift.deflate();
								shift.element = wrapInCentering(editor, el);
							}

							// Changed to "non-center" from "center" while caption removed.
							if (!shift.changed.hasCaption && oldValue == 'center' && newValue != 'center') {
								shift.deflate();
								shift.element = unwrapFromCentering(el);
							}
						}
					}

					// Alignment remains and "center" removed caption.
					else if (newValue == 'center' && shift.changed.hasCaption && !shift.newData.hasCaption) {
							shift.deflate();
							shift.element = wrapInCentering(editor, el);
						}

					// Finally set display for figure.
					if (!alignClasses && el.is('figure')) {
						if (newValue == 'center') el.setStyle('display', 'inline-block');else el.removeStyle('display');
					}
				},

				hasCaption: function hasCaption(shift, oldValue, newValue) {
					// This action is for real state change only.
					if (!shift.changed.hasCaption) return;

					// Get <img/> or <a><img/></a> from widget. Note that widget element might itself
					// be what we're looking for. Also element can be <p style="text-align:center"><a>...</a></p>.
					var imageOrLink = void 0;
					if (shift.element.is({ img: 1, a: 1 })) imageOrLink = shift.element;else imageOrLink = shift.element.findOne('a,img');

					// Switching hasCaption always destroys the widget.
					shift.deflate();

					// There was no caption, but the caption is to be added.
					if (newValue) {
						// Create new <figure> from widget template.
						var figure = CKEDITOR.dom.element.createFromHtml(templateBlock.output({
							captionedClass: captionedClass,
							captionPlaceholder: editor.lang.ae_dragresize_ie11.captionPlaceholder
						}), doc);

						// Replace element with <figure>.
						replaceSafely(figure, shift.element);

						// Use old <img/> or <a><img/></a> instead of the one from the template,
						// so we won't lose additional attributes.
						imageOrLink.replace(figure.findOne('img'));

						// Update widget's element.
						shift.element = figure;
					}

					// The caption was present, but now it's to be removed.
					else {
							// Unwrap <img/> or <a><img/></a> from figure.
							imageOrLink.replace(shift.element);

							// Update widget's element.
							shift.element = imageOrLink;
						}
				},

				link: function link(shift, oldValue, newValue) {
					if (shift.changed.link) {
						var img = shift.element.is('img') ? shift.element : shift.element.findOne('img');

						var link = shift.element.is('a') ? shift.element : shift.element.findOne('a');

						// Why deflate:
						// If element is <img/>, it will be wrapped into <a>,
						// which becomes a new widget.element.
						// If element is <a><img/></a>, it will be unlinked
						// so <img/> becomes a new widget.element.

						var needsDeflate = shift.element.is('a') && !newValue || shift.element.is('img') && newValue;

						var newEl = void 0;

						if (needsDeflate) shift.deflate();

						// If unlinked the image, returned element is <img>.
						if (!newValue) newEl = unwrapFromLink(link);else {
							// If linked the image, returned element is <a>.
							if (!oldValue) newEl = wrapInLink(img, shift.newData.link);

							// Set and remove all attributes associated with this state.
							var attributes = CKEDITOR.plugins.ae_dragresize_ie11.getLinkAttributesGetter()(editor, newValue);

							if (!CKEDITOR.tools.isEmpty(attributes.set)) (newEl || link).setAttributes(attributes.set);

							if (attributes.removed.length) (newEl || link).removeAttributes(attributes.removed);
						}

						if (needsDeflate) shift.element = newEl;
					}
				}
			};

			function wrapInCentering(editor, element) {
				var attribsAndStyles = {};

				if (alignClasses) attribsAndStyles.attributes = { class: alignClasses[1] };else attribsAndStyles.styles = { 'text-align': 'center' };

				// There's no gentle way to center inline element with CSS, so create p/div
				// that wraps widget contents and does the trick either with style or class.
				var center = doc.createElement(editor.activeEnterMode == CKEDITOR.ENTER_P ? 'p' : 'div', attribsAndStyles);

				// Replace element with centering wrapper.
				replaceSafely(center, element);
				element.move(center);

				return center;
			}

			function unwrapFromCentering(element) {
				var imageOrLink = element.findOne('a,img');

				imageOrLink.replace(element);

				return imageOrLink;
			}

			// Wraps <img/> -> <a><img/></a>.
			// Returns reference to <a>.
			//
			// @param {CKEDITOR.dom.element} img
			// @param {Object} linkData
			// @returns {CKEDITOR.dom.element}
			function wrapInLink(img, linkData) {
				var link = doc.createElement('a', {
					attributes: {
						href: linkData.url
					}
				});

				link.replace(img);
				img.move(link);

				return link;
			}

			// De-wraps <a><img/></a> -> <img/>.
			// Returns the reference to <img/>
			//
			// @param {CKEDITOR.dom.element} link
			// @returns {CKEDITOR.dom.element}
			function unwrapFromLink(link) {
				var img = link.findOne('img');

				img.replace(link);

				return img;
			}

			function replaceSafely(replacing, replaced) {
				if (replaced.getParent()) {
					var range = editor.createRange();

					range.moveToPosition(replaced, CKEDITOR.POSITION_BEFORE_START);

					// Remove old element. Do it before insertion to avoid a case when
					// element is moved from 'replaced' element before it, what creates
					// a tricky case which insertElementIntorRange does not handle.
					replaced.remove();

					editable.insertElementIntoRange(replacing, range);
				} else {
					replacing.replace(replaced);
				}
			}

			return function (shift) {
				var name = void 0;
				var i = void 0;

				shift.changed = {};

				for (i = 0; i < shiftables.length; i++) {
					name = shiftables[i];

					shift.changed[name] = shift.oldData ? shift.oldData[name] !== shift.newData[name] : false;
				}

				// Iterate over possible state variables.
				for (i = 0; i < shiftables.length; i++) {
					name = shiftables[i];

					stateActions[name](shift, shift.oldData ? shift.oldData[name] : null, shift.newData[name]);
				}

				shift.inflate();
			};
		},

		/**
   * Checks whether the current image ratio matches the natural one
   * by comparing dimensions.
   *
   * @param {CKEDITOR.dom.element} image
   * @return {Boolean}
   */
		checkHasNaturalRatio: function checkHasNaturalRatio(image) {
			var $ = image.$;

			var natural = this.getNatural(image);

			// The reason for two alternative comparisons is that the rounding can come from
			// both dimensions, e.g. there are two cases:
			// 	1. height is computed as a rounded relation of the real height and the value of width,
			//	2. width is computed as a rounded relation of the real width and the value of heigh.
			return Math.round($.clientWidth / natural.width * natural.height) == $.clientHeight || Math.round($.clientHeight / natural.height * natural.width) == $.clientWidth;
		},

		/**
   * Returns natural dimensions of the image. For modern browsers
   * it uses natural(Width|Height). For old ones (IE8) it creates
   * a new image and reads the dimensions.
   *
   * @param {CKEDITOR.dom.element} image
   * @return {Object}
   */
		getNatural: function getNatural(image) {
			var dimensions = void 0;

			if (image.$.naturalWidth) {
				dimensions = {
					width: image.$.naturalWidth,
					height: image.$.naturalHeight
				};
			} else {
				var img = new Image();
				img.src = image.getAttribute('src');

				dimensions = {
					width: img.width,
					height: img.height
				};
			}

			return dimensions;
		},

		/**
   * Returns an attribute getter function. Default getter comes from the Link plugin
   * and is documented by {@link CKEDITOR.plugins.link#getLinkAttributes}.
   *
   * **Note:** It is possible to override this method and use a custom getter e.g.
   * in the absence of the Link plugin.
   *
   * **Note:** If a custom getter is used, a data model format it produces
   * must be compatible with {@link CKEDITOR.plugins.link#getLinkAttributes}.
   *
   * **Note:** A custom getter must understand the data model format produced by
   * {@link #getLinkAttributesParser} to work correctly.
   *
   * @return {Function} A function that gets (composes) link attributes.
   * @since 4.5.5
   */
		getLinkAttributesGetter: function getLinkAttributesGetter() {
			// #13885
			return CKEDITOR.plugins.link.getLinkAttributes;
		},

		/**
   * Returns an attribute parser function. Default parser comes from the Link plugin
   * and is documented by {@link CKEDITOR.plugins.link#parseLinkAttributes}.
   *
   * **Note:** It is possible to override this method and use a custom parser e.g.
   * in the absence of the Link plugin.
   *
   * **Note:** If a custom parser is used, a data model format produced by the parser
   * must be compatible with {@link #getLinkAttributesGetter}.
   *
   * **Note:** If a custom parser is used, it should be compatible with the
   * {@link CKEDITOR.plugins.link#parseLinkAttributes} data model format. Otherwise the
   * Link plugin dialog may not be populated correctly with parsed data. However
   * as long as Enhanced Image is **not** used with the Link plugin dialog, any custom data model
   * will work, being stored as an internal property of Enhanced Image widget's data only.
   *
   * @return {Function} A function that parses attributes.
   * @since 4.5.5
   */
		getLinkAttributesParser: function getLinkAttributesParser() {
			// #13885
			return CKEDITOR.plugins.link.parseLinkAttributes;
		}
	};

	function setWrapperAlign(widget, alignClasses) {
		var wrapper = widget.wrapper;

		var align = widget.data.align;

		var hasCaption = widget.data.hasCaption;

		if (alignClasses) {
			// Remove all align classes first.
			for (var i = 3; i--;) {
				wrapper.removeClass(alignClasses[i]);
			}if (align == 'center') {
				// Avoid touching non-captioned, centered widgets because
				// they have the class set on the element instead of wrapper:
				//
				// 	<div class="cke_widget_wrapper">
				// 		<p class="center-class">
				// 			<img />
				// 		</p>
				// 	</div>
				if (hasCaption) {
					wrapper.addClass(alignClasses[1]);
				}
			} else if (align != 'none') {
				wrapper.addClass(alignClasses[alignmentsObj[align]]);
			}
		} else {
			if (align == 'center') {
				if (hasCaption) wrapper.setStyle('text-align', 'center');else wrapper.removeStyle('text-align');

				wrapper.removeStyle('float');
			} else {
				if (align == 'none') wrapper.removeStyle('float');else wrapper.setStyle('float', align);

				wrapper.removeStyle('text-align');
			}

			var image = wrapper.$.querySelector('img');

			image.removeAttribute('style');
		}
	}

	// Returns a function that creates widgets from all <img> and
	// <figure class="{config.ae_dragresize_ie11_captionedClass}"> elements.
	//
	// @param {CKEDITOR.editor} editor
	// @returns {Function}
	function upcastWidgetElement(editor) {
		var isCenterWrapper = centerWrapperChecker(editor);

		var captionedClass = editor.config.ae_dragresize_ie11_captionedClass;

		// @param {CKEDITOR.htmlParser.element} el
		// @param {Object} data
		return function (el, data) {
			var dimensions = { width: 1, height: 1 };

			var name = el.name;

			var image = void 0;

			// #11110 Don't initialize on pasted fake objects.
			if (el.attributes['data-cke-realelement']) return;

			// If a center wrapper is found, there are 3 possible cases:
			//
			// 1. <div style="text-align:center"><figure>...</figure></div>.
			//    In this case centering is done with a class set on widget.wrapper.
			//    Simply replace centering wrapper with figure (it's no longer necessary).
			//
			// 2. <p style="text-align:center"><img/></p>.
			//    Nothing to do here: <p> remains for styling purposes.
			//
			// 3. <div style="text-align:center"><img/></div>.
			//    Nothing to do here (2.) but that case is only possible in enterMode different
			//    than ENTER_P.
			if (isCenterWrapper(el)) {
				if (name == 'div') {
					var figure = el.getFirst('figure');

					// Case #1.
					if (figure) {
						el.replaceWith(figure);
						el = figure;
					}
				}
				// Cases #2 and #3 (handled transparently)

				// If there's a centering wrapper, save it in data.
				data.align = 'center';

				// Image can be wrapped in link <a><img/></a>.
				image = el.getFirst('img') || el.getFirst('a').getFirst('img');
			}

			// No center wrapper has been found.
			else if (name == 'figure' && el.hasClass(captionedClass)) {
					image = el.getFirst('img') || el.getFirst('a').getFirst('img');

					// Upcast linked image like <a><img/></a>.
				} else if (isLinkedOrStandaloneImage(el)) {
					image = el.name == 'a' ? el.children[0] : el;
				}

			if (!image) return;

			// If there's an image, then cool, we got a widget.
			// Now just remove dimension attributes expressed with %.
			for (var d in dimensions) {
				if (dimensions.hasOwnProperty(d)) {
					var dimension = image.attributes[d];
					if (dimension && dimension.match(regexPercent)) delete image.attributes[d];
				}
			}

			return el;
		};
	}

	// Returns a function which transforms the widget to the external format
	// according to the current configuration.
	//
	// @param {CKEDITOR.editor}
	function downcastWidgetElement(editor) {
		var alignClasses = editor.config.ae_dragresize_ie11_alignClasses;

		// @param {CKEDITOR.htmlParser.element} el
		return function (el) {
			// In case of <a><img/></a>, <img/> is the element to hold
			// inline styles or classes (ae_dragresize_ie11_alignClasses).
			var attrsHolder = el.name == 'a' ? el.getFirst() : el;

			var attrs = attrsHolder.attributes;

			var align = this.data.align;

			// De-wrap the image from resize handle wrapper.
			// Only block widgets have one.
			if (!this.inline) {
				var resizeWrapper = el.getFirst('span');

				if (resizeWrapper) resizeWrapper.replaceWith(resizeWrapper.getFirst({ img: 1, a: 1 }));
			}

			if (align && align != 'none') {
				var styles = CKEDITOR.tools.parseCssText(attrs.style || '');

				// When the widget is captioned (<figure>) and internally centering is done
				// with widget's wrapper style/class, in the external data representation,
				// <figure> must be wrapped with an element holding an style/class:
				//
				// 	<div style="text-align:center">
				// 		<figure class="image" style="display:inline-block">...</figure>
				// 	</div>
				// or
				// 	<div class="some-center-class">
				// 		<figure class="image">...</figure>
				// 	</div>
				//
				if (align == 'center' && el.name == 'figure') {
					el = el.wrapWith(new CKEDITOR.htmlParser.element('div', alignClasses ? { class: alignClasses[1] } : { style: 'text-align:center' }));
				}

				// If left/right, add float style to the downcasted element.
				else if (align in { left: 1, right: 1 }) {
						if (alignClasses) attrsHolder.addClass(alignClasses[alignmentsObj[align]]);else styles['float'] = align;
					}

				// Update element styles.
				if (!alignClasses && !CKEDITOR.tools.isEmpty(styles)) attrs.style = CKEDITOR.tools.writeCssText(styles) + ';';
			}

			return el;
		};
	}

	// Returns a function that checks if an element is a centering wrapper.
	//
	// @param {CKEDITOR.editor} editor
	// @returns {Function}
	function centerWrapperChecker(editor) {
		var captionedClass = editor.config.ae_dragresize_ie11_captionedClass;

		var alignClasses = editor.config.ae_dragresize_ie11_alignClasses;

		var validChildren = { figure: 1, a: 1, img: 1 };

		return function (el) {
			// Wrapper must be either <div> or <p>.
			if (!(el.name in { div: 1, p: 1 })) return false;

			var children = el.children;

			// Centering wrapper can have only one child.
			if (children.length !== 1) return false;

			var child = children[0];

			// Only <figure> or <img /> can be first (only) child of centering wrapper,
			// regardless of its type.
			if (!(child.name in validChildren)) return false;

			// If centering wrapper is <p>, only <img /> can be the child.
			//   <p style="text-align:center"><img /></p>
			if (el.name == 'p') {
				if (!isLinkedOrStandaloneImage(child)) return false;
			}
			// Centering <div> can hold <img/> or <figure>, depending on enterMode.
			else {
					// If a <figure> is the first (only) child, it must have a class.
					//   <div style="text-align:center"><figure>...</figure><div>
					if (child.name == 'figure') {
						if (!child.hasClass(captionedClass)) return false;
					} else {
						// Centering <div> can hold <img/> or <a><img/></a> only when enterMode
						// is ENTER_(BR|DIV).
						//   <div style="text-align:center"><img /></div>
						//   <div style="text-align:center"><a><img /></a></div>
						if (editor.enterMode == CKEDITOR.ENTER_P) return false;

						// Regardless of enterMode, a child which is not <figure> must be
						// either <img/> or <a><img/></a>.
						if (!isLinkedOrStandaloneImage(child)) return false;
					}
				}

			// Centering wrapper got to be... centering. If ae_dragresize_ie11_alignClasses are defined,
			// check for centering class. Otherwise, check the style.
			if (alignClasses ? el.hasClass(alignClasses[1]) : CKEDITOR.tools.parseCssText(el.attributes.style || '', true)['text-align'] == 'center') return true;

			return false;
		};
	}

	// Checks whether element is <img/> or <a><img/></a>.
	//
	// @param {CKEDITOR.htmlParser.element}
	function isLinkedOrStandaloneImage(el) {
		if (el.name == 'img') return true;else if (el.name == 'a') return el.children.length == 1 && el.getFirst('img');

		return false;
	}

	// Sets width and height of the widget image according to current widget data.
	//
	// @param {CKEDITOR.plugins.widget} widget
	function setDimensions(widget) {
		var data = widget.data;

		var dimensions = { width: data.width, height: data.height };

		var image = widget.parts.image;

		for (var d in dimensions) {
			if (dimensions[d]) image.setAttribute(d, dimensions[d]);else image.removeAttribute(d);
		}
	}

	// Defines all features related to drag-driven image resizing.
	//
	// @param {CKEDITOR.plugins.widget} widget
	function setupResizer(widget) {
		var editor = widget.editor;

		var editable = editor.editable();

		var doc = editor.document;

		// Store the resizer in a widget for testing (#11004).

		var resizer = widget.resizer = doc.createElement('span');

		// Create resizer for each corner (NE, NW, SE, SW)

		var resizerNE = doc.createElement('span');

		var resizerNW = doc.createElement('span');

		var resizerSE = doc.createElement('span');

		var resizerSW = doc.createElement('span');

		resizerNE.addClass('cke_image_resizer');
		resizerNE.addClass('cke_image_resizer_ne');

		resizerNW.addClass('cke_image_resizer');
		resizerNW.addClass('cke_image_resizer_nw');

		resizerSE.addClass('cke_image_resizer');
		resizerSE.addClass('cke_image_resizer_se');

		resizerSW.addClass('cke_image_resizer');
		resizerSW.addClass('cke_image_resizer_sw');

		// Add each directional resizer as a child of resizer
		resizer.append(resizerNE);
		resizer.append(resizerNW);
		resizer.append(resizerSE);
		resizer.append(resizerSW);

		// resizer.setAttribute( 'title', editor.lang.ae_dragresize_ie11.resizer );
		resizer.append(new CKEDITOR.dom.text('\u200B', doc));

		// Inline widgets don't need a resizer wrapper as an image spans the entire widget.
		if (!widget.inline) {
			var imageOrLink = widget.parts.link || widget.parts.image;

			var oldResizeWrapper = imageOrLink.getParent();

			var resizeWrapper = doc.createElement('span');

			resizeWrapper.addClass('cke_image_resizer_wrapper');
			resizeWrapper.append(imageOrLink);
			resizeWrapper.append(resizer);
			widget.element.append(resizeWrapper, true);

			// Remove the old wrapper which could came from e.g. pasted HTML
			// and which could be corrupted (e.g. resizer span has been lost).
			if (oldResizeWrapper.is('span')) oldResizeWrapper.remove();
		} else {
			widget.wrapper.append(resizer);
		}

		// Calculate values of size variables and mouse offsets.
		resizer.on('mousedown', function (evt) {
			var image = widget.parts.image;

			// The x-coordinate of the mouse relative to the screen
			// when button gets pressed.

			var startX = evt.data.$.screenX;

			var startY = evt.data.$.screenY;

			// The initial dimensions and aspect ratio of the image.

			var startWidth = image.$.clientWidth;

			var startHeight = image.$.clientHeight;

			var ratio = startWidth / startHeight;

			var listeners = [];

			var target = evt.data.getTarget();

			var factorX = void 0;

			var factorY = void 0;

			var moveDiffX = void 0;

			var moveDiffY = void 0;

			var nativeEvt = void 0;

			var newHeight = void 0;

			var newWidth = void 0;

			var updateData = void 0;

			// "factorX" and "factorY" can be either 1 or -1. I.e.: We need to
			// add/subtract the difference to get proper width, etc. Without "factorX"
			// and "factorY", resizer starts working the opposite way.
			if (target.hasClass('cke_image_resizer_ne')) {
				factorX = 1;
				factorY = 1;
			} else if (target.hasClass('cke_image_resizer_nw')) {
				factorX = -1;
				factorY = 1;
			} else if (target.hasClass('cke_image_resizer_se')) {
				factorX = 1;
				factorY = -1;
			} else if (target.hasClass('cke_image_resizer_sw')) {
				factorX = -1;
				factorY = -1;
			}

			// A class applied to editable during resizing.
			var cursorClass = 'cke_image_' + (!~factorY ? 's' : 'n') + (!~factorX ? 'w' : 'e');

			// Save the undo snapshot first: before resizing.
			editor.fire('saveSnapshot');

			// Mousemove listeners are removed on mouseup.
			attachToDocuments('mousemove', onMouseMove, listeners);

			// Clean up the mousemove listener. Update widget data if valid.
			attachToDocuments('mouseup', onMouseUp, listeners);

			// The entire editable will have the special cursor while resizing goes on.
			editable.addClass(cursorClass);

			// This is to always keep the resizer element visible while resizing.
			resizer.addClass('cke_image_resizing');

			// Attaches an event to a global document if inline editor.
			// Additionally, if classic (`iframe`-based) editor, also attaches the same event to `iframe`'s document.
			function attachToDocuments(name, callback, collection) {
				var globalDoc = CKEDITOR.document;

				var listeners = [];

				if (!doc.equals(globalDoc)) listeners.push(globalDoc.on(name, callback));

				listeners.push(doc.on(name, callback));

				if (collection) {
					for (var i = listeners.length; i--;) {
						collection.push(listeners.pop());
					}
				}
			}

			// Calculate width first, and then adjust height, preserving ratio.
			function adjustToX() {
				newWidth = startWidth + factorX * moveDiffX;
				newHeight = Math.round(newWidth / ratio);
			}

			// Calculate height first, and then adjust width, preserving ratio.
			function adjustToY() {
				newHeight = startHeight + factorY * moveDiffY;
				newWidth = Math.round(newHeight * ratio);
			}

			// This is how variables refer to the geometry.
			// Note: x corresponds to moveOffset, this is the position of mouse
			// Note: o corresponds to [startX, startY].
			//
			// 	+--------------+--------------+
			// 	|              |              |
			// 	|      I       |      II      |
			// 	|              |              |
			// 	+------------- o -------------+ _ _ _
			// 	|              |              |      ^
			// 	|      VI      |     III      |      | moveDiffY
			// 	|              |         x _ _ _ _ _ v
			// 	+--------------+---------|----+
			// 	               |         |
			// 	                <------->
			// 	                moveDiffX
			function onMouseMove(evt) {
				nativeEvt = evt.data.$;

				// This is how far the mouse is from the point the button was pressed.
				moveDiffX = nativeEvt.screenX - startX;
				moveDiffY = startY - nativeEvt.screenY;

				// Resize with NE, SE drag handles
				if (factorX == 1) {
					if (moveDiffX <= 0) {
						adjustToY();
					} else {
						adjustToX();
					}
				}
				// Resize with NW, SW drag handles
				else {
						if (moveDiffX <= 0) {
							adjustToX();
						} else {
							adjustToY();
						}
					}

				// Don't update attributes if less than 10.
				// This is to prevent images to visually disappear.
				if (newWidth >= 15 && newHeight >= 15) {
					image.$.style.width = newWidth + 'px';
					image.$.style.height = newHeight + 'px';

					updateData = true;
				} else {
					updateData = false;
				}
			}

			function onMouseUp() {
				var l = void 0;

				while (l = listeners.pop()) {
					l.removeListener();
				} // Restore default cursor by removing special class.
				editable.removeClass(cursorClass);

				// This is to bring back the regular behaviour of the resizer.
				resizer.removeClass('cke_image_resizing');

				if (updateData) {
					widget.setData({
						height: newHeight,
						width: newWidth
					});

					// Save another undo snapshot: after resizing.
					editor.fire('saveSnapshot');
				}

				// Don't update data twice or more.
				updateData = false;
			}
		});
	}

	/**
  * Removes the alignment value of an image
  *
  * @param {CKEDITOR.dom.element} image The image element
  * @param {String} imageAlignment The image alignment value to be removed
  */
	var removeWidgetAlignment = function removeWidgetAlignment(widget, imageAlignment) {
		if (imageAlignment === 'left' || imageAlignment === 'right') {
			widget.wrapper.removeStyle('float');
		} else if (imageAlignment === 'center') {
			widget.editor.execCommand('justifyleft');
			widget.editor.execCommand('justifyleft');
		}
	};

	// Integrates widget alignment setting with justify
	// plugin's commands (execution and refreshment).
	// @param {CKEDITOR.editor} editor
	// @param {String} value 'left', 'right', 'center' or 'block'
	function alignCommandIntegrator(editor) {
		var execCallbacks = [];

		var enabled = void 0;

		return function (value) {
			var command = editor.getCommand('justify' + value);

			// Most likely, the justify plugin isn't loaded.
			if (!command) return;

			// This command will be manually refreshed along with
			// other commands after exec.
			execCallbacks.push(function () {
				command.refresh(editor, editor.elementPath());
			});

			if (value in { right: 1, left: 1, center: 1 }) {
				command.on('exec', function (evt) {
					var widget = getFocusedWidget(editor);

					if (widget) {
						if (widget.data.align === value) {
							removeWidgetAlignment(widget, value);

							delete widget.data.align;
						} else {
							widget.setData('align', value);
						}

						// Once the widget changed its align, all the align commands
						// must be refreshed: the event is to be cancelled.
						for (var i = execCallbacks.length; i--;) {
							execCallbacks[i]();
						}evt.cancel();
					}
				});
			}

			command.on('refresh', function (evt) {
				var widget = getFocusedWidget(editor);

				var allowed = { right: 1, left: 1, center: 1 };

				if (!widget) return;

				// Cache "enabled" on first use. This is because filter#checkFeature may
				// not be available during plugin's afterInit in the future — a moment when
				// alignCommandIntegrator is called.
				if (enabled === undefined) enabled = editor.filter.checkFeature(editor.widgets.registered.image.features.align);

				// Don't allow justify commands when widget alignment is disabled (#11004).
				if (!enabled) this.setState(CKEDITOR.TRISTATE_DISABLED);else {
					this.setState(widget.data.align == value ? CKEDITOR.TRISTATE_ON : value in allowed ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED);
				}

				evt.cancel();
			});
		};
	}

	// Returns the focused widget, if of the type specific for this plugin.
	// If no widget is focused, `null` is returned.
	//
	// @param {CKEDITOR.editor}
	// @returns {CKEDITOR.plugins.widget}
	function getFocusedWidget(editor) {
		var widget = editor.widgets.focused;

		if (widget && widget.name == 'image') return widget;

		return null;
	}

	// Returns a set of widget allowedContent rules, depending
	// on configurations like config#ae_dragresize_ie11_alignClasses or
	// config#ae_dragresize_ie11_captionedClass.
	//
	// @param {CKEDITOR.editor}
	// @returns {Object}
	function getWidgetAllowedContent(editor) {
		var alignClasses = editor.config.ae_dragresize_ie11_alignClasses;

		var rules = {
			// Widget may need <div> or <p> centering wrapper.
			div: {
				match: centerWrapperChecker(editor)
			},
			p: {
				match: centerWrapperChecker(editor)
			},
			img: {
				attributes: '!src,alt,width,height'
			},
			figure: {
				classes: '!' + editor.config.ae_dragresize_ie11_captionedClass
			},
			figcaption: true
		};

		if (alignClasses) {
			// Centering class from the config.
			rules.div.classes = alignClasses[1];
			rules.p.classes = rules.div.classes;

			// Left/right classes from the config.
			rules.img.classes = alignClasses[0] + ',' + alignClasses[2];
			rules.figure.classes += ',' + rules.img.classes;
		} else {
			// Centering with text-align.
			rules.div.styles = 'text-align';
			rules.p.styles = 'text-align';

			rules.img.styles = 'float';
			rules.figure.styles = 'float,display';
		}

		return rules;
	}

	// Returns a set of widget feature rules, depending
	// on editor configuration. Note that the following may not cover
	// all the possible cases since requiredContent supports a single
	// tag only.
	//
	// @param {CKEDITOR.editor}
	// @returns {Object}
	function getWidgetFeatures(editor) {
		var alignClasses = editor.config.ae_dragresize_ie11_alignClasses;

		var features = {
			dimension: {
				requiredContent: 'img[width,height]'
			},
			align: {
				requiredContent: 'img' + (alignClasses ? '(' + alignClasses[0] + ')' : '{float}')
			},
			caption: {
				requiredContent: 'figcaption'
			}
		};

		return features;
	}

	// Returns element which is styled, considering current
	// state of the widget.
	//
	// @see CKEDITOR.plugins.widget#applyStyle
	// @param {CKEDITOR.plugins.widget} widget
	// @returns {CKEDITOR.dom.element}
	function getStyleableElement(widget) {
		return widget.data.hasCaption ? widget.element : widget.parts.image;
	}
})();

/**
 * A CSS class applied to the `<figure>` element of a captioned image.
 *
 * Read more in the [documentation](#!/guide/dev_captionedimage) and see the
 * [SDK sample](http://sdk.ckeditor.com/samples/captionedimage.html).
 *
 *		// Changes the class to "captionedImage".
 *		config.ae_dragresize_ie11_captionedClass = 'captionedImage';
 *
 * @cfg {String} [ae_dragresize_ie11_captionedClass='image']
 * @member CKEDITOR.config
 */
CKEDITOR.config.ae_dragresize_ie11_captionedClass = 'image';

/***/ }),

/***/ "./src/plugins/embed.js":
/*!******************************!*\
  !*** ./src/plugins/embed.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	/* istanbul ignore if */

	if (CKEDITOR.plugins.get('ae_embed')) {
		return;
	}

	var REGEX_HTTP = /^https?/;

	var REGEX_DEFAULT_LINK = /<a href=/;

	CKEDITOR.DEFAULT_AE_EMBED_URL_TPL = 'http://alloy.iframe.ly/api/oembed?url={url}&callback={callback}';
	CKEDITOR.DEFAULT_AE_EMBED_WIDGET_TPL = '<div data-ae-embed-url="{url}"></div>';
	CKEDITOR.DEFAULT_AE_EMBED_DEFAULT_LINK_TPL = '<a href="{url}">{url}</a>';
	/**
  * CKEditor plugin which adds the infrastructure to embed urls as media objects using an oembed
  * service. By default, and for demoing purposes only, the oembed service is hosted in iframe.ly
  * at //alloy.iframe.ly/api/oembed?url={url}&callback={callback}. Note this should be changed to
  * a self-hosted or paid service in production environments. Access to the alloy.iframe.ly endpoint
  * may be restricted per domain due to significant traffic.
  *
  * This plugin adds an `embedUrl` command that can be used to easily embed a URL and transform it
  * to an embedded content.
  *
  * @class CKEDITOR.plugins.ae_embed
  */
	CKEDITOR.plugins.add('ae_embed', {
		requires: 'widget',
		init: function init(editor) {
			var AE_EMBED_URL_TPL = new CKEDITOR.template(editor.config.embedUrlTemplate || CKEDITOR.DEFAULT_AE_EMBED_URL_TPL);
			var AE_EMBED_WIDGET_TPL = new CKEDITOR.template(editor.config.embedWidgetTpl || CKEDITOR.DEFAULT_AE_EMBED_WIDGET_TPL);
			var AE_EMBED_DEFAULT_LINK_TPL = new CKEDITOR.template(editor.config.embedLinkDefaultTpl || CKEDITOR.DEFAULT_AE_EMBED_DEFAULT_LINK_TPL);

			// Default function to upcast DOM elements to embed widgets.
			// It matches CKEDITOR.DEFAULT_AE_EMBED_WIDGET_TPL
			var defaultEmbedWidgetUpcastFn = function defaultEmbedWidgetUpcastFn(element, data) {
				if (element.name === 'div' && element.attributes['data-ae-embed-url']) {
					data.url = element.attributes['data-ae-embed-url'];

					return true;
				}
			};

			// Create a embedUrl command that can be invoked to easily embed media URLs
			editor.addCommand('embedUrl', {
				exec: function exec(editor, data) {
					editor.insertHtml(AE_EMBED_WIDGET_TPL.output({
						url: data.url
					}));
				}
			});

			// Create a widget to properly handle embed operations
			editor.widgets.add('ae_embed', {
				mask: true,
				requiredContent: 'div[data-ae-embed-url]',

				/**
     * Listener to be executed every time the widget's data changes. It takes care of
     * requesting the embed object to the configured oembed service and render it in
     * the editor
     *
     * @method data
     * @param {event} event Data change event
     */
				data: function data(event) {
					var widget = this;

					var url = event.data.url;

					if (url) {
						CKEDITOR.tools.jsonp(AE_EMBED_URL_TPL, {
							url: encodeURIComponent(url)
						}, function (response) {
							if (response.html) {
								if (REGEX_DEFAULT_LINK.test(response.html)) {
									widget.createATag(url);
								} else {
									widget.element.setHtml(response.html);
								}
							} else {
								widget.createATag(url);
							}
						}, function (_msg) {
							widget.createATag(url);
						});
					}
				},

				createATag: function createATag(url) {
					this.editor.execCommand('undo');

					var aTagHtml = AE_EMBED_DEFAULT_LINK_TPL.output({
						url: url
					});

					this.editor.insertHtml(aTagHtml);
					this.editor.fire('actionPerformed', this);
				},

				/**
     * Function used to upcast an element to ae_embed widgets.
     *
     * @method upcast
     * @param {CKEDITOR.htmlParser.element} element The element to be checked
     * @param {Object} data The object that will be passed to the widget
     */
				upcast: function upcast(element, data) {
					var embedWidgetUpcastFn = editor.config.embedWidgetUpcastFn || defaultEmbedWidgetUpcastFn;

					return embedWidgetUpcastFn(element, data);
				}
			});

			// Add a listener to handle paste events and turn links into embed objects
			editor.once('contentDom', function () {
				editor.on('paste', function (event) {
					var link = event.data.dataValue;

					if (REGEX_HTTP.test(link)) {
						event.stop();

						editor.execCommand('embedUrl', {
							url: event.data.dataValue
						});
					}
				});
			});

			// Add a listener to handle selection change events and properly detect editor
			// interactions on the widgets without messing with widget native selection
			editor.on('selectionChange', function (_event) {
				var selection = editor.getSelection();

				if (selection) {
					var element = selection.getSelectedElement();

					if (element) {
						var widgetElement = element.findOne('[data-widget="ae_embed"]');

						if (widgetElement) {
							var region = element.getClientRect();

							var scrollPosition = new CKEDITOR.dom.window(window).getScrollPosition();
							region.left -= scrollPosition.x;
							region.top += scrollPosition.y;

							region.direction = CKEDITOR.SELECTION_BOTTOM_TO_TOP;

							editor.fire('editorInteraction', {
								nativeEvent: {},
								selectionData: {
									element: widgetElement,
									region: region
								}
							});
						}
					}
				}
			});

			// Add a filter to skip filtering widget elements
			editor.filter.addElementCallback(function (element) {
				if ('data-ae-embed-url' in element.attributes) {
					return CKEDITOR.FILTER_SKIP_TREE;
				}
			});
		}
	});
})();

/***/ }),

/***/ "./src/plugins/embedurl.js":
/*!*********************************!*\
  !*** ./src/plugins/embedurl.js ***!
  \*********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _Resizer = __webpack_require__(/*! ./Resizer.es */ "./src/plugins/Resizer.es.js");

var _Resizer2 = _interopRequireDefault(_Resizer);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

if (!CKEDITOR.plugins.get('embedurl')) {
	var REGEX_HTTP = /^https?/;

	CKEDITOR.DEFAULT_LFR_EMBED_WIDGET_TPL = '<div data-embed-url="{url}" class="embed-responsive embed-responsive-16by9">{content}<div class="embed-help-message">{helpMessageIcon}<span> {helpMessage}</span></div></div><br>';

	/**
  * Enum for supported embed alignments
  * @type {Object}
  */

	var EMBED_ALIGNMENT = {
		CENTER: 'center',
		LEFT: 'left',
		RIGHT: 'right'
	};

	/**
  * Enum values for supported embed alignments
  * @type {Array}
  */

	var ALIGN_VALUES = [EMBED_ALIGNMENT.CENTER, EMBED_ALIGNMENT.LEFT, EMBED_ALIGNMENT.RIGHT];

	/**
  * Necessary styles for the center alignment
  * @type {Array.<Object>}
  */

	var CENTERED_EMBED_STYLE = [{
		name: 'display',
		value: 'block'
	}, {
		name: 'margin-left',
		value: 'auto'
	}, {
		name: 'margin-right',
		value: 'auto'
	}];

	/**
  * Retrieves the alignment value of an embed element.
  *
  * @param {CKEDITOR.dom.element} embed The embed element
  * @return {String} The alignment value
  */

	var getEmbedAlignment = function getEmbedAlignment(embed) {
		var embedAlignment = embed.getStyle('float');

		if (!embedAlignment || embedAlignment === 'inherit' || embedAlignment === 'none') {
			embedAlignment = embed.getAttribute('align');
		}

		if (!embedAlignment) {
			var centeredEmbed = CENTERED_EMBED_STYLE.every(function (style) {
				var styleCheck = embed.getStyle(style.name) === style.value;

				if (!styleCheck && style.vendorPrefixes) {
					styleCheck = style.vendorPrefixes.some(function (vendorPrefix) {
						return embed.getStyle(vendorPrefix + style.name) === style.value;
					});
				}

				return styleCheck;
			});

			embedAlignment = centeredEmbed ? EMBED_ALIGNMENT.CENTER : null;
		}

		return embedAlignment;
	};

	/**
  * Removes the alignment value of an embed
  *
  * @param {CKEDITOR.dom.element} embed The embed element
  * @param {String} embedAlignment The embed alignment value to be removed
  */

	var removeEmbedAlignment = function removeEmbedAlignment(embed, embedAlignment) {
		if (embedAlignment === EMBED_ALIGNMENT.LEFT || embedAlignment === EMBED_ALIGNMENT.RIGHT) {
			embed.removeStyle('float');

			if (embedAlignment === getEmbedAlignment(embed)) {
				embed.removeAttribute('align');
			}
		} else if (embedAlignment === EMBED_ALIGNMENT.CENTER) {
			CENTERED_EMBED_STYLE.forEach(function (style) {
				embed.removeStyle(style.name);

				if (style.vendorPrefixes) {
					style.vendorPrefixes.forEach(function (vendorPrefix) {
						return embed.removeStyle(vendorPrefix + style.name);
					});
				}
			});
		}
	};

	/**
  * Sets the alignment value of an embed
  *
  * @param {CKEDITOR.dom.element} embed The embed element
  * @param {String} embedAlignment The embed alignment value to be set
  */

	var setEmbedAlignment = function setEmbedAlignment(embed, embedAlignment) {
		removeEmbedAlignment(embed, getEmbedAlignment(embed));

		if (embedAlignment === EMBED_ALIGNMENT.LEFT || embedAlignment === EMBED_ALIGNMENT.RIGHT) {
			embed.setStyle('float', embedAlignment);
		} else if (embedAlignment === EMBED_ALIGNMENT.CENTER) {
			CENTERED_EMBED_STYLE.forEach(function (style) {
				embed.setStyle(style.name, style.value);

				if (style.vendorPrefixes) {
					style.vendorPrefixes.forEach(function (vendorPrefix) {
						return embed.setStyle(vendorPrefix + style.name, style.value);
					});
				}
			});
		}
	};

	var getSelectedElement = function getSelectedElement(editor) {
		var result = {
			alignment: null,
			element: null
		};

		var selection = editor.getSelection();

		if (selection) {
			var selectedElement = selection.getSelectedElement();

			if (selectedElement && selectedElement.getAttribute('data-cke-widget-wrapper')) {
				result.alignment = getEmbedAlignment(selectedElement);
				result.element = selectedElement;
			}
		}

		return result;
	};

	var resizeElement = function resizeElement(el, width, height) {
		var wrapperElement = el.parentElement;

		if (wrapperElement && width > 0 && height > 0) {
			var rect = wrapperElement.getBoundingClientRect();

			var pwidth = width >= rect.width ? 100 : Math.floor(width / rect.width * 100);
			var style = 'width:' + pwidth + '%;';

			wrapperElement.setAttribute('style', style);

			var widgetElement = wrapperElement.querySelector('[data-widget="embedurl"]');

			if (widgetElement) {
				var styles = JSON.parse(widgetElement.getAttribute('data-styles')) || {};

				styles.width = width + 'px';
				styles.height = height + 'px';

				widgetElement.setAttribute('data-styles', JSON.stringify(styles));

				var iframeElement = widgetElement.querySelector('iframe');

				if (iframeElement) {
					iframeElement.setAttribute('width', width);
					iframeElement.setAttribute('height', height);
				}
			}
		}
	};

	var selectWidget = function selectWidget(editor) {
		setTimeout(function () {
			var selection = editor.getSelection();

			if (selection) {
				var wrapperElement = selection.root.find('[data-cke-widget-wrapper]');

				if (wrapperElement) {
					var elementList = wrapperElement.$;
					if (elementList.length > 0) {
						var lastElement = new CKEDITOR.dom.element(elementList[elementList.length - 1]);

						var imageElement = lastElement.findOne('img');
						var widgetElement = lastElement.findOne('[data-widget="embedurl"]');

						if (imageElement && widgetElement) {
							var range = editor.createRange();

							range.setStart(widgetElement, 0);
							range.setEnd(imageElement, 1);

							selection.selectRanges([range]);
							selection.selectElement(lastElement);
						}
					}
				}
			}
		}, 0);
	};

	var currentAlignment = null;
	var currentElement = null;
	var resizer = null;

	/**
  * CKEditor plugin which adds the infrastructure to embed urls as media objects
  *
  * This plugin adds an `embedUrl` command that can be used to easily embed a URL and transform it
  * to an embedded content.
  *
  * @class CKEDITOR.plugins.embedurl
  */

	CKEDITOR.plugins.add('embedurl', {
		requires: 'widget',

		init: function init(editor) {
			var LFR_EMBED_WIDGET_TPL = new CKEDITOR.template(editor.config.embedWidgetTpl || CKEDITOR.DEFAULT_LFR_EMBED_WIDGET_TPL);

			var providers = editor.config.embedProviders || [];

			providers = providers.map(function (provider) {
				return {
					id: provider.id,
					tpl: new CKEDITOR.template('<div data-embed-id="{embedId}">' + provider.tpl + '</div>'),
					type: provider.type,
					urlSchemes: provider.urlSchemes.map(function (scheme) {
						return new RegExp(scheme);
					})
				};
			});

			var generateEmbedContent = function generateEmbedContent(url, content) {
				return LFR_EMBED_WIDGET_TPL.output({
					content: content,
					helpMessage: AlloyEditor.Strings.videoPlaybackDisabled,
					helpMessageIcon: Liferay.Util.getLexiconIconTpl('info-circle'),
					url: url
				});
			};

			var defaultEmbedWidgetUpcastFn = function defaultEmbedWidgetUpcastFn(element, data) {
				var upcastWidget = false;

				if (element.name === 'div' && element.attributes['data-embed-url']) {
					data.url = element.attributes['data-embed-url'];

					upcastWidget = true;
				} else if (element.name === 'div' && element.attributes['data-embed-id']) {
					var iframe = element.children[0];

					data.url = iframe.attributes.src;

					var embedContent = generateEmbedContent(data.url, element.getOuterHtml());

					var widgetFragment = new CKEDITOR.htmlParser.fragment.fromHtml(embedContent);

					upcastWidget = widgetFragment.children[0];

					upcastWidget.attributes['data-styles'] = JSON.stringify(element.styles);
					upcastWidget.removeClass('embed-responsive');
					upcastWidget.removeClass('embed-responsive-16by9');

					element.replaceWith(upcastWidget);
				}

				return upcastWidget;
			};

			var showError = function showError(errorMsg) {
				editor.fire('error', errorMsg);

				setTimeout(function () {
					editor.getSelection().removeAllRanges();

					editor.focus();

					resizer.hide();
				}, 0);
			};

			editor.addCommand('embedUrl', {
				exec: function exec(editor, data) {
					var type = data.type;
					var url = data.url;
					var content = void 0;

					if (REGEX_HTTP.test(url)) {
						var validProvider = providers.filter(function (provider) {
							return type ? provider.type === type : true;
						}).some(function (provider) {
							var scheme = provider.urlSchemes.find(function (scheme) {
								return scheme.test(url);
							});

							if (scheme) {
								var embedId = scheme.exec(url)[1];

								content = provider.tpl.output({
									embedId: embedId
								});
							}

							return scheme;
						});

						if (validProvider) {
							editor._selectEmbedWidget = url;

							var embedContent = generateEmbedContent(url, content);

							editor.insertHtml(embedContent);
						} else {
							showError(AlloyEditor.Strings.platformNotSupported);
						}
					} else {
						showError(AlloyEditor.Strings.enterValidUrl);
					}
				}
			});

			editor.widgets.add('embedurl', {
				draggable: false,
				mask: true,
				requiredContent: 'div[data-embed-url]',

				data: function data(event) {
					var instance = this;

					// Sync dimensions and alignment with editor wrapper

					var stylesJSON = instance.element.getAttribute('data-styles');

					var styles = stylesJSON ? JSON.parse(stylesJSON) : null;

					if (!styles) {
						var iframe = instance.wrapper.findOne('iframe');

						var bounds = instance.wrapper.$.getBoundingClientRect();
						var width = iframe.getAttribute('width');

						var pwidth = width >= bounds.width ? 100 : Math.round(width / bounds.width * 100);

						styles = {
							width: pwidth + '%'
						};
					}

					instance.wrapper.setAttribute('style', CKEDITOR.tools.writeCssText(styles));

					if (editor._selectEmbedWidget === event.data.url) {
						selectWidget(editor);
					}
				},
				downcast: function downcast(widget) {
					var embedContent = widget.children[0];

					embedContent.attributes.class = 'embed-responsive embed-responsive-16by9';
					embedContent.attributes.style = CKEDITOR.tools.writeCssText(widget.parent.styles);

					return embedContent;
				},
				upcast: function upcast(element, data) {
					var embedWidgetUpcastFn = editor.config.embedWidgetUpcastFn || defaultEmbedWidgetUpcastFn;

					return embedWidgetUpcastFn(element, data);
				}
			});

			window.addEventListener('resize', function () {
				resizer.hide();
				selectWidget(editor);
			}, false);

			editor.on('selectionChange', function (_event) {
				var selection = editor.getSelection();

				if (selection) {
					var element = selection.getSelectedElement();

					if (element) {
						var widgetElement = element.findOne('[data-widget="embedurl"]');

						if (widgetElement) {
							var scrollPosition = new CKEDITOR.dom.window(window).getScrollPosition();

							var region = element.getClientRect();

							region.direction = CKEDITOR.SELECTION_BOTTOM_TO_TOP;
							region.left -= scrollPosition.x;
							region.top += scrollPosition.y;

							editor.fire('editorInteraction', {
								nativeEvent: {},
								selectionData: {
									element: widgetElement,
									region: region
								}
							});
						}

						var imageElement = element.findOne('img.cke_widget_mask');

						if (imageElement) {
							resizer.show(imageElement.$);
						}
					} else {
						resizer.hide();
					}
				}
			});

			editor.on('destroy', function () {
				var resizeElement = document.getElementById('ckimgrsz');

				if (resizeElement) {
					resizeElement.remove();
				}

				document.removeEventListener('mousedown', mouseDownListener);
			});

			editor.on('blur', function () {
				resizer.hide();
			});

			editor.filter.addElementCallback(function (element) {
				if ('data-embed-url' in element.attributes) {
					return CKEDITOR.FILTER_SKIP_TREE;
				}
			});

			var mouseDownListener = function mouseDownListener(event) {
				var result = getSelectedElement(editor);

				currentAlignment = result.alignment;
				currentElement = result.element;

				if (resizer.isHandle(event.target)) {
					resizer.initDrag(event);
				}
			};

			resizer = new _Resizer2.default(editor, {
				onComplete: function onComplete(element, width, height) {
					resizeElement(element, width, height);

					if (currentAlignment && currentElement) {
						setEmbedAlignment(currentElement, currentAlignment);
					}
					selectWidget(editor);
				}
			});

			document.addEventListener('mousedown', mouseDownListener, false);
		},

		afterInit: function afterInit(editor) {
			ALIGN_VALUES.forEach(function (alignValue) {
				var command = editor.getCommand('justify' + alignValue);

				if (command) {
					command.on('exec', function (event) {
						var selectedElement = editor.getSelection().getSelectedElement();

						if (selectedElement && selectedElement.getAttribute('data-cke-widget-wrapper')) {
							var selectedEmbed = selectedElement.findOne('[data-widget="embedurl"] [data-embed-id]');

							if (selectedEmbed) {
								var embedAlignment = getEmbedAlignment(selectedElement);

								if (embedAlignment === alignValue) {
									removeEmbedAlignment(selectedElement, alignValue);
								} else {
									setEmbedAlignment(selectedElement, alignValue);
								}

								currentElement = selectedElement;
								currentAlignment = getEmbedAlignment(selectedElement);

								var imageElement = selectedElement.findOne('img');

								if (imageElement) {
									resizer.show(imageElement.$);
								}

								event.cancel();

								var elementPath = new CKEDITOR.dom.elementPath(selectedElement);

								ALIGN_VALUES.forEach(function (alignValue) {
									var command = editor.getCommand('justify' + alignValue);

									if (command) {
										command.refresh(editor, elementPath);
									}
								});
							}
						}
					});

					command.on('refresh', function (event) {
						var lastElement = event.data.path.lastElement;

						if (lastElement && lastElement.getAttribute('data-cke-widget-wrapper') && lastElement.findOne('[data-widget] [data-embed-id]')) {
							var embedAlignment = getEmbedAlignment(lastElement);

							event.sender.setState(embedAlignment === alignValue ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF);

							event.cancel();
						}
					});
				}
			});
		}
	});
}

exports.default = CKEDITOR.plugins.get('embedurl');

/***/ }),

/***/ "./src/plugins/imagealignment.js":
/*!***************************************!*\
  !*** ./src/plugins/imagealignment.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _selectionTest = __webpack_require__(/*! ../selections/selection-test.js */ "./src/selections/selection-test.js");

var _selectionTest2 = _interopRequireDefault(_selectionTest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_imagealignment')) {
		return;
	}

	/**
  * Enum for supported image alignments
  * @type {Object}
  */
	var IMAGE_ALIGNMENT = {
		CENTER: 'center',
		LEFT: 'left',
		RIGHT: 'right'
	};

	/**
  * Enum values for supported image alignments
  * @type {Array}
  */
	var ALIGN_VALUES = [IMAGE_ALIGNMENT.LEFT, IMAGE_ALIGNMENT.RIGHT, IMAGE_ALIGNMENT.CENTER];

	/**
  * Necessary styles for the center alignment
  * @type {Array.<Object>}
  */
	var CENTERED_IMAGE_STYLE = [{
		name: 'display',
		value: 'block'
	}, {
		name: 'margin-left',
		value: 'auto'
	}, {
		name: 'margin-right',
		value: 'auto'
	}];

	/**
  * Retrieves the alignment value of an image.
  *
  * @param {CKEDITOR.dom.element} image The image element
  * @return {String} The alignment value
  */
	var getImageAlignment = function getImageAlignment(image) {
		var imageAlignment = image.getStyle('float');

		if (!imageAlignment || imageAlignment === 'inherit' || imageAlignment === 'none') {
			imageAlignment = image.getAttribute('align');
		}

		if (!imageAlignment) {
			var centeredImage = CENTERED_IMAGE_STYLE.every(function (style) {
				var styleCheck = image.getStyle(style.name) === style.value;

				if (!styleCheck && style.vendorPrefixes) {
					styleCheck = style.vendorPrefixes.some(function (vendorPrefix) {
						return image.getStyle(vendorPrefix + style.name) === style.value;
					});
				}

				return styleCheck;
			});

			if (!imageAlignment) {
				var imageContainer = image.$.parentNode;

				if (imageContainer.style.textAlign == IMAGE_ALIGNMENT.CENTER) {
					CENTERED_IMAGE_STYLE.forEach(function (style) {
						image.setStyle(style.name, style.value);

						if (style.vendorPrefixes) {
							style.vendorPrefixes.forEach(function (vendorPrefix) {
								image.setStyle(vendorPrefix + style.name, style.value);
							});
						}
					});
					centeredImage = true;
				}
			}

			imageAlignment = centeredImage ? IMAGE_ALIGNMENT.CENTER : null;
		}

		return imageAlignment;
	};

	/**
  * Removes the alignment value of an image
  *
  * @param {CKEDITOR.dom.element} image The image element
  * @param {String} imageAlignment The image alignment value to be removed
  */
	var removeImageAlignment = function removeImageAlignment(image, imageAlignment) {
		if (imageAlignment === IMAGE_ALIGNMENT.LEFT || imageAlignment === IMAGE_ALIGNMENT.RIGHT) {
			image.removeStyle('float');

			if (imageAlignment === getImageAlignment(image)) {
				image.removeAttribute('align');
			}
		} else if (imageAlignment === IMAGE_ALIGNMENT.CENTER) {
			CENTERED_IMAGE_STYLE.forEach(function (style) {
				image.removeStyle(style.name);

				if (style.vendorPrefixes) {
					style.vendorPrefixes.forEach(function (vendorPrefix) {
						image.removeStyle(vendorPrefix + style.name);
					});
				}
			});

			var imageContainer = image.$.parentNode;

			if (imageContainer.style.textAlign == IMAGE_ALIGNMENT.CENTER) {
				imageContainer.style.textAlign = '';
			}
		}
	};

	/**
  * Sets the alignment value of an image
  *
  * @param {CKEDITOR.dom.element} image The image element
  * @param {String} imageAlignment The image alignment value to be set
  */
	var setImageAlignment = function setImageAlignment(image, imageAlignment) {
		removeImageAlignment(image, getImageAlignment(image));

		if (imageAlignment === IMAGE_ALIGNMENT.LEFT || imageAlignment === IMAGE_ALIGNMENT.RIGHT) {
			image.setStyle('float', imageAlignment);
		} else if (imageAlignment === IMAGE_ALIGNMENT.CENTER) {
			CENTERED_IMAGE_STYLE.forEach(function (style) {
				image.setStyle(style.name, style.value);

				if (style.vendorPrefixes) {
					style.vendorPrefixes.forEach(function (vendorPrefix) {
						image.setStyle(vendorPrefix + style.name, style.value);
					});
				}
			});

			var imageContainer = image.$.parentNode;

			imageContainer.style.textAlign = IMAGE_ALIGNMENT.CENTER;
		}
	};

	/**
  * CKEditor plugin which modifies the justify commands to properly align images. This
  * plugin is an excerpt of CKEditor's original image one that can be found at
  * https://github.com/ckeditor/ckeditor-dev/blob/master/plugins/image/plugin.js
  *
  * @class CKEDITOR.plugins.ae_imagealignment
  */
	CKEDITOR.plugins.add('ae_imagealignment', {
		/**
   * Initialization of the plugin, part of CKEditor plugin lifecycle.
   * The function registers a 'paste' event on the editing area.
   *
   * @method afterInit
   * @param {Object} editor The current editor instance
   */
		afterInit: function afterInit(editor) {
			var self = this;

			ALIGN_VALUES.forEach(function (value) {
				var command = editor.getCommand('justify' + value);

				if (command) {
					command.on('exec', function (event) {
						var selectionData = editor.getSelectionData();

						if (selectionData && _selectionTest2.default.image({
							data: { selectionData: selectionData }
						})) {
							var image = selectionData.element;

							var imageAlignment = getImageAlignment(image);

							if (imageAlignment === value) {
								removeImageAlignment(image, value);
							} else {
								setImageAlignment(image, value);
							}

							event.cancel();

							self.refreshCommands(editor, new CKEDITOR.dom.elementPath(image));
						}
					});

					command.on('refresh', function (event) {
						var selectionData = {
							element: event.data.path.lastElement
						};

						if (_selectionTest2.default.image({
							data: { selectionData: selectionData }
						})) {
							var imageAlignment = getImageAlignment(selectionData.element);

							this.setState(imageAlignment === value ? CKEDITOR.TRISTATE_ON : CKEDITOR.TRISTATE_OFF);

							event.cancel();
						}
					});
				}
			});
		},

		/**
   * Forces a refresh of the modified justify commands. This is needed because the applied changes
   * do not modify the selection, so the refresh is never triggered and the UI does not update
   * properly until the next selectionChange event.
   *
   * @param {CKEDITOR.editor} editor The editor instance
   * @param {CKEDITOR.dom.elementPath} elementPath The path of the selected image
   */
		refreshCommands: function refreshCommands(editor, elementPath) {
			ALIGN_VALUES.forEach(function (value) {
				var command = editor.getCommand('justify' + value);

				if (command) {
					command.refresh(editor, elementPath);
				}
			});
		}
	});
})();

/***/ }),

/***/ "./src/plugins/index.js":
/*!******************************!*\
  !*** ./src/plugins/index.js ***!
  \******************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.tabletools = exports.tableresize = exports.selectionkeystrokes = exports.placeholder = exports.pasteimages = exports.imagealignment = exports.embedurl = exports.embed = exports.dragresizeie = exports.dragresize = exports.autolist = exports.autolink = exports.addimages = undefined;

var _addimages = __webpack_require__(/*! ./addimages */ "./src/plugins/addimages.js");

var _addimages2 = _interopRequireDefault(_addimages);

var _autolink = __webpack_require__(/*! ./autolink */ "./src/plugins/autolink.js");

var _autolink2 = _interopRequireDefault(_autolink);

var _autolist = __webpack_require__(/*! ./autolist */ "./src/plugins/autolist.js");

var _autolist2 = _interopRequireDefault(_autolist);

var _dragresize = __webpack_require__(/*! ./dragresize */ "./src/plugins/dragresize.js");

var _dragresize2 = _interopRequireDefault(_dragresize);

var _dragresize_ie = __webpack_require__(/*! ./dragresize_ie */ "./src/plugins/dragresize_ie.js");

var _dragresize_ie2 = _interopRequireDefault(_dragresize_ie);

var _dragresize_ie3 = __webpack_require__(/*! ./dragresize_ie11 */ "./src/plugins/dragresize_ie11.js");

var _dragresize_ie4 = _interopRequireDefault(_dragresize_ie3);

var _embed = __webpack_require__(/*! ./embed */ "./src/plugins/embed.js");

var _embed2 = _interopRequireDefault(_embed);

var _embedurl = __webpack_require__(/*! ./embedurl */ "./src/plugins/embedurl.js");

var _embedurl2 = _interopRequireDefault(_embedurl);

var _imagealignment = __webpack_require__(/*! ./imagealignment */ "./src/plugins/imagealignment.js");

var _imagealignment2 = _interopRequireDefault(_imagealignment);

var _pasteimages = __webpack_require__(/*! ./pasteimages */ "./src/plugins/pasteimages.js");

var _pasteimages2 = _interopRequireDefault(_pasteimages);

var _placeholder = __webpack_require__(/*! ./placeholder */ "./src/plugins/placeholder.js");

var _placeholder2 = _interopRequireDefault(_placeholder);

var _selectionkeystrokes = __webpack_require__(/*! ./selectionkeystrokes */ "./src/plugins/selectionkeystrokes.js");

var _selectionkeystrokes2 = _interopRequireDefault(_selectionkeystrokes);

var _tableresize = __webpack_require__(/*! ./tableresize */ "./src/plugins/tableresize.js");

var _tableresize2 = _interopRequireDefault(_tableresize);

var _tabletools = __webpack_require__(/*! ./tabletools */ "./src/plugins/tabletools.js");

var _tabletools2 = _interopRequireDefault(_tabletools);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.addimages = _addimages2.default;
exports.autolink = _autolink2.default;
exports.autolist = _autolist2.default;
exports.dragresize = _dragresize2.default;
exports.dragresizeie = _dragresize_ie2.default;
exports.embed = _embed2.default;
exports.embedurl = _embedurl2.default;
exports.imagealignment = _imagealignment2.default;
exports.pasteimages = _pasteimages2.default;
exports.placeholder = _placeholder2.default;
exports.selectionkeystrokes = _selectionkeystrokes2.default;
exports.tableresize = _tableresize2.default;
exports.tabletools = _tabletools2.default;

/***/ }),

/***/ "./src/plugins/pasteimages.js":
/*!************************************!*\
  !*** ./src/plugins/pasteimages.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_pasteimages')) {
		return;
	}

	/**
  * CKEditor plugin which allows pasting images directly into the editable area. The image will be encoded
  * as Data URI. An event `beforeImageAdd` will be fired with the list of pasted images. If any of the listeners
  * returns `false` or cancels the event, the images won't be added to the content. Otherwise,
  * an event `imageAdd` will be fired with the inserted element into the editable area.
  *
  * @class CKEDITOR.plugins.ae_pasteimages
  */

	/**
  * Fired before adding images to the editor.
  * @event beforeImageAdd
  * @param {Array} imageFiles Array of image files
  */

	/**
  * Fired when an image is being added to the editor successfully.
  *
  * @event imageAdd
  * @param {CKEDITOR.dom.element} el The created image with src as Data URI
  * @param {File} file The image file
  */

	CKEDITOR.plugins.add('ae_pasteimages', {
		/**
   * Initialization of the plugin, part of CKEditor plugin lifecycle.
   * The function registers a 'paste' event on the editing area.
   *
   * @method init
   * @param {Object} editor The current editor instance
   */
		init: function init(editor) {
			editor.once('contentDom', function () {
				var editable = editor.editable();

				editable.attachListener(editable, 'paste', this._onPaste, this, {
					editor: editor
				});
			}.bind(this));
		},

		/**
   * The function creates an img element with src the image data as Data URI.
   * Then, it fires an 'imageAdd' event via CKEditor's event system. The passed
   * params will be:
   * - `el` - the created img element
   * - `file` - the original pasted data
   *
   * @method _onPaste
   * @protected
   * @param {CKEDITOR.dom.event} event A `paste` event, as received natively from CKEditor
   */
		_onPaste: function _onPaste(event) {
			if (event.data.$.clipboardData) {
				var pastedData = event.data.$.clipboardData.items[0];
				var editor = event.listenerData.editor;

				if (pastedData.type.indexOf('image') === 0) {
					var reader = new FileReader();
					var imageFile = pastedData.getAsFile();

					reader.onload = function (event) {
						var result = editor.fire('beforeImageAdd', {
							imageFiles: imageFile
						});

						if (result) {
							var el = CKEDITOR.dom.element.createFromHtml('<img src="' + event.target.result + '">');

							editor.insertElement(el);

							var imageData = {
								el: el,
								file: imageFile
							};

							editor.fire('imageAdd', imageData);
						}
					};

					reader.readAsDataURL(imageFile);
				}
			}
		}
	});
})();

/***/ }),

/***/ "./src/plugins/placeholder.js":
/*!************************************!*\
  !*** ./src/plugins/placeholder.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_placeholder')) {
		return;
	}

	/**
  * CKEDITOR enterMode config set the behavior of paragraphs
  * When the content is empty CKEDITOR keeps the enterMode string
  * into the content
  * @property
  * @type {string}
  */
	var brFiller = CKEDITOR.env.needsBrFiller ? '<br>' : '';

	var enterModeEmptyValue = {
		1: ['<p>' + brFiller + '</p>'],
		2: ['', ' ', brFiller],
		3: ['<div>' + brFiller + '</div>']
	};

	/**
  * CKEditor plugin which allows adding a placeholder to the editor. In this case, if there
  * is no content to the editor, there will be hint to the user.
  *
  * @class CKEDITOR.plugins.ae_placeholder
  */

	/**
  * Specifies the placeholder class which have to be aded to editor when editor is not focused.
  *
  * @attribute placeholderClass
  * @default ae_placeholder
  * @type String
  */

	CKEDITOR.plugins.add('ae_placeholder', {
		/**
   * Initialization of the plugin, part of CKEditor plugin lifecycle.
   * The function registers a 'blur' and 'contentDom' event listeners.
   *
   * @method init
   * @param {Object} editor The current editor instance
   */
		init: function init(editor) {
			editor.on('blur', this._checkEmptyData, this);
			editor.on('change', this._checkEmptyData, this);
			editor.on('focus', this._removePlaceholderClass, this);
			editor.once('contentDom', this._checkEmptyData, this);
		},

		/**
   * Removes any data from the content and adds a class,
   * specified by the "placeholderClass" config attribute.
   *
   * @protected
   * @method _checkEmptyData
   * @param {CKEDITOR.dom.event} editor event, fired from CKEditor
   */
		_checkEmptyData: function _checkEmptyData(event) {
			var editor = event.editor;

			var editableNode = editor.editable();

			var innerHtml = editableNode.$.innerHTML.trim();

			var isEmpty = enterModeEmptyValue[editor.config.enterMode].some(function (element) {
				return innerHtml === element;
			});

			if (isEmpty) {
				editableNode.addClass(editor.config.placeholderClass);
			} else {
				editableNode.removeClass(editor.config.placeholderClass);
			}
		},

		/**
             * Remove placeholder class when input is focused
             *
             * @protected
             * @method _removePlaceholderClass
             + @param {CKEDITOR.dom.event} editor event, fired from CKEditor
             */
		_removePlaceholderClass: function _removePlaceholderClass(event) {
			var editor = event.editor;

			var editorNode = new CKEDITOR.dom.element(editor.element.$);

			editorNode.removeClass(editor.config.placeholderClass);
		}
	});
})();

/***/ }),

/***/ "./src/plugins/selectionkeystrokes.js":
/*!********************************************!*\
  !*** ./src/plugins/selectionkeystrokes.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_selectionkeystrokes')) {
		return;
	}

	/**
  * CKEditor plugin that simulates editor interaction events based on manual keystrokes. This
  * can be used to trigger different reactions in the editor.
  *
  * @class CKEDITOR.plugins.ae_selectionkeystrokes
  */
	CKEDITOR.plugins.add('ae_selectionkeystrokes', {
		requires: 'ae_selectionregion',

		/**
   * Initialization of the plugin, part of CKEditor plugin lifecycle.
   * The function adds a command to the editor for every defined selectionKeystroke
   * in the configuration and maps it to the specified keystroke.
   *
   * @method init
   * @param {Object} editor The current editor instance
   */
		init: function init(editor) {
			if (editor.config.selectionKeystrokes) {
				editor.config.selectionKeystrokes.forEach(function (selectionKeystroke) {
					var command = new CKEDITOR.command(editor, {
						exec: function exec(editor) {
							editor.fire('editorInteraction', {
								manualSelection: selectionKeystroke.selection,
								nativeEvent: {},
								selectionData: editor.getSelectionData()
							});
						}
					});

					var commandName = 'selectionKeystroke' + selectionKeystroke.selection;

					editor.addCommand(commandName, command);
					editor.setKeystroke(selectionKeystroke.keys, commandName);
				});
			}
		}
	});
})();

/***/ }),

/***/ "./src/plugins/tableresize.js":
/*!************************************!*\
  !*** ./src/plugins/tableresize.js ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @license Copyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or http://ckeditor.com/license
 */

(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_tableresize')) {
		return;
	}

	var pxUnit = CKEDITOR.tools.cssLength;

	function getWidth(el) {
		return CKEDITOR.env.ie ? el.$.clientWidth : parseInt(el.getComputedStyle('width'), 10);
	}

	function getBorderWidth(element, side) {
		var computed = element.getComputedStyle('border-' + side + '-width');

		var borderMap = {
			thin: '0px',
			medium: '1px',
			thick: '2px'
		};

		if (computed.indexOf('px') < 0) {
			// look up keywords
			if (computed in borderMap && element.getComputedStyle('border-style') != 'none') {
				computed = borderMap[computed];
			} else {
				computed = 0;
			}
		}

		return parseInt(computed, 10);
	}

	// Gets the table row that contains the most columns.
	function getMasterPillarRow(table) {
		var $rows = table.$.rows;

		var maxCells = 0;

		var cellsCount = void 0;

		var $elected = void 0;

		var $tr = void 0;

		for (var i = 0, len = $rows.length; i < len; i++) {
			$tr = $rows[i];
			cellsCount = $tr.cells.length;

			if (cellsCount > maxCells) {
				maxCells = cellsCount;
				$elected = $tr;
			}
		}

		return $elected;
	}

	function buildTableColumnPillars(table) {
		var pillars = [];

		var pillarIndex = -1;

		var rtl = table.getComputedStyle('direction') === 'rtl';

		// Get the raw row element that cointains the most columns.
		var $tr = getMasterPillarRow(table);

		// Get the tbody element and position, which will be used to set the
		// top and bottom boundaries.
		var tbody = new CKEDITOR.dom.element(table.$.tBodies[0]);

		var tbodyPosition = tbody.getDocumentPosition();

		// Loop thorugh all cells, building pillars after each one of them.
		for (var i = 0, len = $tr.cells.length; i < len; i++) {
			// Both the current cell and the successive one will be used in the
			// pillar size calculation.
			var td = new CKEDITOR.dom.element($tr.cells[i]);

			var nextTd = $tr.cells[i + 1] && new CKEDITOR.dom.element($tr.cells[i + 1]);

			pillarIndex += td.$.colSpan || 1;

			// Calculate the pillar boundary positions.
			var pillarLeft = void 0;
			var pillarRight = void 0;
			var pillarWidth = void 0;

			var x = td.getDocumentPosition().x;

			// Calculate positions based on the current cell.
			rtl ? pillarRight = x + getBorderWidth(td, 'left') : pillarLeft = x + td.$.offsetWidth - getBorderWidth(td, 'right');

			// Calculate positions based on the next cell, if available.
			if (nextTd) {
				x = nextTd.getDocumentPosition().x;

				rtl ? pillarLeft = x + nextTd.$.offsetWidth - getBorderWidth(nextTd, 'right') : pillarRight = x + getBorderWidth(nextTd, 'left');
			}
			// Otherwise calculate positions based on the table (for last cell).
			else {
					x = table.getDocumentPosition().x;

					rtl ? pillarLeft = x : pillarRight = x + table.$.offsetWidth;
				}

			pillarWidth = Math.max(pillarRight - pillarLeft, 4);

			// The pillar should reflects exactly the shape of the hovered
			// column border line.
			pillars.push({
				table: table,
				index: pillarIndex,
				x: pillarLeft,
				y: tbodyPosition.y,
				width: pillarWidth,
				height: tbody.$.offsetHeight,
				rtl: rtl
			});
		}

		return pillars;
	}

	function getPillarAtPosition(pillars, positionX) {
		for (var i = 0, len = pillars.length; i < len; i++) {
			var pillar = pillars[i];

			if (positionX >= pillar.x && positionX <= pillar.x + pillar.width) {
				return pillar;
			}
		}

		return null;
	}

	function cancel(evt) {
		(evt.data || evt).preventDefault();
	}

	function ColumnResizer(editor, pillar) {
		var document = void 0;
		var isResizing = void 0;
		var move = void 0;
		var resizer = void 0;
		var resizing = void 0;
		var startOffset = void 0;
		var currentShift = void 0;

		var leftSideCells = void 0;

		var rightSideCells = void 0;

		var leftShiftBoundary = void 0;

		var rightShiftBoundary = void 0;

		function detach() {
			resizer.removeListener('mouseup', onMouseUp);
			resizer.removeListener('mousedown', onMouseDown);
			resizer.removeListener('mousemove', onMouseMove);
		}

		function resizeStart() {
			// Before starting to resize, figure out which cells to change
			// and the boundaries of this resizing shift.

			var columnIndex = pillar.index;

			var map = CKEDITOR.tools.buildTableMap(pillar.table);

			var leftColumnCells = [];

			var rightColumnCells = [];

			var leftMinSize = Number.MAX_VALUE;

			var rightMinSize = leftMinSize;

			var rtl = pillar.rtl;

			for (var i = 0, len = map.length; i < len; i++) {
				var row = map[i];

				var leftCell = row[columnIndex + (rtl ? 1 : 0)];

				var rightCell = row[columnIndex + (rtl ? 0 : 1)];

				leftCell = leftCell && new CKEDITOR.dom.element(leftCell);
				rightCell = rightCell && new CKEDITOR.dom.element(rightCell);

				if (!leftCell || !rightCell || !leftCell.equals(rightCell)) {
					leftCell && (leftMinSize = Math.min(leftMinSize, getWidth(leftCell)));
					rightCell && (rightMinSize = Math.min(rightMinSize, getWidth(rightCell)));

					leftColumnCells.push(leftCell);
					rightColumnCells.push(rightCell);
				}
			}

			// Cache the list of cells to be resized.
			leftSideCells = leftColumnCells;
			rightSideCells = rightColumnCells;

			// Cache the resize limit boundaries.
			leftShiftBoundary = pillar.x - leftMinSize;
			rightShiftBoundary = pillar.x + rightMinSize;

			resizer.setOpacity(0.5);
			startOffset = parseInt(resizer.getStyle('left'), 10);
			currentShift = 0;
			resizing = 1;

			resizer.on('mousemove', onMouseMove);

			// Prevent the native drag behavior otherwise 'mousemove' won't fire.
			document.on('dragstart', cancel);
		}

		function resizeEnd() {
			resizing = 0;

			resizer.setOpacity(0);

			currentShift && resizeColumn();

			var table = pillar.table;
			setTimeout(function () {
				table.removeCustomData('_cke_table_pillars');
			}, 0);

			document.removeListener('dragstart', cancel);
		}

		function resizeColumn() {
			var _this = this;

			var rtl = pillar.rtl;

			var cellsCount = rtl ? rightSideCells.length : leftSideCells.length;

			// Perform the actual resize to table cells, only for those by side of the pillar.

			var _loop = function _loop(i) {
				var leftCell = leftSideCells[i];

				var rightCell = rightSideCells[i];

				var table = pillar.table;

				// Defer the resizing to avoid any interference among cells.
				CKEDITOR.tools.setTimeout(function (leftCell, leftOldWidth, rightCell, rightOldWidth, tableWidth, sizeShift) {
					// 1px is the minimum valid width (#11626).
					leftCell && leftCell.setStyle('width', pxUnit(Math.max(leftOldWidth + sizeShift, 1)));
					rightCell && rightCell.setStyle('width', pxUnit(Math.max(rightOldWidth - sizeShift, 1)));

					// If we're in the last cell, we need to resize the table as well
					if (tableWidth) {
						table.setStyle('width', pxUnit(tableWidth + sizeShift * (rtl ? -1 : 1)));
					}
				}, 0, _this, [leftCell, leftCell && getWidth(leftCell), rightCell, rightCell && getWidth(rightCell), (!leftCell || !rightCell) && getWidth(table) + getBorderWidth(table, 'left') + getBorderWidth(table, 'right'), currentShift]);
			};

			for (var i = 0; i < cellsCount; i++) {
				_loop(i);
			}
		}

		function onMouseDown(evt) {
			cancel(evt);

			resizeStart();

			document.on('mouseup', onMouseUp, this);
		}

		function onMouseUp(evt) {
			evt.removeListener();

			resizeEnd();
		}

		function onMouseMove(evt) {
			move(evt.data.getPageOffset().x);
		}

		document = editor.document;

		resizer = CKEDITOR.dom.element.createFromHtml('<div data-cke-temp=1 contenteditable=false unselectable=on ' + 'style="position:absolute;cursor:col-resize;filter:alpha(opacity=0);opacity:0;' + 'padding:0;background-color:#004;background-image:none;border:0px none;z-index:10"></div>', document);

		// Clean DOM when editor is destroyed.
		editor.on('destroy', function () {
			detach();

			resizer.remove();
		});

		// Place the resizer after body to prevent it
		// from being editable.
		document.getDocumentElement().append(resizer);

		resizer.setStyles({
			width: pxUnit(pillar.width),
			height: pxUnit(pillar.height),
			left: pxUnit(pillar.x),
			top: pxUnit(pillar.y)
		});

		resizer.on('mousedown', onMouseDown, this);

		document.getBody().setStyle('cursor', 'col-resize');

		// Display the resizer to receive events but don't show it,
		// only change the cursor to resizable shape.
		resizer.show();

		move = this.move = function (posX) {
			var resizerNewPosition = posX - Math.round(resizer.$.offsetWidth / 2);

			if (isResizing) {
				if (resizerNewPosition === leftShiftBoundary || resizerNewPosition === rightShiftBoundary) {
					return;
				}

				resizerNewPosition = Math.max(resizerNewPosition, leftShiftBoundary);
				resizerNewPosition = Math.min(resizerNewPosition, rightShiftBoundary);

				currentShift = resizerNewPosition - startOffset;
			}

			resizer.setStyle('left', pxUnit(resizerNewPosition));
		};

		this.destroy = function () {
			detach();

			document.getBody().setStyle('cursor', 'auto');

			resizer.remove();
		};

		isResizing = this.isResizing = function () {
			return resizing;
		};
	}

	function clearPillarsCache(evt) {
		var target = evt.data.getTarget();

		if (evt.name === 'mouseout') {
			// Bypass interal mouse move.
			if (!target.is('table')) {
				return;
			}

			var dest = new CKEDITOR.dom.element(evt.data.$.relatedTarget || evt.data.$.toElement);
			while (dest && dest.$ && !dest.equals(target) && !dest.is('body')) {
				dest = dest.getParent();
			}
			if (!dest || dest.equals(target)) {
				return;
			}
		}

		target.getAscendant('table', 1).removeCustomData('_cke_table_pillars');
		evt.removeListener();
	}

	CKEDITOR.plugins.add('ae_tableresize', {
		requires: 'ae_tabletools',

		init: function init(editor) {
			editor.on('contentDom', function () {
				var resizer = void 0;

				var editable = editor.editable();

				// In Classic editor it is better to use document
				// instead of editable so event will work below body.
				editable.attachListener(editable.isInline() ? editable : editor.document, 'mousemove', function (evt) {
					evt = evt.data;

					var target = evt.getTarget();

					// FF may return document and IE8 some UFO (object with no nodeType property...)
					// instead of an element (#11823).
					if (target.type !== CKEDITOR.NODE_ELEMENT) {
						return;
					}

					var pageX = evt.getPageOffset().x;

					// If we're already attached to a pillar, simply move the
					// resizer.
					if (resizer) {
						if (resizer.isResizing()) {
							resizer.move(pageX);

							cancel(evt);

							return;
						} else {
							resizer.destroy();

							resizer = null;
						}
					}

					// Considering table, tr, td, tbody but nothing else.
					var table = void 0;
					var pillars = void 0;

					if (!target.is('table') && !target.getAscendant('tbody', 1)) {
						return;
					}

					table = target.getAscendant('table', 1);

					// Make sure the table we found is inside the container
					// (eg. we should not use tables the editor is embedded within)
					if (!editor.editable().contains(table)) {
						return;
					}

					if (!(pillars = table.getCustomData('_cke_table_pillars'))) {
						// Cache table pillars calculation result.
						table.setCustomData('_cke_table_pillars', pillars = buildTableColumnPillars(table));
						table.on('mouseout', clearPillarsCache);
						table.on('mousedown', clearPillarsCache);
					}

					var pillar = getPillarAtPosition(pillars, pageX);

					if (pillar) {
						resizer = new ColumnResizer(editor, pillar);
					}
				});
			});
		}
	});
})();

/***/ }),

/***/ "./src/plugins/tabletools.js":
/*!***********************************!*\
  !*** ./src/plugins/tabletools.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * @license Copyright (c) 2003-2015, CKSource - Frederico Knabben. All rights reserved.
 * For licensing, see LICENSE.md or http://ckeditor.com/license
 */

(function () {
	'use strict';

	if (CKEDITOR.plugins.get('ae_tabletools')) {
		return;
	}

	var cellNodeRegex = /^(?:td|th)$/;

	function getSelectedCells(selection) {
		var ranges = selection.getRanges();
		var retval = [];
		var database = {};

		function moveOutOfCellGuard(node) {
			// Apply to the first cell only.
			if (retval.length > 0) return;

			// If we are exiting from the first </td>, then the td should definitely be
			// included.
			if (node.type == CKEDITOR.NODE_ELEMENT && cellNodeRegex.test(node.getName()) && !node.getCustomData('selected_cell')) {
				CKEDITOR.dom.element.setMarker(database, node, 'selected_cell', true);
				retval.push(node);
			}
		}

		for (var i = 0; i < ranges.length; i++) {
			var range = ranges[i];

			if (range.collapsed) {
				// Walker does not handle collapsed ranges yet - fall back to old API.
				var startNode = range.getCommonAncestor();
				var nearestCell = startNode.getAscendant('td', true) || startNode.getAscendant('th', true);
				if (nearestCell) retval.push(nearestCell);
			} else {
				var walker = new CKEDITOR.dom.walker(range);
				var node = void 0;
				walker.guard = moveOutOfCellGuard;

				while (node = walker.next()) {
					// If may be possible for us to have a range like this:
					// <td>^1</td><td>^2</td>
					// The 2nd td shouldn't be included.
					//
					// So we have to take care to include a td we've entered only when we've
					// walked into its children.

					if (node.type != CKEDITOR.NODE_ELEMENT || !node.is(CKEDITOR.dtd.table)) {
						var parent = node.getAscendant('td', true) || node.getAscendant('th', true);
						if (parent && !parent.getCustomData('selected_cell')) {
							CKEDITOR.dom.element.setMarker(database, parent, 'selected_cell', true);
							retval.push(parent);
						}
					}
				}
			}
		}

		CKEDITOR.dom.element.clearAllMarkers(database);

		return retval;
	}

	function getFocusElementAfterDelCells(cellsToDelete) {
		var i = 0;

		var last = cellsToDelete.length - 1;

		var database = {};

		var cell = void 0;

		var focusedCell = void 0;

		var tr = void 0;

		while (cell = cellsToDelete[i++]) {
			CKEDITOR.dom.element.setMarker(database, cell, 'delete_cell', true);
		} // 1.first we check left or right side focusable cell row by row;
		i = 0;
		while (cell = cellsToDelete[i++]) {
			if ((focusedCell = cell.getPrevious()) && !focusedCell.getCustomData('delete_cell') || (focusedCell = cell.getNext()) && !focusedCell.getCustomData('delete_cell')) {
				CKEDITOR.dom.element.clearAllMarkers(database);
				return focusedCell;
			}
		}

		CKEDITOR.dom.element.clearAllMarkers(database);

		// 2. then we check the toppest row (outside the selection area square) focusable cell
		tr = cellsToDelete[0].getParent();
		if (tr = tr.getPrevious()) return tr.getLast();

		// 3. last we check the lowerest  row focusable cell
		tr = cellsToDelete[last].getParent();
		if (tr = tr.getNext()) return tr.getChild(0);

		return null;
	}

	function insertRow(selection, insertBefore) {
		var cells = getSelectedCells(selection);

		var firstCell = cells[0];

		var table = firstCell.getAscendant('table');

		var doc = firstCell.getDocument();

		var startRow = cells[0].getParent();

		var startRowIndex = startRow.$.rowIndex;

		var lastCell = cells[cells.length - 1];

		var endRowIndex = lastCell.getParent().$.rowIndex + lastCell.$.rowSpan - 1;

		var endRow = new CKEDITOR.dom.element(table.$.rows[endRowIndex]);

		var rowIndex = insertBefore ? startRowIndex : endRowIndex;

		var row = insertBefore ? startRow : endRow;

		var map = CKEDITOR.tools.buildTableMap(table);

		var cloneRow = map[rowIndex];

		var nextRow = insertBefore ? map[rowIndex - 1] : map[rowIndex + 1];

		var width = map[0].length;

		var newRow = doc.createElement('tr');
		for (var i = 0; cloneRow[i] && i < width; i++) {
			var cell = void 0;
			// Check whether there's a spanning row here, do not break it.
			if (cloneRow[i].rowSpan > 1 && nextRow && cloneRow[i] == nextRow[i]) {
				cell = cloneRow[i];
				cell.rowSpan += 1;
			} else {
				cell = new CKEDITOR.dom.element(cloneRow[i]).clone();
				cell.removeAttribute('rowSpan');
				cell.appendBogus();
				newRow.append(cell);
				cell = cell.$;
			}

			i += cell.colSpan - 1;
		}

		insertBefore ? newRow.insertBefore(row) : newRow.insertAfter(row);
	}

	function deleteRows(selectionOrRow) {
		if (selectionOrRow instanceof CKEDITOR.dom.selection) {
			var cells = getSelectedCells(selectionOrRow);

			var firstCell = cells[0];

			var table = firstCell.getAscendant('table');

			var map = CKEDITOR.tools.buildTableMap(table);

			var startRow = cells[0].getParent();

			var startRowIndex = startRow.$.rowIndex;

			var lastCell = cells[cells.length - 1];

			var endRowIndex = lastCell.getParent().$.rowIndex + lastCell.$.rowSpan - 1;

			var rowsToDelete = [];

			// Delete cell or reduce cell spans by checking through the table map.
			for (var i = startRowIndex; i <= endRowIndex; i++) {
				var mapRow = map[i];

				var row = new CKEDITOR.dom.element(table.$.rows[i]);

				for (var j = 0; j < mapRow.length; j++) {
					var cell = new CKEDITOR.dom.element(mapRow[j]);

					var cellRowIndex = cell.getParent().$.rowIndex;

					if (cell.$.rowSpan == 1) cell.remove();
					// Row spanned cell.
					else {
							// Span row of the cell, reduce spanning.
							cell.$.rowSpan -= 1;
							// Root row of the cell, root cell to next row.
							if (cellRowIndex == i) {
								var nextMapRow = map[i + 1];
								nextMapRow[j - 1] ? cell.insertAfter(new CKEDITOR.dom.element(nextMapRow[j - 1])) : new CKEDITOR.dom.element(table.$.rows[i + 1]).append(cell, 1);
							}
						}

					j += cell.$.colSpan - 1;
				}

				rowsToDelete.push(row);
			}

			var rows = table.$.rows;

			// Where to put the cursor after rows been deleted?
			// 1. Into next sibling row if any;
			// 2. Into previous sibling row if any;
			// 3. Into table's parent element if it's the very last row.
			var cursorPosition = new CKEDITOR.dom.element(rows[endRowIndex + 1] || (startRowIndex > 0 ? rows[startRowIndex - 1] : null) || table.$.parentNode);

			for (var _i = rowsToDelete.length; _i >= 0; _i--) {
				deleteRows(rowsToDelete[_i]);
			}return cursorPosition;
		} else if (selectionOrRow instanceof CKEDITOR.dom.element) {
			var _table = selectionOrRow.getAscendant('table');

			if (_table.$.rows.length == 1) _table.remove();else selectionOrRow.remove();
		}

		return null;
	}

	function getCellColIndex(cell, isStart) {
		var row = cell.getParent();

		var rowCells = row.$.cells;

		var colIndex = 0;
		for (var i = 0; i < rowCells.length; i++) {
			var mapCell = rowCells[i];
			colIndex += isStart ? 1 : mapCell.colSpan;
			if (mapCell == cell.$) break;
		}

		return colIndex - 1;
	}

	function getColumnsIndices(cells, isStart) {
		var retval = isStart ? Infinity : 0;
		for (var i = 0; i < cells.length; i++) {
			var colIndex = getCellColIndex(cells[i], isStart);
			if (isStart ? colIndex < retval : colIndex > retval) retval = colIndex;
		}
		return retval;
	}

	function insertColumn(selection, insertBefore) {
		var cells = getSelectedCells(selection);

		var firstCell = cells[0];

		var table = firstCell.getAscendant('table');

		var startCol = getColumnsIndices(cells, 1);

		var lastCol = getColumnsIndices(cells);

		var colIndex = insertBefore ? startCol : lastCol;

		var map = CKEDITOR.tools.buildTableMap(table);

		var cloneCol = [];

		var nextCol = [];

		var height = map.length;

		for (var i = 0; i < height; i++) {
			cloneCol.push(map[i][colIndex]);
			var nextCell = insertBefore ? map[i][colIndex - 1] : map[i][colIndex + 1];
			nextCol.push(nextCell);
		}

		for (var _i2 = 0; _i2 < height; _i2++) {
			var cell = void 0;

			if (!cloneCol[_i2]) continue;

			// Check whether there's a spanning column here, do not break it.
			if (cloneCol[_i2].colSpan > 1 && nextCol[_i2] == cloneCol[_i2]) {
				cell = cloneCol[_i2];
				cell.colSpan += 1;
			} else {
				cell = new CKEDITOR.dom.element(cloneCol[_i2]).clone();
				cell.removeAttribute('colSpan');
				cell.appendBogus();
				cell[insertBefore ? 'insertBefore' : 'insertAfter'].call(cell, new CKEDITOR.dom.element(cloneCol[_i2]));
				cell = cell.$;
			}

			_i2 += cell.rowSpan - 1;
		}
	}

	function deleteColumns(selectionOrCell) {
		var cells = getSelectedCells(selectionOrCell);

		var firstCell = cells[0];

		var lastCell = cells[cells.length - 1];

		var table = firstCell.getAscendant('table');

		var map = CKEDITOR.tools.buildTableMap(table);

		var startColIndex = void 0;

		var endColIndex = void 0;

		var rowsToDelete = [];

		var rows = void 0;

		// Figure out selected cells' column indices.
		for (var i = 0, _rows = map.length; i < _rows; i++) {
			for (var j = 0, cols = map[i].length; j < cols; j++) {
				if (map[i][j] == firstCell.$) startColIndex = j;
				if (map[i][j] == lastCell.$) endColIndex = j;
			}
		}

		// Delete cell or reduce cell spans by checking through the table map.
		for (var _i3 = startColIndex; _i3 <= endColIndex; _i3++) {
			for (var _j = 0; _j < map.length; _j++) {
				var mapRow = map[_j];

				var row = new CKEDITOR.dom.element(table.$.rows[_j]);

				var cell = new CKEDITOR.dom.element(mapRow[_i3]);

				if (cell.$) {
					if (cell.$.colSpan == 1) cell.remove();
					// Reduce the col spans.
					else cell.$.colSpan -= 1;

					_j += cell.$.rowSpan - 1;

					if (!row.$.cells.length) rowsToDelete.push(row);
				}
			}
		}

		var firstRowCells = table.$.rows[0] && table.$.rows[0].cells;

		// Where to put the cursor after columns been deleted?
		// 1. Into next cell of the first row if any;
		// 2. Into previous cell of the first row if any;
		// 3. Into table's parent element;
		var cursorPosition = new CKEDITOR.dom.element(firstRowCells[startColIndex] || (startColIndex ? firstRowCells[startColIndex - 1] : table.$.parentNode));

		// Delete table rows only if all columns are gone (do not remove empty row).
		if (rowsToDelete.length == rows) table.remove();

		return cursorPosition;
	}

	function insertCell(selection, insertBefore) {
		var startElement = selection.getStartElement();
		var cell = startElement.getAscendant('td', 1) || startElement.getAscendant('th', 1);

		if (!cell) return;

		// Create the new cell element to be added.
		var newCell = cell.clone();
		newCell.appendBogus();

		if (insertBefore) newCell.insertBefore(cell);else newCell.insertAfter(cell);
	}

	function deleteCells(selectionOrCell) {
		if (selectionOrCell instanceof CKEDITOR.dom.selection) {
			var cellsToDelete = getSelectedCells(selectionOrCell);
			var table = cellsToDelete[0] && cellsToDelete[0].getAscendant('table');
			var cellToFocus = getFocusElementAfterDelCells(cellsToDelete);

			for (var i = cellsToDelete.length - 1; i >= 0; i--) {
				deleteCells(cellsToDelete[i]);
			}if (cellToFocus) placeCursorInCell(cellToFocus, true);else if (table) table.remove();
		} else if (selectionOrCell instanceof CKEDITOR.dom.element) {
			var tr = selectionOrCell.getParent();
			if (tr.getChildCount() == 1) tr.remove();else selectionOrCell.remove();
		}
	}

	// Remove filler at end and empty spaces around the cell content.
	function trimCell(cell) {
		var bogus = cell.getBogus();
		bogus && bogus.remove();
		cell.trim();
	}

	function placeCursorInCell(cell, placeAtEnd) {
		var docInner = cell.getDocument();

		var docOuter = CKEDITOR.document;

		// Fixing "Unspecified error" thrown in IE10 by resetting
		// selection the dirty and shameful way (#10308).
		// We can not apply this hack to IE8 because
		// it causes error (#11058).
		if (CKEDITOR.env.ie && CKEDITOR.env.version == 10) {
			docOuter.focus();
			docInner.focus();
		}

		var range = new CKEDITOR.dom.range(docInner);
		if (!range['moveToElementEdit' + (placeAtEnd ? 'End' : 'Start')](cell)) {
			range.selectNodeContents(cell);
			range.collapse(placeAtEnd ? false : true);
		}
		range.select(true);
	}

	function cellInRow(tableMap, rowIndex, cell) {
		var oRow = tableMap[rowIndex];
		if (typeof cell == 'undefined') return oRow;

		for (var c = 0; oRow && c < oRow.length; c++) {
			if (cell.is && oRow[c] == cell.$) return c;else if (c == cell) return new CKEDITOR.dom.element(oRow[c]);
		}
		return cell.is ? -1 : null;
	}

	function cellInCol(tableMap, colIndex) {
		var oCol = [];
		for (var r = 0; r < tableMap.length; r++) {
			var row = tableMap[r];
			oCol.push(row[colIndex]);

			// Avoid adding duplicate cells.
			if (row[colIndex].rowSpan > 1) r += row[colIndex].rowSpan - 1;
		}
		return oCol;
	}

	function mergeCells(selection, mergeDirection, isDetect) {
		var cells = getSelectedCells(selection);

		// Invalid merge request if:
		// 1. In batch mode despite that less than two selected.
		// 2. In solo mode while not exactly only one selected.
		// 3. Cells distributed in different table groups (e.g. from both thead and tbody).
		var commonAncestor = void 0;
		if ((mergeDirection ? cells.length != 1 : cells.length < 2) || (commonAncestor = selection.getCommonAncestor()) && commonAncestor.type == CKEDITOR.NODE_ELEMENT && commonAncestor.is('table')) return false;

		var cell = void 0;

		var firstCell = cells[0];

		var table = firstCell.getAscendant('table');

		var map = CKEDITOR.tools.buildTableMap(table);

		var mapHeight = map.length;

		var mapWidth = map[0].length;

		var startRow = firstCell.getParent().$.rowIndex;

		var startColumn = cellInRow(map, startRow, firstCell);

		if (mergeDirection) {
			var targetCell = void 0;
			try {
				var rowspan = parseInt(firstCell.getAttribute('rowspan'), 10) || 1;
				var colspan = parseInt(firstCell.getAttribute('colspan'), 10) || 1;

				targetCell = map[mergeDirection == 'up' ? startRow - rowspan : mergeDirection == 'down' ? startRow + rowspan : startRow][mergeDirection == 'left' ? startColumn - colspan : mergeDirection == 'right' ? startColumn + colspan : startColumn];
			} catch (er) {
				return false;
			}

			// 1. No cell could be merged.
			// 2. Same cell actually.
			if (!targetCell || firstCell.$ == targetCell) return false;

			// Sort in map order regardless of the DOM sequence.
			cells[mergeDirection == 'up' || mergeDirection == 'left' ? 'unshift' : 'push'](new CKEDITOR.dom.element(targetCell));
		}

		// Start from here are merging way ignorance (merge up/right, batch merge).
		var doc = firstCell.getDocument();

		var lastRowIndex = startRow;

		var totalRowSpan = 0;

		var totalColSpan = 0;

		// Use a documentFragment as buffer when appending cell contents.

		var frag = !isDetect && new CKEDITOR.dom.documentFragment(doc);

		var dimension = 0;

		for (var i = 0; i < cells.length; i++) {
			cell = cells[i];

			var tr = cell.getParent();

			var cellFirstChild = cell.getFirst();

			var colSpan = cell.$.colSpan;

			var rowSpan = cell.$.rowSpan;

			var rowIndex = tr.$.rowIndex;

			var colIndex = cellInRow(map, rowIndex, cell);

			// Accumulated the actual places taken by all selected cells.
			dimension += colSpan * rowSpan;
			// Accumulated the maximum virtual spans from column and row.
			totalColSpan = Math.max(totalColSpan, colIndex - startColumn + colSpan);
			totalRowSpan = Math.max(totalRowSpan, rowIndex - startRow + rowSpan);

			if (!isDetect) {
				// Trim all cell fillers and check to remove empty cells.
				if (trimCell(cell), cell.getChildren().count()) {
					// Merge vertically cells as two separated paragraphs.
					if (rowIndex != lastRowIndex && cellFirstChild && !(cellFirstChild.isBlockBoundary && cellFirstChild.isBlockBoundary({ br: 1 }))) {
						var last = frag.getLast(CKEDITOR.dom.walker.whitespaces(true));
						if (last && !(last.is && last.is('br'))) frag.append('br');
					}

					cell.moveChildren(frag);
				}
				i ? cell.remove() : cell.setHtml('');
			}
			lastRowIndex = rowIndex;
		}

		if (!isDetect) {
			frag.moveChildren(firstCell);

			firstCell.appendBogus();

			if (totalColSpan >= mapWidth) firstCell.removeAttribute('rowSpan');else firstCell.$.rowSpan = totalRowSpan;

			if (totalRowSpan >= mapHeight) firstCell.removeAttribute('colSpan');else firstCell.$.colSpan = totalColSpan;

			// Swip empty <tr> left at the end of table due to the merging.
			var trs = new CKEDITOR.dom.nodeList(table.$.rows);

			var count = trs.count();

			for (var _i4 = count - 1; _i4 >= 0; _i4--) {
				var tailTr = trs.getItem(_i4);
				if (!tailTr.$.cells.length) {
					tailTr.remove();
					count++;
					continue;
				}
			}

			return firstCell;
		}
		// Be able to merge cells only if actual dimension of selected
		// cells equals to the caculated rectangle.
		else {
				return totalRowSpan * totalColSpan == dimension;
			}
	}

	function verticalSplitCell(selection, isDetect) {
		var cells = getSelectedCells(selection);
		if (cells.length > 1) return false;else if (isDetect) return true;

		var cell = cells[0];

		var tr = cell.getParent();

		var table = tr.getAscendant('table');

		var map = CKEDITOR.tools.buildTableMap(table);

		var rowIndex = tr.$.rowIndex;

		var colIndex = cellInRow(map, rowIndex, cell);

		var rowSpan = cell.$.rowSpan;

		var newCell = void 0;

		var newRowSpan = void 0;

		var newCellRowSpan = void 0;

		var newRowIndex = void 0;

		if (rowSpan > 1) {
			newRowSpan = Math.ceil(rowSpan / 2);
			newCellRowSpan = Math.floor(rowSpan / 2);
			newRowIndex = rowIndex + newRowSpan;
			var newCellTr = new CKEDITOR.dom.element(table.$.rows[newRowIndex]);

			var newCellRow = cellInRow(map, newRowIndex);

			var candidateCell = void 0;

			newCell = cell.clone();

			// Figure out where to insert the new cell by checking the vitual row.
			for (var c = 0; c < newCellRow.length; c++) {
				candidateCell = newCellRow[c];
				// Catch first cell actually following the column.
				if (candidateCell.parentNode == newCellTr.$ && c > colIndex) {
					newCell.insertBefore(new CKEDITOR.dom.element(candidateCell));
					break;
				} else {
					candidateCell = null;
				}
			}

			// The destination row is empty, append at will.
			if (!candidateCell) newCellTr.append(newCell);
		} else {
			newCellRowSpan = newRowSpan = 1;

			var _newCellTr = tr.clone();
			_newCellTr.insertAfter(tr);
			_newCellTr.append(newCell = cell.clone());

			var cellsInSameRow = cellInRow(map, rowIndex);
			for (var i = 0; i < cellsInSameRow.length; i++) {
				cellsInSameRow[i].rowSpan++;
			}
		}

		newCell.appendBogus();

		cell.$.rowSpan = newRowSpan;
		newCell.$.rowSpan = newCellRowSpan;
		if (newRowSpan == 1) cell.removeAttribute('rowSpan');
		if (newCellRowSpan == 1) newCell.removeAttribute('rowSpan');

		return newCell;
	}

	function horizontalSplitCell(selection, isDetect) {
		var cells = getSelectedCells(selection);
		if (cells.length > 1) return false;else if (isDetect) return true;

		var cell = cells[0];

		var tr = cell.getParent();

		var table = tr.getAscendant('table');

		var map = CKEDITOR.tools.buildTableMap(table);

		var rowIndex = tr.$.rowIndex;

		var colIndex = cellInRow(map, rowIndex, cell);

		var colSpan = cell.$.colSpan;

		var newCell = void 0;

		var newColSpan = void 0;

		var newCellColSpan = void 0;

		if (colSpan > 1) {
			newColSpan = Math.ceil(colSpan / 2);
			newCellColSpan = Math.floor(colSpan / 2);
		} else {
			newCellColSpan = newColSpan = 1;
			var cellsInSameCol = cellInCol(map, colIndex);
			for (var i = 0; i < cellsInSameCol.length; i++) {
				cellsInSameCol[i].colSpan++;
			}
		}
		newCell = cell.clone();
		newCell.insertAfter(cell);
		newCell.appendBogus();

		cell.$.colSpan = newColSpan;
		newCell.$.colSpan = newCellColSpan;
		if (newColSpan == 1) cell.removeAttribute('colSpan');
		if (newCellColSpan == 1) newCell.removeAttribute('colSpan');

		return newCell;
	}

	CKEDITOR.plugins.add('ae_tabletools', {
		init: function init(editor) {
			function createDef(def) {
				return CKEDITOR.tools.extend(def || {}, {
					contextSensitive: 1,
					refresh: function refresh(editor, path) {
						this.setState(path.contains({ td: 1, th: 1 }, 1) ? CKEDITOR.TRISTATE_OFF : CKEDITOR.TRISTATE_DISABLED);
					}
				});
			}
			function addCmd(name, def) {
				var cmd = editor.getCommand(name);

				if (cmd) {
					return;
				}

				cmd = editor.addCommand(name, def);
				editor.addFeature(cmd);
			}

			addCmd('rowDelete', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					placeCursorInCell(deleteRows(selection));
				}
			}));

			addCmd('rowInsertBefore', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					insertRow(selection, true);
				}
			}));

			addCmd('rowInsertAfter', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					insertRow(selection);
				}
			}));

			addCmd('columnDelete', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					var element = deleteColumns(selection);
					element && placeCursorInCell(element, true);
				}
			}));

			addCmd('columnInsertBefore', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					insertColumn(selection, true);
				}
			}));

			addCmd('columnInsertAfter', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					insertColumn(selection);
				}
			}));

			addCmd('cellDelete', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					deleteCells(selection);
				}
			}));

			addCmd('cellMerge', createDef({
				allowedContent: 'td[colspan,rowspan]',
				requiredContent: 'td[colspan,rowspan]',
				exec: function exec(editor) {
					placeCursorInCell(mergeCells(editor.getSelection()), true);
				}
			}));

			addCmd('cellMergeRight', createDef({
				allowedContent: 'td[colspan]',
				requiredContent: 'td[colspan]',
				exec: function exec(editor) {
					placeCursorInCell(mergeCells(editor.getSelection(), 'right'), true);
				}
			}));

			addCmd('cellMergeDown', createDef({
				allowedContent: 'td[rowspan]',
				requiredContent: 'td[rowspan]',
				exec: function exec(editor) {
					placeCursorInCell(mergeCells(editor.getSelection(), 'down'), true);
				}
			}));

			addCmd('cellVerticalSplit', createDef({
				allowedContent: 'td[rowspan]',
				requiredContent: 'td[rowspan]',
				exec: function exec(editor) {
					placeCursorInCell(verticalSplitCell(editor.getSelection()));
				}
			}));

			addCmd('cellHorizontalSplit', createDef({
				allowedContent: 'td[colspan]',
				requiredContent: 'td[colspan]',
				exec: function exec(editor) {
					placeCursorInCell(horizontalSplitCell(editor.getSelection()));
				}
			}));

			addCmd('cellInsertBefore', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					insertCell(selection, true);
				}
			}));

			addCmd('cellInsertAfter', createDef({
				requiredContent: 'table',
				exec: function exec(editor) {
					var selection = editor.getSelection();
					insertCell(selection);
				}
			}));
		},

		getSelectedCells: getSelectedCells
	});
})();

/**
 * Create a two-dimension array that reflects the actual layout of table cells,
 * with cell spans, with mappings to the original td elements.
 *
 * @param {CKEDITOR.dom.element} table
 * @member CKEDITOR.tools
 */
CKEDITOR.tools.buildTableMap = function (table) {
	var aRows = table.$.rows;

	// Row and Column counters.
	var r = -1;

	var aMap = [];

	for (var i = 0; i < aRows.length; i++) {
		r++;
		!aMap[r] && (aMap[r] = []);

		var c = -1;

		for (var j = 0; j < aRows[i].cells.length; j++) {
			var oCell = aRows[i].cells[j];

			c++;
			while (aMap[r][c]) {
				c++;
			}var iColSpan = isNaN(oCell.colSpan) ? 1 : oCell.colSpan;
			var iRowSpan = isNaN(oCell.rowSpan) ? 1 : oCell.rowSpan;

			for (var rs = 0; rs < iRowSpan; rs++) {
				if (!aMap[r + rs]) aMap[r + rs] = [];

				for (var cs = 0; cs < iColSpan; cs++) {
					aMap[r + rs][c + cs] = aRows[i].cells[j];
				}
			}

			c += iColSpan - 1;
		}
	}
	return aMap;
};

/***/ }),

/***/ "./src/selections/selection-arrowbox.js":
/*!**********************************************!*\
  !*** ./src/selections/selection-arrowbox.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var tableSelectionGetArrowBoxClasses = function tableSelectionGetArrowBoxClasses() {
	return 'ae-arrow-box ae-arrow-box-bottom';
};

var SelectionGetArrowBoxClasses = {
	table: tableSelectionGetArrowBoxClasses
};

exports.default = SelectionGetArrowBoxClasses;

/***/ }),

/***/ "./src/selections/selection-position.js":
/*!**********************************************!*\
  !*** ./src/selections/selection-position.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _reactDom = __webpack_require__(/*! react-dom */ "react-dom");

var _reactDom2 = _interopRequireDefault(_reactDom);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Default gutter value for toolbar positioning
var DEFAULT_GUTTER = {
	left: 0,
	top: 0
};

/**
 * Centers a Toolbar according to given rectangle
 *
 * @method centerToolbar
 * @param {Object} toolbar The toolbar to be centered
 * @param {Object} rect The rectangle according to which the Toolbar will be centered
 */
var centerToolbar = function centerToolbar(toolbar, rect) {
	var toolbarNode = _reactDom2.default.findDOMNode(toolbar);

	var nativeEditor = toolbar.props.editor.get('nativeEditor');
	var uiNode = nativeEditor.config.uiNode || document.body;
	var uiNodeStyle = getComputedStyle(uiNode);
	var uiNodeMarginLeft = parseInt(uiNodeStyle.getPropertyValue('margin-left'), 10);
	var uiNodeMarginRight = parseInt(uiNodeStyle.getPropertyValue('margin-right'), 10);
	var totalWidth = uiNodeMarginLeft + uiNode.clientWidth + uiNodeMarginRight;

	var halfNodeWidth = toolbarNode.offsetWidth / 2;
	var scrollPosition = new CKEDITOR.dom.window(window).getScrollPosition();

	var gutter = toolbar.props.gutter || DEFAULT_GUTTER;

	var widgetXY = toolbar.getWidgetXYPoint(rect.left + rect.width / 2 - scrollPosition.x, rect.top + scrollPosition.y, CKEDITOR.SELECTION_BOTTOM_TO_TOP);

	var endPosition = [rect.left + rect.width / 2 - halfNodeWidth - scrollPosition.x, rect.top - toolbarNode.offsetHeight + scrollPosition.y - gutter.top];

	if (endPosition[0] < 0) {
		endPosition[0] = 0;
	} else if (endPosition[0] > totalWidth - toolbarNode.offsetWidth) {
		endPosition[0] = totalWidth - toolbarNode.offsetWidth;
	}

	toolbar.moveToPoint(widgetXY, endPosition);
};

/**
 * Sets the position of a toolbar according to the position of the selected image
 *
 * @method imageSelectionSetPosition
 * @param {Object} payload Payload, should contain the selection data for retrieving the
 * client rectangle of the selected image
 * @return {Boolean} True, in all cases
 */
var imageSelectionSetPosition = function imageSelectionSetPosition(payload) {
	var selectionData = payload.selectionData ? payload.selectionData : payload.editorEvent ? payload.editorEvent.data.selectionData : null;

	if (selectionData && selectionData.element) {
		centerToolbar(this, selectionData.element.getClientRect());

		return true;
	}
};

/**
 * Sets the position of a toolbar according to the position of the selected image
 *
 * @method tableSelectionSetPosition
 * @param {Object} payload Object, which contains the selection data for retrieving the
 * client rectangle of the selected table
 * @return {Boolean} True, in all cases
 */
var tableSelectionSetPosition = function tableSelectionSetPosition(payload) {
	var nativeEditor = payload.editor.get('nativeEditor');
	var uiNode = nativeEditor.config.uiNode;

	var scrollTop = uiNode ? uiNode.scrollTop : 0;

	var table = new CKEDITOR.Table(nativeEditor).getFromSelection();
	var rect = table.getClientRect();
	rect.top += scrollTop;

	centerToolbar(this, rect);

	return true;
};

var SelectionSetPosition = {
	image: imageSelectionSetPosition,
	table: tableSelectionSetPosition
};

exports.default = SelectionSetPosition;

/***/ }),

/***/ "./src/selections/selection-test.js":
/*!******************************************!*\
  !*** ./src/selections/selection-test.js ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});
var _isRangeAtElementEnd = function _isRangeAtElementEnd(range, element) {
	// Finding if a range is at the end of an element is somewhat tricky due to how CKEditor handles
	// ranges. It might depend on wether a source node inside the element is selected or not. For now,
	// we need to cover the following cases:
	//
	// - The text length of the element is the same as the endOffset of the range
	// - Both start and end containers match the element and the start and end offsets are 1

	return element.getText().length === range.endOffset || element.equals(range.startContainer) && element.equals(range.endContainer) && range.startOffset === range.endOffset && range.endOffset === 1;
};

var embedSelectionTest = function embedSelectionTest(payload) {
	var selectionData = payload.data.selectionData;

	return !!(selectionData.element && selectionData.element.getAttribute('data-widget') === 'ae_embed');
};

var embedUrlSelectionTest = function embedUrlSelectionTest(payload) {
	var selectionData = payload.data.selectionData;

	return !!(selectionData.element && selectionData.element.getAttribute('data-widget') === 'embedurl');
};

var headingTextSelectionTest = function headingTextSelectionTest(payload) {
	var headings = ['h1', 'h2', 'h3', 'h4', 'h5', 'h6'];
	var nativeEditor = payload.editor.get('nativeEditor');
	var selectionData = payload.data.selectionData;
	var selectionEmpty = nativeEditor.isSelectionEmpty();

	return !!(!selectionData.element && selectionData.region && !selectionEmpty && !nativeEditor.getSelection().getCommonAncestor().isReadOnly() && nativeEditor.elementPath().contains(headings));
};

var linkSelectionTest = function linkSelectionTest(payload) {
	var nativeEditor = payload.editor.get('nativeEditor');
	var range = nativeEditor.getSelection().getRanges()[0];
	var selectionData = payload.data.selectionData;

	var element = new CKEDITOR.Link(nativeEditor).getFromSelection();
	var isSelectionEmpty = nativeEditor.isSelectionEmpty();
	var elementIsNotImage = selectionData.element ? selectionData.element.getName() !== 'img' : true;

	return !!(isSelectionEmpty && elementIsNotImage && element && element.getText().length !== range.endOffset && element && !element.isReadOnly() && !_isRangeAtElementEnd(range, element));
};

var imageSelectionTest = function imageSelectionTest(payload) {
	var selectionData = payload.data.selectionData;

	return !!(selectionData.element && selectionData.element.getName() === 'img' && !selectionData.element.isReadOnly());
};

var textSelectionTest = function textSelectionTest(payload) {
	var nativeEditor = payload.editor.get('nativeEditor');

	var selectionEmpty = nativeEditor.isSelectionEmpty();

	var selectionData = payload.data.selectionData;

	return !!(!selectionData.element && selectionData.region && !selectionEmpty && !nativeEditor.getSelection().getCommonAncestor().isReadOnly());
};

var tableSelectionTest = function tableSelectionTest(payload) {
	var nativeEditor = payload.editor.get('nativeEditor');

	var table = new CKEDITOR.Table(nativeEditor);
	var element = table.getFromSelection();

	return !!(element && table.isEditable(element));
};

var SelectionTest = {
	embed: embedSelectionTest,
	embedUrl: embedUrlSelectionTest,
	header: headingTextSelectionTest,
	image: imageSelectionTest,
	link: linkSelectionTest,
	table: tableSelectionTest,
	text: textSelectionTest
};

exports.default = SelectionTest;

/***/ }),

/***/ "./src/selections/selections.js":
/*!**************************************!*\
  !*** ./src/selections/selections.js ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
	value: true
});

var _selectionArrowbox = __webpack_require__(/*! ./selection-arrowbox.js */ "./src/selections/selection-arrowbox.js");

var _selectionArrowbox2 = _interopRequireDefault(_selectionArrowbox);

var _selectionPosition = __webpack_require__(/*! ./selection-position.js */ "./src/selections/selection-position.js");

var _selectionPosition2 = _interopRequireDefault(_selectionPosition);

var _selectionTest = __webpack_require__(/*! ./selection-test.js */ "./src/selections/selection-test.js");

var _selectionTest2 = _interopRequireDefault(_selectionTest);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Selections = [{
	name: 'embed',
	buttons: ['embedRemove', 'embedEdit'],
	test: _selectionTest2.default.embed
}, {
	name: 'embedUrl',
	buttons: ['embedVideo', 'embedVideoEdit'],
	test: _selectionTest2.default.embedUrl
}, {
	name: 'link',
	buttons: ['linkEdit'],
	test: _selectionTest2.default.link
}, {
	name: 'image',
	buttons: ['imageLeft', 'imageCenter', 'imageRight', 'AccessibilityImageAlt'],
	setPosition: _selectionPosition2.default.image,
	test: _selectionTest2.default.image
}, {
	name: 'text',
	buttons: {
		full: [['Font', 'FontSize', 'separator', 'bold', 'italic', 'underline', 'strike', 'separator', 'link'], ['paragraphAlign', 'separator', 'ul', 'ol', 'separator', 'h1', 'h2', 'separator', 'indentBlock', 'outdentBlock', 'separator', 'TextColor', 'BGColor', 'separator', 'code', 'quote', 'separator', 'removeFormat']],

		simple: ['styles', 'bold', 'italic', 'underline', 'link']

		// simple: [
		//     'backgroundColor',
		//     'camera',
		//     'color',
		//     'embed',
		//     'h1',
		//     'h2',
		//     'hline',
		//     'image',
		//     'imageCenter',
		//     'imageLeft',
		//     'imageRight',
		//     'indentBlock',
		//     'italic',
		//     'link',
		//     'linkBrowse',
		//     'linkTargetEdit',
		//     'ol',
		//     'outdentBlock',
		//     'paragraphAlign',
		//     'paragraphCenter',
		//     'paragraphJustify',
		//     'paragraphLeft',
		//     'paragraphRight',
		//     'quote',
		//     'removeFormat',
		//     'spacing',
		//     'spacing',
		//     'strike',
		//     'styles',
		//     'subscript',
		//     'superscript',
		//     'tableCell',
		//     'tableColumn',
		//     'tableEdit',
		//     'tableHeading',
		//     'tableRemove',
		//     'tableRow',
		//     'table',
		//     'twitter',
		//     'ul',
		//     'underline'
		// ]
	},
	test: _selectionTest2.default.text
}, {
	name: 'table',
	buttons: ['tableHeading', 'tableRow', 'tableColumn', 'tableCell', 'tableRemove'],
	getArrowBoxClasses: _selectionArrowbox2.default.table,
	setPosition: _selectionPosition2.default.table,
	test: _selectionTest2.default.table
}];

exports.default = Selections;

/***/ }),

/***/ "react":
/*!****************************************************************************************************!*\
  !*** external {"root":"React","commonjs2":"react","commonjs":"react","amd":"react","umd":"react"} ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function() { module.exports = window[undefined]; }());

/***/ }),

/***/ "react-dom":
/*!***********************************************************************************************************************!*\
  !*** external {"root":"ReactDOM","commonjs2":"react-dom","commonjs":"react-dom","amd":"react-dom","umd":"react-dom"} ***!
  \***********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

(function() { module.exports = window[undefined]; }());

/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,